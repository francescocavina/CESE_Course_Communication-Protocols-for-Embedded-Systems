/*
 * ssd1306_port.c
 *
 * Created on: Apr 13, 2023
 *      Author: Francesco Cavina <francescocavina@outlook.com>
 *
 * Original author of certain parts:  	Tilen Majerle <tilen@majerle.eu>
 * Modification for STM32f10x: 			Alexander Lutsai <s.lyra@ya.ru>
 *
 *
 * The SSD1306 DISPLAY uses I2C for communication.
 * This driver has different functions for drawing lines, circles and write text.
 * Default pinout depends on platform used.
 *
 * SSD1306   |STM32F429ZI     |DESCRIPTION

 * VCC       |3.3V            |Power supply voltage
 * GND       |GND             |Ground
 * SCL       |PB6 (I2C1_SCL)  |Serial clock line
 * SDA       |PB8 (I2C1_SDA)  |Serial data line
 *
 *
 * Note: In order to use this driver with other platform, only modify the
 *       functions defined on file "ssd1306_port.c".
 *
 *
 * The whole driver is composed of the following files:
 *
 *       - ssd1306.c		(DO NOT MODIFY!)
 *       - ssd1306.h		(DO NOT MODIFY!)
 *       - ssd1306_port.c	(modifiable)
 *       - ssd1306_port.h	(DO NOT MODIFY!)
 */


/* Includes ------------------------------------------------------------------*/
#include "ssd1306_port.h"


/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c_display;


/* Private function prototypes -----------------------------------------------*/
/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void);

/**
  * @brief  I2C1 Initialization Function
  * @param  None
  * @retval None
  */
static void MX_I2C1_Init(void);


/* Private function definitions ----------------------------------------------*/
static void MX_I2C1_Init(void) {

	/* Initialize I2C peripheral */
	/* Modify these fields when changing port or platform */
	hi2c_display.Instance = I2C1;
	hi2c_display.Init.ClockSpeed = 400000;
	hi2c_display.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c_display.Init.OwnAddress1 = 0;
	hi2c_display.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	hi2c_display.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hi2c_display.Init.OwnAddress2 = 0;
	hi2c_display.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	hi2c_display.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

	if (HAL_I2C_Init(&hi2c_display) != HAL_OK) {
		Error_Handler();
	}
}

static void Error_Handler(void) {

  while (1) {}
}


/* Public function definitions -----------------------------------------------*/
uint8_t ssd1306_I2C_Init(uint8_t address) {

	/* Initialize I2C peripheral */
	MX_I2C1_Init();
	uint32_t p = 250000;
	while(p>0)
		p--;

	/* Check if parameter (display address) is not NULL */
	if(address != NULL) {

		/* Check if display is connected to I2C */
		if (HAL_I2C_IsDeviceReady(&hi2c_display, address, 1, 20000) != HAL_OK) {
			return 0;	// Display not connected
		} else {
			return 1;	// Display connected
		}
	} else {
		return 0;
	}
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {

	uint8_t dt[256];
	uint8_t i;

	/* Check if first parameter (display address) is not NULL */
	if(address != NULL) {

		dt[0] = reg;

		for(i = 0; i < count; i++) {
			dt[i+1] = data[i];
		}

		HAL_I2C_Master_Transmit(&hi2c_display, address, dt, count+1, 10);
	}
}

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {

	uint8_t dt[2];

	/* Check if first parameter (display address) is not NULL */
	if(address != NULL) {

		dt[0] = reg;
		dt[1] = data;

		HAL_I2C_Master_Transmit(&hi2c_display, address, dt, 2, 10);
	}
}
