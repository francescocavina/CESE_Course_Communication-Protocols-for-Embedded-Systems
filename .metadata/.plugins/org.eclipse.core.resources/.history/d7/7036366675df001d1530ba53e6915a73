/**
 * ssd1306.c
 *
 * Created on: Apr 13, 2023
 *      Author: Francesco Cavina <francescocavina@outlook.com>
 *
 * Original author of certain parts:  	Tilen Majerle <tilen@majerle.eu>
 * Modification for STM32f10x: 			Alexander Lutsai <s.lyra@ya.ru>
 *
 *
 * The SSD1306 DISPLAY uses I2C for communication.
 * This driver has different functions for drawing lines, circles and write text.
 * Default pinout depends on platform used.
 *
 * SSD1306   |STM32F429ZI     |DESCRIPTION

 * VCC       |3.3V            |Power supply voltage
 * GND       |GND             |Ground
 * SCL       |PB6 (I2C1_SCL)  |Serial clock line
 * SDA       |PB8 (I2C1_SDA)  |Serial data line
 *
 *
 * Note: In order to use this driver with other platform, only modify the
 *       functions defined on PORT files.
 *       Look for "MODIFIABLE BEGIN #" and "MODIFIABLE END #" labels.
 *
 *
 * The whole driver is composed of the following files:
 *
 *       - ssd1306.c		(DO NOT MODIFY!)
 *       - ssd1306.h		(DO NOT MODIFY!)
 *       - ssd1306_port.c	(modifiable)
 *       - ssd1306_port.h	(modifiable)
 */


/* Includes ------------------------------------------------------------------*/
#include "ssd1306.h"

/* Private defines -----------------------------------------------------------*/
#define SSD1306_WRITECOMMAND(command)		ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, (command))	// Write command
#define SSD1306_WRITEDATA(data)				ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x40, (data))		// Write data
#define ABS(x)   ((x) > 0 ? (x) : -(x))		// Absolute value

#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


/* Private typedefs ----------------------------------------------------------*/
/* SSD1306 structure */
typedef struct {
	uint8_t CurrentX;
	uint8_t CurrentY;
	uint8_t Inverted;
	uint8_t Initialized;
} SSD1306_t;


/* Private variables ---------------------------------------------------------*/
static SSD1306_t SSD1306;
static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];	// SSD1306 data buffer


/* Public function definitions -----------------------------------------------*/
uint8_t SSD1306_Init(void) {

	/* Initialize I2C */
	/* Check connection success */
	if(ssd1306_I2C_Init(SSD1306_I2C_ADDR)) {
		return 1;
	} else {
		return 0;
	}

	HAL_Delay(500);

	/* Initialize/configure display */
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAE); // FUNDAMENTAL COMMAND: Set display OFF
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x20); // ADDRESSING SETTING COMMAND: 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode; 10,Page Addressing Mode (RESET); 11,Invalid
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x10); // ADDRESSING SETTING COMMAND: Set higher column start address for page addressing mode
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xB0); // ADDRESSING SETTING COMMAND: Set page start address for page addressing mode
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xC8); // HARDWARE CONFIGURATION COMMAND: Set COM Output Scan Direction
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00); // ADDRESSING SETTING COMMAND: Set lower column start address for page addressing mode
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x10); // ADDRESSING SETTING COMMAND: Set higher column start address for page addressing mode
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x40); // HARDWARE CONFIGURATION COMMAND: Set display start line
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x81); // FUNDAMENTAL COMMAND: Set contrast control. Contrast increases as the value increases
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xFF);
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA1); // HARDWARE CONFIGURATION COMMAND: Set segment re-map 0 to 127
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA6); // FUNDAMENTAL COMMAND: Set normal display
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA8); // HARDWARE CONFIGURATION COMMAND: Set multiplex ratio (1 to 64)
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x3F);
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA4); // FUNDAMENTAL COMMAND: Output follows RAM content
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD3); // HARDWARE CONFIGURATION COMMAND: Set display offset
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00); // ADDRESSING SETTING COMMAND: Set lower column start address for page addressing mode
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD5); // HARDWARE CONFIGURATION COMMAND: Set display clock divide ratio/oscillator frequency
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xF0); // Set divide ratio
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD9); // HARDWARE CONFIGURATION COMMAND: Set pre-charge period
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x22); // ADDRESSING SETTING COMMAND: Set page address
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xDA); // HARDWARE CONFIGURATION COMMAND: Set COM pins hardware configuration
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x12);
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xDB); // HARDWARE CONFIGURATION COMMAND: Set Vcomh deselect level - 0.77xVcc
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x20); // ADDRESSING SETTING COMMAND: 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode; 10,Page Addressing Mode (RESET); 11,Invalid
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x8D); // Set DC-DC enable
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x14);
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAF); // FUNDAMENTAL COMMAND: Set display ON in normal mode
	ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x2E); // Deactivate scroll

	/* Clear screen */
	SSD1306_CLEAR();

	/* Set default values */
	SSD1306.CurrentX = 0;
	SSD1306.CurrentY = 0;

	/* Initialized OK */
	SSD1306.Initialized = 1;

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {

	uint8_t m;

	for (m = 0; m < 8; m++) {
		ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xB0 + m);
		ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00);
		ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x10);

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {

	/* Set memory */
	/* Copy 0x00 or 0xFF to all Buffer elements */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {

	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {

		/* Error: pointer out of display */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
		color = (SSD1306_COLOR_t)!color;
	}

	/* Set color */
	if (color == SSD1306_COLOR_BLUE) {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {

	/* Set write pointers */
	SSD1306.CurrentX = x;
	SSD1306.CurrentY = y;
}

uint8_t SSD1306_Putc(uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {

	uint32_t i, b, j;

	/* Check available space in display */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
	) {
		/* Error */
		return 0;
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;

	/* Return character written */
	return ch;
}

uint8_t SSD1306_Puts(uint8_t* str, FontDef_t* Font, SSD1306_COLOR_t color) {

	/* Write characters */
	while (*str) {
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
			/* Return error */
			return *str;
		}

		/* Increase string pointer */
		str++;
	}

	/* Everything OK, zero should be returned */
	return *str;
}

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {

	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
		y1 = SSD1306_HEIGHT - 1;
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
	sx = (x0 < x1) ? 1 : -1;
	sy = (y0 < y1) ? 1 : -1;
	err = ((dx > dy) ? dx : -dy) / 2;

	if (dx == 0) {
		if (y1 < y0) {
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}

		if (x1 < x0) {
			tmp = x1;
			x1 = x0;
			x0 = tmp;
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
			SSD1306_DrawPixel(x0, i, c);
		}

		/* Return from function */
		return;
	}

	if (dy == 0) {
		if (y1 < y0) {
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}

		if (x1 < x0) {
			tmp = x1;
			x1 = x0;
			x0 = tmp;
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
			SSD1306_DrawPixel(i, y0, c);
		}

		/* Return from function */
		return;
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err;
		if (e2 > -dx) {
			err -= dy;
			x0 += sx;
		}
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		}
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {

	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
    SSD1306_DrawPixel(x0, y0 - r, c);
    SSD1306_DrawPixel(x0 + r, y0, c);
    SSD1306_DrawPixel(x0 - r, y0, c);

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
        SSD1306_DrawPixel(x0 - x, y0 - y, c);

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void) {

	SSD1306_Fill (SSD1306_COLOR_BLACK);
    SSD1306_UpdateScreen();
}
