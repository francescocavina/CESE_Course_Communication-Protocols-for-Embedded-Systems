
digitalCompass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001908  08006930  08006930  00016930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008238  08008238  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008240  08008240  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000004cc  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000554  20000554  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009994  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a7  00000000  00000000  00029a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000870  00000000  00000000  0002c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025abc  00000000  00000000  0002cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f58e  00000000  00000000  000527bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c91  00000000  00000000  00061d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001389db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032e8  00000000  00000000  00138a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006914 	.word	0x08006914

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08006914 	.word	0x08006914

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 b974 	b.w	8000edc <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468e      	mov	lr, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14d      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	d969      	bls.n	8000cf4 <__udivmoddi4+0xe8>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b152      	cbz	r2, 8000c3c <__udivmoddi4+0x30>
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	f1c2 0120 	rsb	r1, r2, #32
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c36:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	0c21      	lsrs	r1, r4, #16
 8000c42:	fbbe f6f8 	udiv	r6, lr, r8
 8000c46:	fa1f f78c 	uxth.w	r7, ip
 8000c4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c52:	fb06 f107 	mul.w	r1, r6, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c62:	f080 811f 	bcs.w	8000ea4 <__udivmoddi4+0x298>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 811c 	bls.w	8000ea4 <__udivmoddi4+0x298>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 f707 	mul.w	r7, r0, r7
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x92>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c90:	f080 810a 	bcs.w	8000ea8 <__udivmoddi4+0x29c>
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	f240 8107 	bls.w	8000ea8 <__udivmoddi4+0x29c>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	1be4      	subs	r4, r4, r7
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa4>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xc2>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80ef 	beq.w	8000e9e <__udivmoddi4+0x292>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x160>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd4>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80f9 	bhi.w	8000ed2 <__udivmoddi4+0x2c6>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	469e      	mov	lr, r3
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa4>
 8000cee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xec>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 8092 	bne.w	8000e26 <__udivmoddi4+0x21a>
 8000d02:	eba1 010c 	sub.w	r1, r1, ip
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d16:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb0e f003 	mul.w	r0, lr, r3
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x12c>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x12a>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2c0>
 8000d36:	4643      	mov	r3, r8
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d40:	fb07 1110 	mls	r1, r7, r0, r1
 8000d44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x156>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x154>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2ca>
 8000d60:	4608      	mov	r0, r1
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000d6c:	f1c6 0720 	rsb	r7, r6, #32
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	40f9      	lsrs	r1, r7
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fb09 1118 	mls	r1, r9, r8, r1
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	fb08 f00e 	mul.w	r0, r8, lr
 8000da4:	4288      	cmp	r0, r1
 8000da6:	fa02 f206 	lsl.w	r2, r2, r6
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b8>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2bc>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2bc>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	458e      	cmp	lr, r1
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1e2>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2b4>
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2b4>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4461      	add	r1, ip
 8000dee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df2:	fba0 9402 	umull	r9, r4, r0, r2
 8000df6:	eba1 010e 	sub.w	r1, r1, lr
 8000dfa:	42a1      	cmp	r1, r4
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46a6      	mov	lr, r4
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x2a4>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x2a0>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x212>
 8000e06:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e12:	fa22 f306 	lsr.w	r3, r2, r6
 8000e16:	40f1      	lsrs	r1, r6
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	f1c2 0320 	rsb	r3, r2, #32
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
 8000e34:	4091      	lsls	r1, r2
 8000e36:	4301      	orrs	r1, r0
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e44:	fb07 3610 	mls	r6, r7, r0, r3
 8000e48:	0c0b      	lsrs	r3, r1, #16
 8000e4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e52:	429e      	cmp	r6, r3
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x260>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e74:	fb07 3316 	mls	r3, r7, r6, r3
 8000e78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x28a>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e92:	3e02      	subs	r6, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0x104>
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e705      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e3      	b.n	8000c70 <__udivmoddi4+0x64>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6f8      	b.n	8000c9e <__udivmoddi4+0x92>
 8000eac:	454b      	cmp	r3, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f8>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f8>
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x28a>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1e2>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x260>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b8>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x12c>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e709      	b.n	8000cea <__udivmoddi4+0xde>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x156>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f001 fc4c 	bl	8002780 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f808 	bl	8000efc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f870 	bl	8000fd0 <MX_GPIO_Init>
  systemInit();
 8000ef0:	f000 fef6 	bl	8001ce0 <systemInit>

  /* Infinite loop */
  while (1) {
	  systemUpdate();
 8000ef4:	f000 ff0c 	bl	8001d10 <systemUpdate>
 8000ef8:	e7fc      	b.n	8000ef4 <main+0x14>
	...

08000efc <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2230      	movs	r2, #48	; 0x30
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 fa00 	bl	8004310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f62:	2302      	movs	r3, #2
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f70:	23a8      	movs	r3, #168	; 0xa8
 8000f72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fcfd 	bl	8003980 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x94>
    Error_Handler();
 8000f8c:	f000 f940 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f94:	2302      	movs	r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2105      	movs	r1, #5
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 ff5e 	bl	8003e70 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xc2>
    Error_Handler();
 8000fba:	f000 f929 	bl	8001210 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3750      	adds	r7, #80	; 0x50
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	4b83      	ldr	r3, [pc, #524]	; (80011f8 <MX_GPIO_Init+0x228>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a82      	ldr	r2, [pc, #520]	; (80011f8 <MX_GPIO_Init+0x228>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b80      	ldr	r3, [pc, #512]	; (80011f8 <MX_GPIO_Init+0x228>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	4b7c      	ldr	r3, [pc, #496]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a7b      	ldr	r2, [pc, #492]	; (80011f8 <MX_GPIO_Init+0x228>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b79      	ldr	r3, [pc, #484]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a74      	ldr	r2, [pc, #464]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b72      	ldr	r3, [pc, #456]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b6e      	ldr	r3, [pc, #440]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a6d      	ldr	r2, [pc, #436]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <MX_GPIO_Init+0x228>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b67      	ldr	r3, [pc, #412]	; (80011f8 <MX_GPIO_Init+0x228>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a66      	ldr	r2, [pc, #408]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b64      	ldr	r3, [pc, #400]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b60      	ldr	r3, [pc, #384]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a5f      	ldr	r2, [pc, #380]	; (80011f8 <MX_GPIO_Init+0x228>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <MX_GPIO_Init+0x228>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	485a      	ldr	r0, [pc, #360]	; (80011fc <MX_GPIO_Init+0x22c>)
 8001094:	f001 fee0 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2140      	movs	r1, #64	; 0x40
 800109c:	4858      	ldr	r0, [pc, #352]	; (8001200 <MX_GPIO_Init+0x230>)
 800109e:	f001 fedb 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4852      	ldr	r0, [pc, #328]	; (8001204 <MX_GPIO_Init+0x234>)
 80010ba:	f001 fd09 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010be:	2332      	movs	r3, #50	; 0x32
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ce:	230b      	movs	r3, #11
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	484a      	ldr	r0, [pc, #296]	; (8001204 <MX_GPIO_Init+0x234>)
 80010da:	f001 fcf9 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010de:	2386      	movs	r3, #134	; 0x86
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ee:	230b      	movs	r3, #11
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4843      	ldr	r0, [pc, #268]	; (8001208 <MX_GPIO_Init+0x238>)
 80010fa:	f001 fce9 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80010fe:	2302      	movs	r3, #2
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4839      	ldr	r0, [pc, #228]	; (80011fc <MX_GPIO_Init+0x22c>)
 8001116:	f001 fcdb 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800111a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112c:	230b      	movs	r3, #11
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4831      	ldr	r0, [pc, #196]	; (80011fc <MX_GPIO_Init+0x22c>)
 8001138:	f001 fcca 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800113c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800114e:	2307      	movs	r3, #7
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	482c      	ldr	r0, [pc, #176]	; (800120c <MX_GPIO_Init+0x23c>)
 800115a:	f001 fcb9 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4822      	ldr	r0, [pc, #136]	; (8001200 <MX_GPIO_Init+0x230>)
 8001176:	f001 fcab 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	481c      	ldr	r0, [pc, #112]	; (8001200 <MX_GPIO_Init+0x230>)
 800118e:	f001 fc9f 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001192:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011a4:	230a      	movs	r3, #10
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_GPIO_Init+0x238>)
 80011b0:	f001 fc8e 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	480f      	ldr	r0, [pc, #60]	; (8001208 <MX_GPIO_Init+0x238>)
 80011ca:	f001 fc81 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e0:	230b      	movs	r3, #11
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_GPIO_Init+0x230>)
 80011ec:	f001 fc70 	bl	8002ad0 <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020400 	.word	0x40020400
 8001200:	40021800 	.word	0x40021800
 8001204:	40020800 	.word	0x40020800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00

08001210 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) { }
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f001 fc02 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler+0x4>

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler+0x4>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <UsageFault_Handler+0x4>

0800131a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f001 fa6c 	bl	8002824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return 1;
 8001354:	2301      	movs	r3, #1
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_kill>:

int _kill(int pid, int sig)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800136a:	f002 ff8d 	bl	8004288 <__errno>
 800136e:	4603      	mov	r3, r0
 8001370:	2216      	movs	r2, #22
 8001372:	601a      	str	r2, [r3, #0]
  return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_exit>:

void _exit (int status)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ffe7 	bl	8001360 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001392:	e7fe      	b.n	8001392 <_exit+0x12>

08001394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
  }

  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e009      	b.n	80013f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf1      	blt.n	80013e0 <_write+0x12>
  }
  return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_close>:

int _close(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	605a      	str	r2, [r3, #4]
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_isatty>:

int _isatty(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f002 fef2 	bl	8004288 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20030000 	.word	0x20030000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	200000a4 	.word	0x200000a4
 80014d8:	20000558 	.word	0x20000558

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001506:	490e      	ldr	r1, [pc, #56]	; (8001540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800151c:	4c0b      	ldr	r4, [pc, #44]	; (800154c <LoopFillZerobss+0x26>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152a:	f7ff ffd7 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f002 feb1 	bl	8004294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff fcd5 	bl	8000ee0 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001538:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001544:	08008248 	.word	0x08008248
  ldr r2, =_sbss
 8001548:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800154c:	20000554 	.word	0x20000554

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <readKey>:
static delay_t debouncing_delay; 	// Structure needed for the non-blocking delay API to use as a de-bounce delay
static debounceState_t ESTADO_PB; 	// Structure containing the current state of the push-button (up, down, rising or falling)


/* Public functions definitions ----------------------------------------------*/
bool_t readKey() {
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	// This public function returns true whenever the push-button is pressed, otherwise it returns false
	if(keyStatus == true) {
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <readKey+0x24>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <readKey+0x16>
		keyStatus = false;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <readKey+0x24>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
		return true;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <readKey+0x18>
	} else {
		return false;
 800156a:	2300      	movs	r3, #0
	}
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200000a8 	.word	0x200000a8

0800157c <debounceFSM_init>:

void debounceFSM_init() {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	// This public function initializes the finite state machine (FSM) for push-button de-bouncing,
	// considering that it starts with the button up, i.e. the button not pressed.
	// It doesn't receive any parameters and doesn't return any value.
	ESTADO_PB = BUTTON_UP;
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <debounceFSM_init+0x18>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]

	/* Non-blocking delay configuration */
	delayInit(&debouncing_delay, DEBOUNCE_DELAY);
 8001586:	2128      	movs	r1, #40	; 0x28
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <debounceFSM_init+0x1c>)
 800158a:	f000 f86d 	bl	8001668 <delayInit>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200000b8 	.word	0x200000b8
 8001598:	200000ac 	.word	0x200000ac

0800159c <debounceFSM_update>:

void debounceFSM_update() {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	// This public function reads the input to the system (on-board push-button) and
	// updates the state of the finite state machine (FSM), depending on it and
	// the current state.
	// It doesn't receive any parameters and doesn't return any value.

	switch(ESTADO_PB) {
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <debounceFSM_update+0xc0>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d84d      	bhi.n	8001644 <debounceFSM_update+0xa8>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <debounceFSM_update+0x14>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080015db 	.word	0x080015db
 80015b8:	08001603 	.word	0x08001603
 80015bc:	0800161d 	.word	0x0800161d
		// Depending on the current state of the push-button, different paths can be taken
		case BUTTON_UP:
			if(BSP_PB_GetState(BUTTON_USER)) {
 80015c0:	2000      	movs	r0, #0
 80015c2:	f000 fc9b 	bl	8001efc <BSP_PB_GetState>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d03e      	beq.n	800164a <debounceFSM_update+0xae>
				keyStatus = false;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <debounceFSM_update+0xc4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
				ESTADO_PB = BUTTON_FALLING;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <debounceFSM_update+0xc0>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80015d8:	e037      	b.n	800164a <debounceFSM_update+0xae>

		case BUTTON_FALLING:
			if(delayRead(&debouncing_delay)) {
 80015da:	4822      	ldr	r0, [pc, #136]	; (8001664 <debounceFSM_update+0xc8>)
 80015dc:	f000 f859 	bl	8001692 <delayRead>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d033      	beq.n	800164e <debounceFSM_update+0xb2>
				// After the de-bounce delay
				if(BSP_PB_GetState(BUTTON_USER)) {
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 fc88 	bl	8001efc <BSP_PB_GetState>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <debounceFSM_update+0x5e>
					ESTADO_PB = BUTTON_DOWN;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <debounceFSM_update+0xc0>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
				} else {
					ESTADO_PB = BUTTON_UP;
				}
			}
			break;
 80015f8:	e029      	b.n	800164e <debounceFSM_update+0xb2>
					ESTADO_PB = BUTTON_UP;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <debounceFSM_update+0xc0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
			break;
 8001600:	e025      	b.n	800164e <debounceFSM_update+0xb2>

		case BUTTON_DOWN:
			if(!BSP_PB_GetState(BUTTON_USER)) {
 8001602:	2000      	movs	r0, #0
 8001604:	f000 fc7a 	bl	8001efc <BSP_PB_GetState>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d121      	bne.n	8001652 <debounceFSM_update+0xb6>
				keyStatus = true;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <debounceFSM_update+0xc4>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
				ESTADO_PB = BUTTON_RAISING;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <debounceFSM_update+0xc0>)
 8001616:	2203      	movs	r2, #3
 8001618:	701a      	strb	r2, [r3, #0]
			}
			break;
 800161a:	e01a      	b.n	8001652 <debounceFSM_update+0xb6>

		case BUTTON_RAISING:
			if(delayRead(&debouncing_delay)) {
 800161c:	4811      	ldr	r0, [pc, #68]	; (8001664 <debounceFSM_update+0xc8>)
 800161e:	f000 f838 	bl	8001692 <delayRead>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d016      	beq.n	8001656 <debounceFSM_update+0xba>
				// After the de-bounce delay
				if(!BSP_PB_GetState(BUTTON_USER)) {
 8001628:	2000      	movs	r0, #0
 800162a:	f000 fc67 	bl	8001efc <BSP_PB_GetState>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <debounceFSM_update+0xa0>
					ESTADO_PB = BUTTON_UP;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <debounceFSM_update+0xc0>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
				} else {
					ESTADO_PB = BUTTON_DOWN;
				}
			}
			break;
 800163a:	e00c      	b.n	8001656 <debounceFSM_update+0xba>
					ESTADO_PB = BUTTON_DOWN;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <debounceFSM_update+0xc0>)
 800163e:	2202      	movs	r2, #2
 8001640:	701a      	strb	r2, [r3, #0]
			break;
 8001642:	e008      	b.n	8001656 <debounceFSM_update+0xba>

		default:
			debounceFSM_init();
 8001644:	f7ff ff9a 	bl	800157c <debounceFSM_init>
			break;
 8001648:	e006      	b.n	8001658 <debounceFSM_update+0xbc>
			break;
 800164a:	bf00      	nop
 800164c:	e004      	b.n	8001658 <debounceFSM_update+0xbc>
			break;
 800164e:	bf00      	nop
 8001650:	e002      	b.n	8001658 <debounceFSM_update+0xbc>
			break;
 8001652:	bf00      	nop
 8001654:	e000      	b.n	8001658 <debounceFSM_update+0xbc>
			break;
 8001656:	bf00      	nop
	}
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200000b8 	.word	0x200000b8
 8001660:	200000a8 	.word	0x200000a8
 8001664:	200000ac 	.word	0x200000ac

08001668 <delayInit>:
#include "stm32f4xx_hal.h"  		/* <- HAL include */


/* Implementation of non-blocking delay functions */

void delayInit(delay_t * delay, tick_t duration) {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	// This function configures a non-blocking delay by setting the delay duration
	// and setting the running flag to false.
	if(delay == NULL) 	// Checking the pointer
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <delayInit+0x1e>
		return;

	delay->duration = duration;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	721a      	strb	r2, [r3, #8]
 8001684:	e000      	b.n	8001688 <delayInit+0x20>
		return;
 8001686:	bf00      	nop
}
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <delayRead>:

bool_t delayRead(delay_t * delay) {
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	// This function starts a previously configured non-blocking delay in case that
	// it was not running. By this condition, the function returns false.
	// If the non-blocking delay was already running, but it didn't reach the configured
	// delay duration, this function returns false. Otherwise, this function returns true.
	if(delay == NULL)	// Checking the pointer
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <delayRead+0x12>
		return false;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e023      	b.n	80016ec <delayRead+0x5a>

	if(delay->running == false){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7a1b      	ldrb	r3, [r3, #8]
 80016a8:	f083 0301 	eor.w	r3, r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <delayRead+0x32>
		delay->startTime = HAL_GetTick();
 80016b2:	f001 f8cb 	bl	800284c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	721a      	strb	r2, [r3, #8]
 80016c2:	e012      	b.n	80016ea <delayRead+0x58>
	} else if(delay->running == true) {
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7a1b      	ldrb	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00e      	beq.n	80016ea <delayRead+0x58>
		if(HAL_GetTick() - delay->startTime >= delay->duration) {
 80016cc:	f001 f8be 	bl	800284c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	1ad2      	subs	r2, r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d304      	bcc.n	80016ea <delayRead+0x58>
			delay->running = false;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	721a      	strb	r2, [r3, #8]
			return true;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <delayRead+0x5a>
		}
	}
	return false;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <displayInit>:
#define	OUTER_CIRCLE_ORIGIN_Y	32
#define OUTER_CIRCLE_RADIUS	31


/* Public function definitions -----------------------------------------------*/
void displayInit(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

	/* Initialize OLED display */
	/* Use of SSD1306 Driver */
	SSD1306_Init();
 80016f8:	f000 fc16 	bl	8001f28 <SSD1306_Init>

	/* Print "Welcome Message" */
	SSD1306_Clear();
 80016fc:	f000 ff56 	bl	80025ac <SSD1306_Clear>
	SSD1306_GotoXY (26, 6);
 8001700:	2106      	movs	r1, #6
 8001702:	201a      	movs	r0, #26
 8001704:	f000 fcc4 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts ((uint8_t*) "Digital", &Font_11x18, SSD1306_COLOR_BLUE);
 8001708:	2201      	movs	r2, #1
 800170a:	4921      	ldr	r1, [pc, #132]	; (8001790 <displayInit+0x9c>)
 800170c:	4821      	ldr	r0, [pc, #132]	; (8001794 <displayInit+0xa0>)
 800170e:	f000 fd59 	bl	80021c4 <SSD1306_Puts>
	SSD1306_GotoXY (26, 40);
 8001712:	2128      	movs	r1, #40	; 0x28
 8001714:	201a      	movs	r0, #26
 8001716:	f000 fcbb 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts ((uint8_t*) "Compass", &Font_11x18, SSD1306_COLOR_BLUE);
 800171a:	2201      	movs	r2, #1
 800171c:	491c      	ldr	r1, [pc, #112]	; (8001790 <displayInit+0x9c>)
 800171e:	481e      	ldr	r0, [pc, #120]	; (8001798 <displayInit+0xa4>)
 8001720:	f000 fd50 	bl	80021c4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001724:	f000 fc0e 	bl	8001f44 <SSD1306_UpdateScreen>
	HAL_Delay(2500);
 8001728:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800172c:	f001 f89a 	bl	8002864 <HAL_Delay>

	SSD1306_Clear();
 8001730:	f000 ff3c 	bl	80025ac <SSD1306_Clear>
	SSD1306_GotoXY (53, 23);
 8001734:	2117      	movs	r1, #23
 8001736:	2035      	movs	r0, #53	; 0x35
 8001738:	f000 fcaa 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts ((uint8_t*) "by", &Font_11x18, SSD1306_COLOR_BLUE);
 800173c:	2201      	movs	r2, #1
 800173e:	4914      	ldr	r1, [pc, #80]	; (8001790 <displayInit+0x9c>)
 8001740:	4816      	ldr	r0, [pc, #88]	; (800179c <displayInit+0xa8>)
 8001742:	f000 fd3f 	bl	80021c4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001746:	f000 fbfd 	bl	8001f44 <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 800174a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800174e:	f001 f889 	bl	8002864 <HAL_Delay>

	SSD1306_Clear();
 8001752:	f000 ff2b 	bl	80025ac <SSD1306_Clear>
	SSD1306_GotoXY (15, 6);
 8001756:	2106      	movs	r1, #6
 8001758:	200f      	movs	r0, #15
 800175a:	f000 fc99 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts ((uint8_t*) "Francesco", &Font_11x18, SSD1306_COLOR_BLUE);
 800175e:	2201      	movs	r2, #1
 8001760:	490b      	ldr	r1, [pc, #44]	; (8001790 <displayInit+0x9c>)
 8001762:	480f      	ldr	r0, [pc, #60]	; (80017a0 <displayInit+0xac>)
 8001764:	f000 fd2e 	bl	80021c4 <SSD1306_Puts>
	SSD1306_GotoXY (31, 40);
 8001768:	2128      	movs	r1, #40	; 0x28
 800176a:	201f      	movs	r0, #31
 800176c:	f000 fc90 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts ((uint8_t*) "Cavina", &Font_11x18, SSD1306_COLOR_BLUE);
 8001770:	2201      	movs	r2, #1
 8001772:	4907      	ldr	r1, [pc, #28]	; (8001790 <displayInit+0x9c>)
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <displayInit+0xb0>)
 8001776:	f000 fd25 	bl	80021c4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800177a:	f000 fbe3 	bl	8001f44 <SSD1306_UpdateScreen>
	HAL_Delay(2500);
 800177e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001782:	f001 f86f 	bl	8002864 <HAL_Delay>

	SSD1306_Clear();
 8001786:	f000 ff11 	bl	80025ac <SSD1306_Clear>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000010 	.word	0x20000010
 8001794:	08006930 	.word	0x08006930
 8001798:	08006938 	.word	0x08006938
 800179c:	08006940 	.word	0x08006940
 80017a0:	08006944 	.word	0x08006944
 80017a4:	08006950 	.word	0x08006950

080017a8 <drawOuterCircle>:

void drawOuterCircle(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

	/* Draw compass outer circle | Use of SSD1306 Driver */
	SSD1306_Clear();
 80017ac:	f000 fefe 	bl	80025ac <SSD1306_Clear>
	SSD1306_DrawCircle(OUTER_CIRCLE_ORIGIN_X, OUTER_CIRCLE_ORIGIN_Y, OUTER_CIRCLE_RADIUS, 0x01);
 80017b0:	2301      	movs	r3, #1
 80017b2:	221f      	movs	r2, #31
 80017b4:	2120      	movs	r1, #32
 80017b6:	2040      	movs	r0, #64	; 0x40
 80017b8:	f000 fe24 	bl	8002404 <SSD1306_DrawCircle>
	SSD1306_UpdateScreen();
 80017bc:	f000 fbc2 	bl	8001f44 <SSD1306_UpdateScreen>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0000      	movs	r0, r0
	...

080017c8 <drawArrow>:

void drawArrow(double angle, SSD1306_COLOR_t color) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	ed87 0b02 	vstr	d0, [r7, #8]
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]

	uint8_t x2, y2 = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]

	/* Check if first parameter (angle in degrees) is valid */
	if(angle >= 0 && angle <= 2 * PI) {
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017e6:	f7ff f99d 	bl	8000b24 <__aeabi_dcmpge>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d100      	bne.n	80017f2 <drawArrow+0x2a>
			/* Draw arrow line | Use of SSD1306 Driver */
			SSD1306_DrawLine(OUTER_CIRCLE_ORIGIN_X, OUTER_CIRCLE_ORIGIN_Y, x2, y2, color);
			SSD1306_UpdateScreen();
		}
	}
}
 80017f0:	e053      	b.n	800189a <drawArrow+0xd2>
	if(angle >= 0 && angle <= 2 * PI) {
 80017f2:	a330      	add	r3, pc, #192	; (adr r3, 80018b4 <drawArrow+0xec>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017fc:	f7ff f988 	bl	8000b10 <__aeabi_dcmple>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d100      	bne.n	8001808 <drawArrow+0x40>
}
 8001806:	e048      	b.n	800189a <drawArrow+0xd2>
		if(color == SSD1306_COLOR_BLACK || color == SSD1306_COLOR_BLUE) {
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <drawArrow+0x4c>
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d142      	bne.n	800189a <drawArrow+0xd2>
			x2 = OUTER_CIRCLE_ORIGIN_X + (OUTER_CIRCLE_RADIUS - 3) * cos(angle);
 8001814:	ed97 0b02 	vldr	d0, [r7, #8]
 8001818:	f003 ffda 	bl	80057d0 <cos>
 800181c:	ec51 0b10 	vmov	r0, r1, d0
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <drawArrow+0xe0>)
 8001826:	f7fe fef7 	bl	8000618 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <drawArrow+0xe4>)
 8001838:	f7fe fd38 	bl	80002ac <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f9aa 	bl	8000b9c <__aeabi_d2uiz>
 8001848:	4603      	mov	r3, r0
 800184a:	75bb      	strb	r3, [r7, #22]
			y2 = OUTER_CIRCLE_ORIGIN_Y - (OUTER_CIRCLE_RADIUS - 3) * sin(angle);
 800184c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001850:	f004 f81e 	bl	8005890 <sin>
 8001854:	ec51 0b10 	vmov	r0, r1, d0
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <drawArrow+0xe0>)
 800185e:	f7fe fedb 	bl	8000618 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	4911      	ldr	r1, [pc, #68]	; (80018b0 <drawArrow+0xe8>)
 800186c:	f7fe fd1c 	bl	80002a8 <__aeabi_dsub>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f990 	bl	8000b9c <__aeabi_d2uiz>
 800187c:	4603      	mov	r3, r0
 800187e:	75fb      	strb	r3, [r7, #23]
			SSD1306_DrawLine(OUTER_CIRCLE_ORIGIN_X, OUTER_CIRCLE_ORIGIN_Y, x2, y2, color);
 8001880:	7dbb      	ldrb	r3, [r7, #22]
 8001882:	b29a      	uxth	r2, r3
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	b299      	uxth	r1, r3
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	460b      	mov	r3, r1
 800188e:	2120      	movs	r1, #32
 8001890:	2040      	movs	r0, #64	; 0x40
 8001892:	f000 fcbc 	bl	800220e <SSD1306_DrawLine>
			SSD1306_UpdateScreen();
 8001896:	f000 fb55 	bl	8001f44 <SSD1306_UpdateScreen>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	f3af 8000 	nop.w
 80018a8:	403c0000 	.word	0x403c0000
 80018ac:	40500000 	.word	0x40500000
 80018b0:	40400000 	.word	0x40400000
 80018b4:	54524550 	.word	0x54524550
 80018b8:	401921fb 	.word	0x401921fb

080018bc <writeData>:

void writeData(int16_t x, int16_t y, int16_t z) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0a4      	sub	sp, #144	; 0x90
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
 80018c6:	460b      	mov	r3, r1
 80018c8:	80bb      	strh	r3, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	807b      	strh	r3, [r7, #2]

	uint8_t xField[30] = "In X: ";
 80018ce:	4a7a      	ldr	r2, [pc, #488]	; (8001ab8 <writeData+0x1fc>)
 80018d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d8:	6018      	str	r0, [r3, #0]
 80018da:	3304      	adds	r3, #4
 80018dc:	8019      	strh	r1, [r3, #0]
 80018de:	3302      	adds	r3, #2
 80018e0:	0c0a      	lsrs	r2, r1, #16
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	f107 0377 	add.w	r3, r7, #119	; 0x77
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	f8c3 2013 	str.w	r2, [r3, #19]
	uint8_t yField[30] = "In Y: ";
 80018f8:	4a70      	ldr	r2, [pc, #448]	; (8001abc <writeData+0x200>)
 80018fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001902:	6018      	str	r0, [r3, #0]
 8001904:	3304      	adds	r3, #4
 8001906:	8019      	strh	r1, [r3, #0]
 8001908:	3302      	adds	r3, #2
 800190a:	0c0a      	lsrs	r2, r1, #16
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	f8c3 2013 	str.w	r2, [r3, #19]
	uint8_t zField[30] = "In Z: ";
 8001922:	4a67      	ldr	r2, [pc, #412]	; (8001ac0 <writeData+0x204>)
 8001924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800192c:	6018      	str	r0, [r3, #0]
 800192e:	3304      	adds	r3, #4
 8001930:	8019      	strh	r1, [r3, #0]
 8001932:	3302      	adds	r3, #2
 8001934:	0c0a      	lsrs	r2, r1, #16
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	f8c3 2013 	str.w	r2, [r3, #19]

	if(x >= 0) {
 800194c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0e      	blt.n	8001972 <writeData+0xb6>
		strcat((char *) xField, " ");
 8001954:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fc49 	bl	80001f0 <strlen>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001966:	4413      	add	r3, r2
 8001968:	4956      	ldr	r1, [pc, #344]	; (8001ac4 <writeData+0x208>)
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	8013      	strh	r3, [r2, #0]
	}
	if(y >= 0) {
 8001972:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0e      	blt.n	8001998 <writeData+0xdc>
		strcat((char *) yField, " ");
 800197a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc36 	bl	80001f0 <strlen>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800198c:	4413      	add	r3, r2
 800198e:	494d      	ldr	r1, [pc, #308]	; (8001ac4 <writeData+0x208>)
 8001990:	461a      	mov	r2, r3
 8001992:	460b      	mov	r3, r1
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	8013      	strh	r3, [r2, #0]
	}
	if(z >= 0) {
 8001998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0e      	blt.n	80019be <writeData+0x102>
		strcat((char *) zField, " ");
 80019a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fc23 	bl	80001f0 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b2:	4413      	add	r3, r2
 80019b4:	4943      	ldr	r1, [pc, #268]	; (8001ac4 <writeData+0x208>)
 80019b6:	461a      	mov	r2, r3
 80019b8:	460b      	mov	r3, r1
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	8013      	strh	r3, [r2, #0]

	uint8_t xStr[10];
	uint8_t yStr[10];
	uint8_t zStr[10];

	SSD1306_Clear();
 80019be:	f000 fdf5 	bl	80025ac <SSD1306_Clear>

	/* Convert numerical raw data to string */
	itoa(x, (char *) xStr, 10);
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80019ca:	220a      	movs	r2, #10
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fc9d 	bl	800430c <itoa>
	itoa(y, (char *) yStr, 10);
 80019d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019d6:	f107 0118 	add.w	r1, r7, #24
 80019da:	220a      	movs	r2, #10
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fc95 	bl	800430c <itoa>
	itoa(z, (char *) zStr, 10);
 80019e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019e6:	f107 010c 	add.w	r1, r7, #12
 80019ea:	220a      	movs	r2, #10
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fc8d 	bl	800430c <itoa>

	/* Assemble messages to print on display */
	strcat((char *) xField, (const char *) xStr);
 80019f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fcfb 	bl	80043f8 <strcat>
	strcat((char *) yField, (const char *) yStr);
 8001a02:	f107 0218 	add.w	r2, r7, #24
 8001a06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fcf3 	bl	80043f8 <strcat>
	strcat((char *) zField, (const char *) zStr);
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fceb 	bl	80043f8 <strcat>

	/* Write title */
	SSD1306_GotoXY(1, 0);
 8001a22:	2100      	movs	r1, #0
 8001a24:	2001      	movs	r0, #1
 8001a26:	f000 fb33 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts((uint8_t*) "- Magnetic Field -", &Font_7x10, SSD1306_COLOR_BLUE);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4926      	ldr	r1, [pc, #152]	; (8001ac8 <writeData+0x20c>)
 8001a2e:	4827      	ldr	r0, [pc, #156]	; (8001acc <writeData+0x210>)
 8001a30:	f000 fbc8 	bl	80021c4 <SSD1306_Puts>

	/* Write raw data */
	SSD1306_GotoXY(14, 21);
 8001a34:	2115      	movs	r1, #21
 8001a36:	200e      	movs	r0, #14
 8001a38:	f000 fb2a 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts(xField, &Font_7x10, SSD1306_COLOR_BLUE);
 8001a3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a40:	2201      	movs	r2, #1
 8001a42:	4921      	ldr	r1, [pc, #132]	; (8001ac8 <writeData+0x20c>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fbbd 	bl	80021c4 <SSD1306_Puts>

	SSD1306_GotoXY(14, 37);
 8001a4a:	2125      	movs	r1, #37	; 0x25
 8001a4c:	200e      	movs	r0, #14
 8001a4e:	f000 fb1f 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts(yField, &Font_7x10, SSD1306_COLOR_BLUE);
 8001a52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a56:	2201      	movs	r2, #1
 8001a58:	491b      	ldr	r1, [pc, #108]	; (8001ac8 <writeData+0x20c>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fbb2 	bl	80021c4 <SSD1306_Puts>

	SSD1306_GotoXY(14, 53);
 8001a60:	2135      	movs	r1, #53	; 0x35
 8001a62:	200e      	movs	r0, #14
 8001a64:	f000 fb14 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts(zField, &Font_7x10, SSD1306_COLOR_BLUE);
 8001a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <writeData+0x20c>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fba7 	bl	80021c4 <SSD1306_Puts>

	SSD1306_GotoXY(92, 21);
 8001a76:	2115      	movs	r1, #21
 8001a78:	205c      	movs	r0, #92	; 0x5c
 8001a7a:	f000 fb09 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts(" uT", &Font_7x10, SSD1306_COLOR_BLUE);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4911      	ldr	r1, [pc, #68]	; (8001ac8 <writeData+0x20c>)
 8001a82:	4813      	ldr	r0, [pc, #76]	; (8001ad0 <writeData+0x214>)
 8001a84:	f000 fb9e 	bl	80021c4 <SSD1306_Puts>

	SSD1306_GotoXY(92, 37);
 8001a88:	2125      	movs	r1, #37	; 0x25
 8001a8a:	205c      	movs	r0, #92	; 0x5c
 8001a8c:	f000 fb00 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts(" uT", &Font_7x10, SSD1306_COLOR_BLUE);
 8001a90:	2201      	movs	r2, #1
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <writeData+0x20c>)
 8001a94:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <writeData+0x214>)
 8001a96:	f000 fb95 	bl	80021c4 <SSD1306_Puts>

	SSD1306_GotoXY(92, 53);
 8001a9a:	2135      	movs	r1, #53	; 0x35
 8001a9c:	205c      	movs	r0, #92	; 0x5c
 8001a9e:	f000 faf7 	bl	8002090 <SSD1306_GotoXY>
	SSD1306_Puts(" uT", &Font_7x10, SSD1306_COLOR_BLUE);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <writeData+0x20c>)
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <writeData+0x214>)
 8001aa8:	f000 fb8c 	bl	80021c4 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8001aac:	f000 fa4a 	bl	8001f44 <SSD1306_UpdateScreen>
}
 8001ab0:	bf00      	nop
 8001ab2:	3790      	adds	r7, #144	; 0x90
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	08006974 	.word	0x08006974
 8001abc:	08006994 	.word	0x08006994
 8001ac0:	080069b4 	.word	0x080069b4
 8001ac4:	08006958 	.word	0x08006958
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	0800695c 	.word	0x0800695c
 8001ad0:	08006970 	.word	0x08006970

08001ad4 <magnetometerInit>:
/* Private defines -----------------------------------------------------------*/
#define PI	3.141592654


/* Public function definitions -----------------------------------------------*/
void magnetometerInit(void) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

	/* Initiate magnetometer sensor */
	/* EMPTY */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <readMagnetometer>:

void readMagnetometer(magnetometer_t *sensor) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

	/* Set the seed for random number generation */
	srand(HAL_GetTick());
 8001aec:	f000 feae 	bl	800284c <HAL_GetTick>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fc14 	bl	8004320 <srand>

	/* Generate random sensor readings */
	int16_t newValueX = rand() % 9600 - 4800;
 8001af8:	f002 fc40 	bl	800437c <rand>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a30      	ldr	r2, [pc, #192]	; (8001bc0 <readMagnetometer+0xdc>)
 8001b00:	fb82 1203 	smull	r1, r2, r2, r3
 8001b04:	1291      	asrs	r1, r2, #10
 8001b06:	17da      	asrs	r2, r3, #31
 8001b08:	1a8a      	subs	r2, r1, r2
 8001b0a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001b0e:	fb01 f202 	mul.w	r2, r1, r2
 8001b12:	1a9a      	subs	r2, r3, r2
 8001b14:	b293      	uxth	r3, r2
 8001b16:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	81fb      	strh	r3, [r7, #14]
	int16_t newValueY = rand() % 9600 - 4800;
 8001b1e:	f002 fc2d 	bl	800437c <rand>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a26      	ldr	r2, [pc, #152]	; (8001bc0 <readMagnetometer+0xdc>)
 8001b26:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2a:	1291      	asrs	r1, r2, #10
 8001b2c:	17da      	asrs	r2, r3, #31
 8001b2e:	1a8a      	subs	r2, r1, r2
 8001b30:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001b34:	fb01 f202 	mul.w	r2, r1, r2
 8001b38:	1a9a      	subs	r2, r3, r2
 8001b3a:	b293      	uxth	r3, r2
 8001b3c:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	81bb      	strh	r3, [r7, #12]
	int16_t newValueZ = rand() % 9600 - 4800;
 8001b44:	f002 fc1a 	bl	800437c <rand>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <readMagnetometer+0xdc>)
 8001b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b50:	1291      	asrs	r1, r2, #10
 8001b52:	17da      	asrs	r2, r3, #31
 8001b54:	1a8a      	subs	r2, r1, r2
 8001b56:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001b5a:	fb01 f202 	mul.w	r2, r1, r2
 8001b5e:	1a9a      	subs	r2, r3, r2
 8001b60:	b293      	uxth	r3, r2
 8001b62:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	817b      	strh	r3, [r7, #10]

	/* Compare last value read with the new value read and update */
	if(newValueX != sensor->lastValueX || newValueY != sensor->lastValueY || newValueZ != sensor->lastValueZ) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10d      	bne.n	8001b94 <readMagnetometer+0xb0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b7e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d106      	bne.n	8001b94 <readMagnetometer+0xb0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d00c      	beq.n	8001bae <readMagnetometer+0xca>
		sensor->lastValueX = newValueX;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	89fa      	ldrh	r2, [r7, #14]
 8001b98:	801a      	strh	r2, [r3, #0]
		sensor->lastValueY = newValueY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	89ba      	ldrh	r2, [r7, #12]
 8001b9e:	805a      	strh	r2, [r3, #2]
		sensor->lastValueZ = newValueZ;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	897a      	ldrh	r2, [r7, #10]
 8001ba4:	809a      	strh	r2, [r3, #4]
		sensor->UPDATE_FLAG = true;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	741a      	strb	r2, [r3, #16]
 8001bac:	e003      	b.n	8001bb6 <readMagnetometer+0xd2>
	} else {
		sensor->UPDATE_FLAG = false;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	741a      	strb	r2, [r3, #16]
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	1b4e81b5 	.word	0x1b4e81b5
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <calculateArrowAngle>:

void calculateArrowAngle(magnetometer_t *sensor) {
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

	double ang = 0;
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Calculate the arrow angle for the compass based on the readings done */
	ang = atan((double)sensor->lastValueY / sensor->lastValueX);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcae 	bl	8000544 <__aeabi_i2d>
 8001be8:	4604      	mov	r4, r0
 8001bea:	460d      	mov	r5, r1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fca6 	bl	8000544 <__aeabi_i2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe fe34 	bl	800086c <__aeabi_ddiv>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	ec43 2b17 	vmov	d7, r2, r3
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	eef0 0a67 	vmov.f32	s1, s15
 8001c14:	f003 fc3c 	bl	8005490 <atan>
 8001c18:	ed87 0b02 	vstr	d0, [r7, #8]

	if((sensor->lastValueX >= 0 && sensor->lastValueY >= 0) || (sensor->lastValueX >= 0 && sensor->lastValueY < 0)) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db04      	blt.n	8001c30 <calculateArrowAngle+0x68>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da09      	bge.n	8001c44 <calculateArrowAngle+0x7c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0a      	blt.n	8001c50 <calculateArrowAngle+0x88>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da05      	bge.n	8001c50 <calculateArrowAngle+0x88>
		sensor->arrowAngle = ang;
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c4a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001c4e:	e01f      	b.n	8001c90 <calculateArrowAngle+0xc8>
	} else if((sensor->lastValueX < 0 && sensor->lastValueY >= 0) || (sensor->lastValueX < 0 && sensor->lastValueY < 0)) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da04      	bge.n	8001c64 <calculateArrowAngle+0x9c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da09      	bge.n	8001c78 <calculateArrowAngle+0xb0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da10      	bge.n	8001c90 <calculateArrowAngle+0xc8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	da0b      	bge.n	8001c90 <calculateArrowAngle+0xc8>
		sensor->arrowAngle = PI + ang;
 8001c78:	a315      	add	r3, pc, #84	; (adr r3, 8001cd0 <calculateArrowAngle+0x108>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c82:	f7fe fb13 	bl	80002ac <__adddf3>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(sensor->arrowAngle < 0) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f7fe ff2d 	bl	8000afc <__aeabi_dcmplt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d100      	bne.n	8001caa <calculateArrowAngle+0xe2>
		sensor->arrowAngle += 2 * PI;
	}
}
 8001ca8:	e00c      	b.n	8001cc4 <calculateArrowAngle+0xfc>
		sensor->arrowAngle += 2 * PI;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cb0:	a309      	add	r3, pc, #36	; (adr r3, 8001cd8 <calculateArrowAngle+0x110>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe faf9 	bl	80002ac <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bdb0      	pop	{r4, r5, r7, pc}
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	54524550 	.word	0x54524550
 8001cd4:	400921fb 	.word	0x400921fb
 8001cd8:	54524550 	.word	0x54524550
 8001cdc:	401921fb 	.word	0x401921fb

08001ce0 <systemInit>:
static systemState_t SYSSTATE;
static magnetometer_t sensor;


/* Public functions definitions ----------------------------------------------*/
void systemInit(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

	/* Initialize system */
	SYSSTATE = COMPASS_READING_SENSOR;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <systemInit+0x28>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]

	/* Initialize BSP PB for ON-BOARD PUSH-BUTTON */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001cea:	2100      	movs	r1, #0
 8001cec:	2000      	movs	r0, #0
 8001cee:	f000 f8af 	bl	8001e50 <BSP_PB_Init>

	/* Initialize magnetometer sensor */
	magnetometerInit();
 8001cf2:	f7ff feef 	bl	8001ad4 <magnetometerInit>

	/* Initialize OLED display */
	displayInit();
 8001cf6:	f7ff fcfd 	bl	80016f4 <displayInit>

	/* Initialize system delay */
	delayInit(&system_delay, SYSTEM_TIME);
 8001cfa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001cfe:	4803      	ldr	r0, [pc, #12]	; (8001d0c <systemInit+0x2c>)
 8001d00:	f7ff fcb2 	bl	8001668 <delayInit>
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200000c8 	.word	0x200000c8
 8001d0c:	200000bc 	.word	0x200000bc

08001d10 <systemUpdate>:

void systemUpdate(void) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

	debounceFSM_update();
 8001d14:	f7ff fc42 	bl	800159c <debounceFSM_update>

	switch(SYSSTATE) {
 8001d18:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <systemUpdate+0x134>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	f200 8088 	bhi.w	8001e32 <systemUpdate+0x122>
 8001d22:	a201      	add	r2, pc, #4	; (adr r2, 8001d28 <systemUpdate+0x18>)
 8001d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d28:	08001d39 	.word	0x08001d39
 8001d2c:	08001d65 	.word	0x08001d65
 8001d30:	08001db9 	.word	0x08001db9
 8001d34:	08001de5 	.word	0x08001de5

		case COMPASS_READING_SENSOR:
			if(readKey()) {
 8001d38:	f7ff fc0c 	bl	8001554 <readKey>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <systemUpdate+0x3a>
				SYSSTATE = RAWDATA_READING_SENSOR;
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <systemUpdate+0x134>)
 8001d44:	2202      	movs	r2, #2
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e008      	b.n	8001d5c <systemUpdate+0x4c>
			} else if(delayRead(&system_delay)) {
 8001d4a:	483f      	ldr	r0, [pc, #252]	; (8001e48 <systemUpdate+0x138>)
 8001d4c:	f7ff fca1 	bl	8001692 <delayRead>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <systemUpdate+0x4c>
				SYSSTATE = COMPASS_WRITING_DISPLAY;
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <systemUpdate+0x134>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
			}
			readMagnetometer(&sensor);
 8001d5c:	483b      	ldr	r0, [pc, #236]	; (8001e4c <systemUpdate+0x13c>)
 8001d5e:	f7ff fec1 	bl	8001ae4 <readMagnetometer>
			break;
 8001d62:	e06c      	b.n	8001e3e <systemUpdate+0x12e>

		case COMPASS_WRITING_DISPLAY:
			if(readKey()) {
 8001d64:	f7ff fbf6 	bl	8001554 <readKey>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <systemUpdate+0x66>
				SYSSTATE = RAWDATA_READING_SENSOR;
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <systemUpdate+0x134>)
 8001d70:	2202      	movs	r2, #2
 8001d72:	701a      	strb	r2, [r3, #0]
					calculateArrowAngle(&sensor);
					drawArrow(sensor.arrowAngle, SSD1306_COLOR_BLUE);
					sensor.UPDATE_FLAG = false;
				}
			}
			break;
 8001d74:	e060      	b.n	8001e38 <systemUpdate+0x128>
			} else if(delayRead(&system_delay)) {
 8001d76:	4834      	ldr	r0, [pc, #208]	; (8001e48 <systemUpdate+0x138>)
 8001d78:	f7ff fc8b 	bl	8001692 <delayRead>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <systemUpdate+0x7a>
				SYSSTATE = COMPASS_READING_SENSOR;
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <systemUpdate+0x134>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
			break;
 8001d88:	e056      	b.n	8001e38 <systemUpdate+0x128>
				if(sensor.UPDATE_FLAG == true) {
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <systemUpdate+0x13c>)
 8001d8c:	7c1b      	ldrb	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d052      	beq.n	8001e38 <systemUpdate+0x128>
					drawOuterCircle();
 8001d92:	f7ff fd09 	bl	80017a8 <drawOuterCircle>
					calculateArrowAngle(&sensor);
 8001d96:	482d      	ldr	r0, [pc, #180]	; (8001e4c <systemUpdate+0x13c>)
 8001d98:	f7ff ff16 	bl	8001bc8 <calculateArrowAngle>
					drawArrow(sensor.arrowAngle, SSD1306_COLOR_BLUE);
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <systemUpdate+0x13c>)
 8001d9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001da2:	2001      	movs	r0, #1
 8001da4:	eeb0 0a47 	vmov.f32	s0, s14
 8001da8:	eef0 0a67 	vmov.f32	s1, s15
 8001dac:	f7ff fd0c 	bl	80017c8 <drawArrow>
					sensor.UPDATE_FLAG = false;
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <systemUpdate+0x13c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	741a      	strb	r2, [r3, #16]
			break;
 8001db6:	e03f      	b.n	8001e38 <systemUpdate+0x128>

		case RAWDATA_READING_SENSOR:
			if(readKey()) {
 8001db8:	f7ff fbcc 	bl	8001554 <readKey>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <systemUpdate+0xba>
				SYSSTATE = COMPASS_READING_SENSOR;
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <systemUpdate+0x134>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e008      	b.n	8001ddc <systemUpdate+0xcc>
			} else if(delayRead(&system_delay)) {
 8001dca:	481f      	ldr	r0, [pc, #124]	; (8001e48 <systemUpdate+0x138>)
 8001dcc:	f7ff fc61 	bl	8001692 <delayRead>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <systemUpdate+0xcc>
				SYSSTATE = RAWDATA_WRITING_DISPLAY;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <systemUpdate+0x134>)
 8001dd8:	2203      	movs	r2, #3
 8001dda:	701a      	strb	r2, [r3, #0]
			}
			readMagnetometer(&sensor);
 8001ddc:	481b      	ldr	r0, [pc, #108]	; (8001e4c <systemUpdate+0x13c>)
 8001dde:	f7ff fe81 	bl	8001ae4 <readMagnetometer>
			break;
 8001de2:	e02c      	b.n	8001e3e <systemUpdate+0x12e>

		case RAWDATA_WRITING_DISPLAY:
			if(readKey()) {
 8001de4:	f7ff fbb6 	bl	8001554 <readKey>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <systemUpdate+0xe6>
				SYSSTATE = COMPASS_READING_SENSOR;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <systemUpdate+0x134>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
				if(sensor.UPDATE_FLAG == true) {
					writeData(sensor.lastValueX, sensor.lastValueY, sensor.lastValueZ);
					sensor.UPDATE_FLAG = false;
				}
			}
			break;
 8001df4:	e022      	b.n	8001e3c <systemUpdate+0x12c>
			} else if(delayRead(&system_delay)) {
 8001df6:	4814      	ldr	r0, [pc, #80]	; (8001e48 <systemUpdate+0x138>)
 8001df8:	f7ff fc4b 	bl	8001692 <delayRead>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <systemUpdate+0xfa>
				SYSSTATE = RAWDATA_READING_SENSOR;
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <systemUpdate+0x134>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
			break;
 8001e08:	e018      	b.n	8001e3c <systemUpdate+0x12c>
				if(sensor.UPDATE_FLAG == true) {
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <systemUpdate+0x13c>)
 8001e0c:	7c1b      	ldrb	r3, [r3, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d014      	beq.n	8001e3c <systemUpdate+0x12c>
					writeData(sensor.lastValueX, sensor.lastValueY, sensor.lastValueZ);
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <systemUpdate+0x13c>)
 8001e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <systemUpdate+0x13c>)
 8001e1a:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <systemUpdate+0x13c>)
 8001e20:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd49 	bl	80018bc <writeData>
					sensor.UPDATE_FLAG = false;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <systemUpdate+0x13c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	741a      	strb	r2, [r3, #16]
			break;
 8001e30:	e004      	b.n	8001e3c <systemUpdate+0x12c>

		default:
			systemInit();
 8001e32:	f7ff ff55 	bl	8001ce0 <systemInit>
			break;
 8001e36:	e002      	b.n	8001e3e <systemUpdate+0x12e>
			break;
 8001e38:	bf00      	nop
 8001e3a:	e000      	b.n	8001e3e <systemUpdate+0x12e>
			break;
 8001e3c:	bf00      	nop
	}
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200000c8 	.word	0x200000c8
 8001e48:	200000bc 	.word	0x200000bc
 8001e4c:	200000d0 	.word	0x200000d0

08001e50 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <BSP_PB_Init+0xa4>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <BSP_PB_Init+0xa4>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <BSP_PB_Init+0xa4>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001e7c:	79bb      	ldrb	r3, [r7, #6]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d112      	bne.n	8001ea8 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <BSP_PB_Init+0xa8>)
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	f107 020c 	add.w	r2, r7, #12
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fe14 	bl	8002ad0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001ea8:	79bb      	ldrb	r3, [r7, #6]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d11d      	bne.n	8001eea <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001eb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ebc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <BSP_PB_Init+0xa8>)
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	f107 020c 	add.w	r2, r7, #12
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fdff 	bl	8002ad0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001ed2:	2328      	movs	r3, #40	; 0x28
 8001ed4:	b25b      	sxtb	r3, r3
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	210f      	movs	r1, #15
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fdc1 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001ee0:	2328      	movs	r3, #40	; 0x28
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fdd8 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	20000004 	.word	0x20000004

08001efc <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <BSP_PB_GetState+0x28>)
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 ff87 	bl	8002e28 <HAL_GPIO_ReadPin>
 8001f1a:	4603      	mov	r3, r0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000004 	.word	0x20000004

08001f28 <SSD1306_Init>:
static SSD1306_t SSD1306;
static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];	// SSD1306 data buffer


/* Public function definitions -----------------------------------------------*/
uint8_t SSD1306_Init(void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0

	/* Initialize I2C */
	/* Check connection success */
	if(ssd1306_I2C_Init(SSD1306_I2C_ADDR)) {
 8001f2c:	2078      	movs	r0, #120	; 0x78
 8001f2e:	f000 fb79 	bl	8002624 <ssd1306_I2C_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SSD1306_Init+0x14>
		return 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <SSD1306_Init+0x16>
	} else {
		return 0;
 8001f3c:	2300      	movs	r3, #0
	/* Initialized OK */
	SSD1306.Initialized = 1;

	/* Return OK */
	return 1;
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0

	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	e01d      	b.n	8001f8c <SSD1306_UpdateScreen+0x48>
		ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xB0 + m);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	3b50      	subs	r3, #80	; 0x50
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2078      	movs	r0, #120	; 0x78
 8001f5c:	f000 fbf0 	bl	8002740 <ssd1306_I2C_Write>
		ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2078      	movs	r0, #120	; 0x78
 8001f66:	f000 fbeb 	bl	8002740 <ssd1306_I2C_Write>
		ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x10);
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2078      	movs	r0, #120	; 0x78
 8001f70:	f000 fbe6 	bl	8002740 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <SSD1306_UpdateScreen+0x58>)
 8001f7a:	441a      	add	r2, r3
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f000 fb6f 	bl	8002664 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d9de      	bls.n	8001f50 <SSD1306_UpdateScreen+0xc>
	}
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200000ec 	.word	0x200000ec

08001fa0 <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]

	/* Set memory */
	/* Copy 0x00 or 0xFF to all Buffer elements */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <SSD1306_Fill+0x14>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <SSD1306_Fill+0x16>
 8001fb4:	23ff      	movs	r3, #255	; 0xff
 8001fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <SSD1306_Fill+0x2c>)
 8001fbe:	f002 f9a7 	bl	8004310 <memset>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200000ec 	.word	0x200000ec

08001fd0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	80bb      	strh	r3, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	70fb      	strb	r3, [r7, #3]

	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fe6:	d848      	bhi.n	800207a <SSD1306_DrawPixel+0xaa>
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	2b3f      	cmp	r3, #63	; 0x3f
 8001fec:	d845      	bhi.n	800207a <SSD1306_DrawPixel+0xaa>
		/* Error: pointer out of display */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <SSD1306_DrawPixel+0xb8>)
 8001ff0:	789b      	ldrb	r3, [r3, #2]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_BLUE) {
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d11a      	bne.n	8002040 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	88bb      	ldrh	r3, [r7, #4]
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	b298      	uxth	r0, r3
 8002012:	4603      	mov	r3, r0
 8002014:	01db      	lsls	r3, r3, #7
 8002016:	4413      	add	r3, r2
 8002018:	4a1c      	ldr	r2, [pc, #112]	; (800208c <SSD1306_DrawPixel+0xbc>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	b25a      	sxtb	r2, r3
 800201e:	88bb      	ldrh	r3, [r7, #4]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	b25b      	sxtb	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b259      	sxtb	r1, r3
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	4603      	mov	r3, r0
 8002034:	01db      	lsls	r3, r3, #7
 8002036:	4413      	add	r3, r2
 8002038:	b2c9      	uxtb	r1, r1
 800203a:	4a14      	ldr	r2, [pc, #80]	; (800208c <SSD1306_DrawPixel+0xbc>)
 800203c:	54d1      	strb	r1, [r2, r3]
 800203e:	e01d      	b.n	800207c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002040:	88fa      	ldrh	r2, [r7, #6]
 8002042:	88bb      	ldrh	r3, [r7, #4]
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	b298      	uxth	r0, r3
 8002048:	4603      	mov	r3, r0
 800204a:	01db      	lsls	r3, r3, #7
 800204c:	4413      	add	r3, r2
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <SSD1306_DrawPixel+0xbc>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	b25a      	sxtb	r2, r3
 8002054:	88bb      	ldrh	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	b25b      	sxtb	r3, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	b25b      	sxtb	r3, r3
 8002066:	4013      	ands	r3, r2
 8002068:	b259      	sxtb	r1, r3
 800206a:	88fa      	ldrh	r2, [r7, #6]
 800206c:	4603      	mov	r3, r0
 800206e:	01db      	lsls	r3, r3, #7
 8002070:	4413      	add	r3, r2
 8002072:	b2c9      	uxtb	r1, r1
 8002074:	4a05      	ldr	r2, [pc, #20]	; (800208c <SSD1306_DrawPixel+0xbc>)
 8002076:	54d1      	strb	r1, [r2, r3]
 8002078:	e000      	b.n	800207c <SSD1306_DrawPixel+0xac>
		return;
 800207a:	bf00      	nop
	}
}
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	200000e8 	.word	0x200000e8
 800208c:	200000ec 	.word	0x200000ec

08002090 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]

	/* Set write pointers */
	SSD1306.CurrentX = x;
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SSD1306_GotoXY+0x2c>)
 80020a6:	701a      	strb	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <SSD1306_GotoXY+0x2c>)
 80020ae:	705a      	strb	r2, [r3, #1]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	200000e8 	.word	0x200000e8

080020c0 <SSD1306_Putc>:

uint8_t SSD1306_Putc(uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71bb      	strb	r3, [r7, #6]

	uint32_t i, b, j;

	/* Check available space in display */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020d0:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <SSD1306_Putc+0x100>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
	if (
 80020dc:	2b7f      	cmp	r3, #127	; 0x7f
 80020de:	dc07      	bgt.n	80020f0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80020e0:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <SSD1306_Putc+0x100>)
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	461a      	mov	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020ec:	2b3f      	cmp	r3, #63	; 0x3f
 80020ee:	dd01      	ble.n	80020f4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e061      	b.n	80021b8 <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e04f      	b.n	800219a <SSD1306_Putc+0xda>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	3b20      	subs	r3, #32
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	7849      	ldrb	r1, [r1, #1]
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4619      	mov	r1, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	440b      	add	r3, r1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	e034      	b.n	8002188 <SSD1306_Putc+0xc8>
			if ((b << j) & 0x8000) {
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <SSD1306_Putc+0x94>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <SSD1306_Putc+0x100>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b29a      	uxth	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b298      	uxth	r0, r3
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <SSD1306_Putc+0x100>)
 800213e:	785b      	ldrb	r3, [r3, #1]
 8002140:	b29a      	uxth	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4413      	add	r3, r2
 8002148:	b29b      	uxth	r3, r3
 800214a:	79ba      	ldrb	r2, [r7, #6]
 800214c:	4619      	mov	r1, r3
 800214e:	f7ff ff3f 	bl	8001fd0 <SSD1306_DrawPixel>
 8002152:	e016      	b.n	8002182 <SSD1306_Putc+0xc2>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <SSD1306_Putc+0x100>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b29a      	uxth	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4413      	add	r3, r2
 8002160:	b298      	uxth	r0, r3
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <SSD1306_Putc+0x100>)
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	b29b      	uxth	r3, r3
 800216c:	4413      	add	r3, r2
 800216e:	b299      	uxth	r1, r3
 8002170:	79bb      	ldrb	r3, [r7, #6]
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	f7ff ff27 	bl	8001fd0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	3301      	adds	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4293      	cmp	r3, r2
 8002192:	d3c4      	bcc.n	800211e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	461a      	mov	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d3a9      	bcc.n	80020fa <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SSD1306_Putc+0x100>)
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <SSD1306_Putc+0x100>)
 80021b4:	701a      	strb	r2, [r3, #0]

	/* Return character written */
	return ch;
 80021b6:	79fb      	ldrb	r3, [r7, #7]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200000e8 	.word	0x200000e8

080021c4 <SSD1306_Puts>:

uint8_t SSD1306_Puts(uint8_t* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	71fb      	strb	r3, [r7, #7]

	/* Write characters */
	while (*str) {
 80021d2:	e012      	b.n	80021fa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff6f 	bl	80020c0 <SSD1306_Putc>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d002      	beq.n	80021f4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	e008      	b.n	8002206 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3301      	adds	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1e8      	bne.n	80021d4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	781b      	ldrb	r3, [r3, #0]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800220e:	b590      	push	{r4, r7, lr}
 8002210:	b087      	sub	sp, #28
 8002212:	af00      	add	r7, sp, #0
 8002214:	4604      	mov	r4, r0
 8002216:	4608      	mov	r0, r1
 8002218:	4611      	mov	r1, r2
 800221a:	461a      	mov	r2, r3
 800221c:	4623      	mov	r3, r4
 800221e:	80fb      	strh	r3, [r7, #6]
 8002220:	4603      	mov	r3, r0
 8002222:	80bb      	strh	r3, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	803b      	strh	r3, [r7, #0]

	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	2b7f      	cmp	r3, #127	; 0x7f
 8002230:	d901      	bls.n	8002236 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8002232:	237f      	movs	r3, #127	; 0x7f
 8002234:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	2b7f      	cmp	r3, #127	; 0x7f
 800223a:	d901      	bls.n	8002240 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800223c:	237f      	movs	r3, #127	; 0x7f
 800223e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8002240:	88bb      	ldrh	r3, [r7, #4]
 8002242:	2b3f      	cmp	r3, #63	; 0x3f
 8002244:	d901      	bls.n	800224a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002246:	233f      	movs	r3, #63	; 0x3f
 8002248:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800224a:	883b      	ldrh	r3, [r7, #0]
 800224c:	2b3f      	cmp	r3, #63	; 0x3f
 800224e:	d901      	bls.n	8002254 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8002250:	233f      	movs	r3, #63	; 0x3f
 8002252:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8002254:	88fa      	ldrh	r2, [r7, #6]
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	429a      	cmp	r2, r3
 800225a:	d205      	bcs.n	8002268 <SSD1306_DrawLine+0x5a>
 800225c:	887a      	ldrh	r2, [r7, #2]
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	b29b      	uxth	r3, r3
 8002264:	b21b      	sxth	r3, r3
 8002266:	e004      	b.n	8002272 <SSD1306_DrawLine+0x64>
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b29b      	uxth	r3, r3
 8002270:	b21b      	sxth	r3, r3
 8002272:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8002274:	88ba      	ldrh	r2, [r7, #4]
 8002276:	883b      	ldrh	r3, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d205      	bcs.n	8002288 <SSD1306_DrawLine+0x7a>
 800227c:	883a      	ldrh	r2, [r7, #0]
 800227e:	88bb      	ldrh	r3, [r7, #4]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	b21b      	sxth	r3, r3
 8002286:	e004      	b.n	8002292 <SSD1306_DrawLine+0x84>
 8002288:	88ba      	ldrh	r2, [r7, #4]
 800228a:	883b      	ldrh	r3, [r7, #0]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	b21b      	sxth	r3, r3
 8002292:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	429a      	cmp	r2, r3
 800229a:	d201      	bcs.n	80022a0 <SSD1306_DrawLine+0x92>
 800229c:	2301      	movs	r3, #1
 800229e:	e001      	b.n	80022a4 <SSD1306_DrawLine+0x96>
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 80022a6:	88ba      	ldrh	r2, [r7, #4]
 80022a8:	883b      	ldrh	r3, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d201      	bcs.n	80022b2 <SSD1306_DrawLine+0xa4>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e001      	b.n	80022b6 <SSD1306_DrawLine+0xa8>
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022b6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 80022b8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dd06      	ble.n	80022d2 <SSD1306_DrawLine+0xc4>
 80022c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022c8:	0fda      	lsrs	r2, r3, #31
 80022ca:	4413      	add	r3, r2
 80022cc:	105b      	asrs	r3, r3, #1
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	e006      	b.n	80022e0 <SSD1306_DrawLine+0xd2>
 80022d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022d6:	0fda      	lsrs	r2, r3, #31
 80022d8:	4413      	add	r3, r2
 80022da:	105b      	asrs	r3, r3, #1
 80022dc:	425b      	negs	r3, r3
 80022de:	b21b      	sxth	r3, r3
 80022e0:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80022e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d129      	bne.n	800233e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80022ea:	883a      	ldrh	r2, [r7, #0]
 80022ec:	88bb      	ldrh	r3, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d205      	bcs.n	80022fe <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80022f2:	883b      	ldrh	r3, [r7, #0]
 80022f4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80022f6:	88bb      	ldrh	r3, [r7, #4]
 80022f8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80022fa:	893b      	ldrh	r3, [r7, #8]
 80022fc:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	429a      	cmp	r2, r3
 8002304:	d205      	bcs.n	8002312 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800230e:	893b      	ldrh	r3, [r7, #8]
 8002310:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002312:	88bb      	ldrh	r3, [r7, #4]
 8002314:	82bb      	strh	r3, [r7, #20]
 8002316:	e00c      	b.n	8002332 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002318:	8ab9      	ldrh	r1, [r7, #20]
 800231a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe55 	bl	8001fd0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002326:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800232a:	b29b      	uxth	r3, r3
 800232c:	3301      	adds	r3, #1
 800232e:	b29b      	uxth	r3, r3
 8002330:	82bb      	strh	r3, [r7, #20]
 8002332:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002336:	883b      	ldrh	r3, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	dded      	ble.n	8002318 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 800233c:	e05f      	b.n	80023fe <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 800233e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d129      	bne.n	800239a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002346:	883a      	ldrh	r2, [r7, #0]
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d205      	bcs.n	800235a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800234e:	883b      	ldrh	r3, [r7, #0]
 8002350:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002352:	88bb      	ldrh	r3, [r7, #4]
 8002354:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002356:	893b      	ldrh	r3, [r7, #8]
 8002358:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	429a      	cmp	r2, r3
 8002360:	d205      	bcs.n	800236e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800236a:	893b      	ldrh	r3, [r7, #8]
 800236c:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	82bb      	strh	r3, [r7, #20]
 8002372:	e00c      	b.n	800238e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002374:	8abb      	ldrh	r3, [r7, #20]
 8002376:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800237a:	88b9      	ldrh	r1, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe27 	bl	8001fd0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002382:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002386:	b29b      	uxth	r3, r3
 8002388:	3301      	adds	r3, #1
 800238a:	b29b      	uxth	r3, r3
 800238c:	82bb      	strh	r3, [r7, #20]
 800238e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	429a      	cmp	r2, r3
 8002396:	dded      	ble.n	8002374 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8002398:	e031      	b.n	80023fe <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800239a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800239e:	88b9      	ldrh	r1, [r7, #4]
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fe14 	bl	8001fd0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d103      	bne.n	80023b8 <SSD1306_DrawLine+0x1aa>
 80023b0:	88ba      	ldrh	r2, [r7, #4]
 80023b2:	883b      	ldrh	r3, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d021      	beq.n	80023fc <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 80023b8:	8afb      	ldrh	r3, [r7, #22]
 80023ba:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80023bc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023c4:	425b      	negs	r3, r3
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dd08      	ble.n	80023dc <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80023ca:	8afa      	ldrh	r2, [r7, #22]
 80023cc:	8a3b      	ldrh	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80023d4:	89fa      	ldrh	r2, [r7, #14]
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	4413      	add	r3, r2
 80023da:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 80023dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dad8      	bge.n	800239a <SSD1306_DrawLine+0x18c>
			err += dx;
 80023e8:	8afa      	ldrh	r2, [r7, #22]
 80023ea:	8a7b      	ldrh	r3, [r7, #18]
 80023ec:	4413      	add	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80023f2:	89ba      	ldrh	r2, [r7, #12]
 80023f4:	88bb      	ldrh	r3, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80023fa:	e7ce      	b.n	800239a <SSD1306_DrawLine+0x18c>
			break;
 80023fc:	bf00      	nop
		}
	}
}
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <SSD1306_DrawCircle>:

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	4604      	mov	r4, r0
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4623      	mov	r3, r4
 8002414:	80fb      	strh	r3, [r7, #6]
 8002416:	4603      	mov	r3, r0
 8002418:	80bb      	strh	r3, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]
 800241e:	4613      	mov	r3, r2
 8002420:	707b      	strb	r3, [r7, #1]

	int16_t f = 1 - r;
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	f1c3 0301 	rsb	r3, r3, #1
 8002428:	b29b      	uxth	r3, r3
 800242a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800242c:	2301      	movs	r3, #1
 800242e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	461a      	mov	r2, r3
 8002434:	03d2      	lsls	r2, r2, #15
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	b29b      	uxth	r3, r3
 800243c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002446:	88f8      	ldrh	r0, [r7, #6]
 8002448:	88ba      	ldrh	r2, [r7, #4]
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	4413      	add	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	787a      	ldrb	r2, [r7, #1]
 8002452:	4619      	mov	r1, r3
 8002454:	f7ff fdbc 	bl	8001fd0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002458:	88f8      	ldrh	r0, [r7, #6]
 800245a:	88ba      	ldrh	r2, [r7, #4]
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	b29b      	uxth	r3, r3
 8002462:	787a      	ldrb	r2, [r7, #1]
 8002464:	4619      	mov	r1, r3
 8002466:	f7ff fdb3 	bl	8001fd0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	4413      	add	r3, r2
 8002470:	b29b      	uxth	r3, r3
 8002472:	88b9      	ldrh	r1, [r7, #4]
 8002474:	787a      	ldrb	r2, [r7, #1]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fdaa 	bl	8001fd0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800247c:	88fa      	ldrh	r2, [r7, #6]
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	b29b      	uxth	r3, r3
 8002484:	88b9      	ldrh	r1, [r7, #4]
 8002486:	787a      	ldrb	r2, [r7, #1]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fda1 	bl	8001fd0 <SSD1306_DrawPixel>

    while (x < y) {
 800248e:	e081      	b.n	8002594 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8002490:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0e      	blt.n	80024b6 <SSD1306_DrawCircle+0xb2>
            y--;
 8002498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80024a4:	8a7b      	ldrh	r3, [r7, #18]
 80024a6:	3302      	adds	r3, #2
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80024ac:	8afa      	ldrh	r2, [r7, #22]
 80024ae:	8a7b      	ldrh	r3, [r7, #18]
 80024b0:	4413      	add	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80024b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	b29b      	uxth	r3, r3
 80024c0:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80024c2:	8abb      	ldrh	r3, [r7, #20]
 80024c4:	3302      	adds	r3, #2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80024ca:	8afa      	ldrh	r2, [r7, #22]
 80024cc:	8abb      	ldrh	r3, [r7, #20]
 80024ce:	4413      	add	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	8a3b      	ldrh	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	b298      	uxth	r0, r3
 80024dc:	88ba      	ldrh	r2, [r7, #4]
 80024de:	89fb      	ldrh	r3, [r7, #14]
 80024e0:	4413      	add	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	787a      	ldrb	r2, [r7, #1]
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7ff fd72 	bl	8001fd0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	8a3b      	ldrh	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	b298      	uxth	r0, r3
 80024f4:	88ba      	ldrh	r2, [r7, #4]
 80024f6:	89fb      	ldrh	r3, [r7, #14]
 80024f8:	4413      	add	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	787a      	ldrb	r2, [r7, #1]
 80024fe:	4619      	mov	r1, r3
 8002500:	f7ff fd66 	bl	8001fd0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002504:	88fa      	ldrh	r2, [r7, #6]
 8002506:	8a3b      	ldrh	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	b298      	uxth	r0, r3
 800250c:	88ba      	ldrh	r2, [r7, #4]
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	787a      	ldrb	r2, [r7, #1]
 8002516:	4619      	mov	r1, r3
 8002518:	f7ff fd5a 	bl	8001fd0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	8a3b      	ldrh	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	b298      	uxth	r0, r3
 8002524:	88ba      	ldrh	r2, [r7, #4]
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	b29b      	uxth	r3, r3
 800252c:	787a      	ldrb	r2, [r7, #1]
 800252e:	4619      	mov	r1, r3
 8002530:	f7ff fd4e 	bl	8001fd0 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	4413      	add	r3, r2
 800253a:	b298      	uxth	r0, r3
 800253c:	88ba      	ldrh	r2, [r7, #4]
 800253e:	8a3b      	ldrh	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	b29b      	uxth	r3, r3
 8002544:	787a      	ldrb	r2, [r7, #1]
 8002546:	4619      	mov	r1, r3
 8002548:	f7ff fd42 	bl	8001fd0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b298      	uxth	r0, r3
 8002554:	88ba      	ldrh	r2, [r7, #4]
 8002556:	8a3b      	ldrh	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	787a      	ldrb	r2, [r7, #1]
 800255e:	4619      	mov	r1, r3
 8002560:	f7ff fd36 	bl	8001fd0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	4413      	add	r3, r2
 800256a:	b298      	uxth	r0, r3
 800256c:	88ba      	ldrh	r2, [r7, #4]
 800256e:	8a3b      	ldrh	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	b29b      	uxth	r3, r3
 8002574:	787a      	ldrb	r2, [r7, #1]
 8002576:	4619      	mov	r1, r3
 8002578:	f7ff fd2a 	bl	8001fd0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	89fb      	ldrh	r3, [r7, #14]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	b298      	uxth	r0, r3
 8002584:	88ba      	ldrh	r2, [r7, #4]
 8002586:	8a3b      	ldrh	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	b29b      	uxth	r3, r3
 800258c:	787a      	ldrb	r2, [r7, #1]
 800258e:	4619      	mov	r1, r3
 8002590:	f7ff fd1e 	bl	8001fd0 <SSD1306_DrawPixel>
    while (x < y) {
 8002594:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002598:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800259c:	429a      	cmp	r2, r3
 800259e:	f6ff af77 	blt.w	8002490 <SSD1306_DrawCircle+0x8c>
    }
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd90      	pop	{r4, r7, pc}

080025ac <SSD1306_Clear>:

void SSD1306_Clear(void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0

	SSD1306_Fill (SSD1306_COLOR_BLACK);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7ff fcf5 	bl	8001fa0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80025b6:	f7ff fcc5 	bl	8001f44 <SSD1306_UpdateScreen>
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <MX_I2C1_Init>:
  */
static void MX_I2C1_Init(void);


/* Private function definitions ----------------------------------------------*/
static void MX_I2C1_Init(void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0

	/* Initialize I2C peripheral */
	/* MODIFIABLE BEGIN 1 */
	hi2c_display.Instance = I2C1;
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MX_I2C1_Init+0x50>)
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <MX_I2C1_Init+0x54>)
 80025c8:	601a      	str	r2, [r3, #0]
	hi2c_display.Init.ClockSpeed = 400000;
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_I2C1_Init+0x50>)
 80025cc:	4a12      	ldr	r2, [pc, #72]	; (8002618 <MX_I2C1_Init+0x58>)
 80025ce:	605a      	str	r2, [r3, #4]
	hi2c_display.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_I2C1_Init+0x50>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
	hi2c_display.Init.OwnAddress1 = 0;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_I2C1_Init+0x50>)
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
	hi2c_display.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <MX_I2C1_Init+0x50>)
 80025de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025e2:	611a      	str	r2, [r3, #16]
	hi2c_display.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <MX_I2C1_Init+0x50>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
	hi2c_display.Init.OwnAddress2 = 0;
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <MX_I2C1_Init+0x50>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
	hi2c_display.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <MX_I2C1_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
	hi2c_display.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_I2C1_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
	 * 	- Function: void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
	 */

	if (
		/* MODIFIABLE BEGIN 2 */
		HAL_I2C_Init(&hi2c_display)
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <MX_I2C1_Init+0x50>)
 80025fe:	f000 fc45 	bl	8002e8c <HAL_I2C_Init>
 8002602:	4603      	mov	r3, r0
	if (
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_I2C1_Init+0x4c>
		/* MODIFIABLE END 2 */
		!= HAL_OK) {
		Error_Handler();
 8002608:	f000 f808 	bl	800261c <Error_Handler>
	}
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200004ec 	.word	0x200004ec
 8002614:	40005400 	.word	0x40005400
 8002618:	00061a80 	.word	0x00061a80

0800261c <Error_Handler>:

static void Error_Handler(void) {
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  while (1) {}
 8002620:	e7fe      	b.n	8002620 <Error_Handler+0x4>
	...

08002624 <ssd1306_I2C_Init>:
}


/* Public function definitions -----------------------------------------------*/
uint8_t ssd1306_I2C_Init(uint8_t address) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]

	/* Initialize I2C peripheral */
	/* MODIFIABLE BEGIN 3 */
	MX_I2C1_Init();
 800262e:	f7ff ffc7 	bl	80025c0 <MX_I2C1_Init>
	/* MODIFIABLE END 3 */

	/* Check if parameter (display address) is not NULL */
	if(address != NULL) {
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <ssd1306_I2C_Init+0x32>

		/* Check if display is connected to I2C */
		if (
			/* MODIFIABLE BEGIN 4 */
			HAL_I2C_IsDeviceReady(&hi2c_display, address, 1, I2C_ISDEVICEREADY_TIMEOUT)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	b299      	uxth	r1, r3
 800263c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002640:	2201      	movs	r2, #1
 8002642:	4807      	ldr	r0, [pc, #28]	; (8002660 <ssd1306_I2C_Init+0x3c>)
 8002644:	f000 fe64 	bl	8003310 <HAL_I2C_IsDeviceReady>
 8002648:	4603      	mov	r3, r0
		if (
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <ssd1306_I2C_Init+0x2e>
			/* MODIFIABLE END 4 */
			!= HAL_OK) {
			return 0;	// Display not connected
 800264e:	2300      	movs	r3, #0
 8002650:	e002      	b.n	8002658 <ssd1306_I2C_Init+0x34>
		} else {
			return 1;	// Display connected
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <ssd1306_I2C_Init+0x34>
		}
	} else {
		return 0;
 8002656:	2300      	movs	r3, #0
	}
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	200004ec 	.word	0x200004ec

08002664 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b0c7      	sub	sp, #284	; 0x11c
 8002668:	af02      	add	r7, sp, #8
 800266a:	4604      	mov	r4, r0
 800266c:	4608      	mov	r0, r1
 800266e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002672:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002676:	600a      	str	r2, [r1, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800267e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002682:	4622      	mov	r2, r4
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800268a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800268e:	4602      	mov	r2, r0
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002696:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800269a:	460a      	mov	r2, r1
 800269c:	801a      	strh	r2, [r3, #0]
	/* Initialize array to write: 1 byte for register + bytes for data */
	uint8_t dataToSend[256];
	uint8_t i;

	/* Check if first parameter (display address) is not NULL */
	if(address != NULL) {
 800269e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026a2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d041      	beq.n	8002730 <ssd1306_I2C_WriteMulti+0xcc>

		dataToSend[0] = reg;
 80026ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026b4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026b8:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80026bc:	7812      	ldrb	r2, [r2, #0]
 80026be:	701a      	strb	r2, [r3, #0]

		for(i = 0; i < count; i++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026c6:	e015      	b.n	80026f4 <ssd1306_I2C_WriteMulti+0x90>
			dataToSend[i+1] = data[i];
 80026c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026cc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026d0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	441a      	add	r2, r3
 80026d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026dc:	3301      	adds	r3, #1
 80026de:	7811      	ldrb	r1, [r2, #0]
 80026e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026e4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80026e8:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i < count; i++) {
 80026ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026ee:	3301      	adds	r3, #1
 80026f0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026fe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002702:	8812      	ldrh	r2, [r2, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d8df      	bhi.n	80026c8 <ssd1306_I2C_WriteMulti+0x64>
		}

		/* MODIFIABLE BEGIN 5 */
		HAL_I2C_Master_Transmit(&hi2c_display, address, dataToSend, count+1, I2C_TIMEOUT);
 8002708:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800270c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b299      	uxth	r1, r3
 8002714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002718:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	b29b      	uxth	r3, r3
 8002722:	f107 020c 	add.w	r2, r7, #12
 8002726:	200a      	movs	r0, #10
 8002728:	9000      	str	r0, [sp, #0]
 800272a:	4804      	ldr	r0, [pc, #16]	; (800273c <ssd1306_I2C_WriteMulti+0xd8>)
 800272c:	f000 fcf2 	bl	8003114 <HAL_I2C_Master_Transmit>
		/* MODIFIABLE END 5 */
	}
}
 8002730:	bf00      	nop
 8002732:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop
 800273c:	200004ec 	.word	0x200004ec

08002740 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
 800274a:	460b      	mov	r3, r1
 800274c:	71bb      	strb	r3, [r7, #6]
 800274e:	4613      	mov	r3, r2
 8002750:	717b      	strb	r3, [r7, #5]

	/* Initialize array to write: 1 byte for register + 1 byte for data */
	uint8_t dataToSend[2];

	/* Check if first parameter (display address) is not NULL */
	if(address != NULL) {
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <ssd1306_I2C_Write+0x34>

		dataToSend[0] = reg;
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	733b      	strb	r3, [r7, #12]
		dataToSend[1] = data;
 800275c:	797b      	ldrb	r3, [r7, #5]
 800275e:	737b      	strb	r3, [r7, #13]

		/* MODIFIABLE BEGIN 6 */
		HAL_I2C_Master_Transmit(&hi2c_display, address, dataToSend, sizeof(dataToSend), I2C_TIMEOUT);
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	b299      	uxth	r1, r3
 8002764:	f107 020c 	add.w	r2, r7, #12
 8002768:	230a      	movs	r3, #10
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2302      	movs	r3, #2
 800276e:	4803      	ldr	r0, [pc, #12]	; (800277c <ssd1306_I2C_Write+0x3c>)
 8002770:	f000 fcd0 	bl	8003114 <HAL_I2C_Master_Transmit>
		/* MODIFIABLE END 6 */
	}
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200004ec 	.word	0x200004ec

08002780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_Init+0x40>)
 800278a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_Init+0x40>)
 8002796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <HAL_Init+0x40>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a8:	2003      	movs	r0, #3
 80027aa:	f000 f94f 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 f808 	bl	80027c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b4:	f7fe fd32 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023c00 	.word	0x40023c00

080027c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_InitTick+0x54>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x58>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027da:	fbb3 f3f1 	udiv	r3, r3, r1
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f967 	bl	8002ab6 <HAL_SYSTICK_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00e      	b.n	8002810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d80a      	bhi.n	800280e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f8:	2200      	movs	r2, #0
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002800:	f000 f92f 	bl	8002a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002804:	4a06      	ldr	r2, [pc, #24]	; (8002820 <HAL_InitTick+0x5c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000000 	.word	0x20000000
 800281c:	2000001c 	.word	0x2000001c
 8002820:	20000018 	.word	0x20000018

08002824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x20>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x24>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_IncTick+0x24>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000001c 	.word	0x2000001c
 8002848:	20000540 	.word	0x20000540

0800284c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_GetTick+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000540 	.word	0x20000540

08002864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff ffee 	bl	800284c <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800287c:	d005      	beq.n	800288a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_Delay+0x44>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288a:	bf00      	nop
 800288c:	f7ff ffde 	bl	800284c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d8f7      	bhi.n	800288c <HAL_Delay+0x28>
  {
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	2000001c 	.word	0x2000001c

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <__NVIC_EnableIRQ+0x38>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	; (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a2c:	f7ff ff8e 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff29 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff3e 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff8e 	bl	80029a0 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5d 	bl	800294c <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff31 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffa2 	bl	8002a08 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e177      	b.n	8002ddc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8166 	bne.w	8002dd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d130      	bne.n	8002b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80c0 	beq.w	8002dd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <HAL_GPIO_Init+0x324>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_GPIO_Init+0x324>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	; 0x44
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_GPIO_Init+0x324>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c72:	4a61      	ldr	r2, [pc, #388]	; (8002df8 <HAL_GPIO_Init+0x328>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_GPIO_Init+0x32c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d037      	beq.n	8002d0e <HAL_GPIO_Init+0x23e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d031      	beq.n	8002d0a <HAL_GPIO_Init+0x23a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a56      	ldr	r2, [pc, #344]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02b      	beq.n	8002d06 <HAL_GPIO_Init+0x236>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_GPIO_Init+0x338>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d025      	beq.n	8002d02 <HAL_GPIO_Init+0x232>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a54      	ldr	r2, [pc, #336]	; (8002e0c <HAL_GPIO_Init+0x33c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <HAL_GPIO_Init+0x22e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a53      	ldr	r2, [pc, #332]	; (8002e10 <HAL_GPIO_Init+0x340>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x22a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	; (8002e14 <HAL_GPIO_Init+0x344>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x226>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a51      	ldr	r2, [pc, #324]	; (8002e18 <HAL_GPIO_Init+0x348>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x222>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a50      	ldr	r2, [pc, #320]	; (8002e1c <HAL_GPIO_Init+0x34c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x21e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4f      	ldr	r2, [pc, #316]	; (8002e20 <HAL_GPIO_Init+0x350>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x21a>
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	e012      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002cea:	230a      	movs	r3, #10
 8002cec:	e010      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002cee:	2308      	movs	r3, #8
 8002cf0:	e00e      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e00c      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	e00a      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e008      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e004      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_GPIO_Init+0x240>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f002 0203 	and.w	r2, r2, #3
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	4093      	lsls	r3, r2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d20:	4935      	ldr	r1, [pc, #212]	; (8002df8 <HAL_GPIO_Init+0x328>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_GPIO_Init+0x354>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d52:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <HAL_GPIO_Init+0x354>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d58:	4b32      	ldr	r3, [pc, #200]	; (8002e24 <HAL_GPIO_Init+0x354>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_GPIO_Init+0x354>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_GPIO_Init+0x354>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da6:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <HAL_GPIO_Init+0x354>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_GPIO_Init+0x354>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_GPIO_Init+0x354>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	f67f ae84 	bls.w	8002aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40020c00 	.word	0x40020c00
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40021400 	.word	0x40021400
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40021c00 	.word	0x40021c00
 8002e1c:	40022000 	.word	0x40022000
 8002e20:	40022400 	.word	0x40022400
 8002e24:	40013c00 	.word	0x40013c00

08002e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	e001      	b.n	8002e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e74:	e003      	b.n	8002e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	041a      	lsls	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	619a      	str	r2, [r3, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e12b      	b.n	80030f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe f9da 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ede:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f001 f9b6 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a81      	ldr	r2, [pc, #516]	; (8003100 <HAL_I2C_Init+0x274>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d807      	bhi.n	8002f10 <HAL_I2C_Init+0x84>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a80      	ldr	r2, [pc, #512]	; (8003104 <HAL_I2C_Init+0x278>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e006      	b.n	8002f1e <HAL_I2C_Init+0x92>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a7d      	ldr	r2, [pc, #500]	; (8003108 <HAL_I2C_Init+0x27c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	bf94      	ite	ls
 8002f18:	2301      	movls	r3, #1
 8002f1a:	2300      	movhi	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0e7      	b.n	80030f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4a78      	ldr	r2, [pc, #480]	; (800310c <HAL_I2C_Init+0x280>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a6a      	ldr	r2, [pc, #424]	; (8003100 <HAL_I2C_Init+0x274>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d802      	bhi.n	8002f60 <HAL_I2C_Init+0xd4>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	e009      	b.n	8002f74 <HAL_I2C_Init+0xe8>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	4a69      	ldr	r2, [pc, #420]	; (8003110 <HAL_I2C_Init+0x284>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	3301      	adds	r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	495c      	ldr	r1, [pc, #368]	; (8003100 <HAL_I2C_Init+0x274>)
 8002f90:	428b      	cmp	r3, r1
 8002f92:	d819      	bhi.n	8002fc8 <HAL_I2C_Init+0x13c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e59      	subs	r1, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa2:	1c59      	adds	r1, r3, #1
 8002fa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fa8:	400b      	ands	r3, r1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_I2C_Init+0x138>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e59      	subs	r1, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc2:	e051      	b.n	8003068 <HAL_I2C_Init+0x1dc>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	e04f      	b.n	8003068 <HAL_I2C_Init+0x1dc>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d111      	bne.n	8002ff4 <HAL_I2C_Init+0x168>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e012      	b.n	800301a <HAL_I2C_Init+0x18e>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e58      	subs	r0, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	0099      	lsls	r1, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	fbb0 f3f3 	udiv	r3, r0, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Init+0x196>
 800301e:	2301      	movs	r3, #1
 8003020:	e022      	b.n	8003068 <HAL_I2C_Init+0x1dc>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10e      	bne.n	8003048 <HAL_I2C_Init+0x1bc>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e58      	subs	r0, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	440b      	add	r3, r1
 8003038:	fbb0 f3f3 	udiv	r3, r0, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003046:	e00f      	b.n	8003068 <HAL_I2C_Init+0x1dc>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	0099      	lsls	r1, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	6809      	ldr	r1, [r1, #0]
 800306c:	4313      	orrs	r3, r2
 800306e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6911      	ldr	r1, [r2, #16]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68d2      	ldr	r2, [r2, #12]
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	000186a0 	.word	0x000186a0
 8003104:	001e847f 	.word	0x001e847f
 8003108:	003d08ff 	.word	0x003d08ff
 800310c:	431bde83 	.word	0x431bde83
 8003110:	10624dd3 	.word	0x10624dd3

08003114 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	461a      	mov	r2, r3
 8003120:	460b      	mov	r3, r1
 8003122:	817b      	strh	r3, [r7, #10]
 8003124:	4613      	mov	r3, r2
 8003126:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff fb90 	bl	800284c <HAL_GetTick>
 800312c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b20      	cmp	r3, #32
 8003138:	f040 80e0 	bne.w	80032fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2319      	movs	r3, #25
 8003142:	2201      	movs	r2, #1
 8003144:	4970      	ldr	r1, [pc, #448]	; (8003308 <HAL_I2C_Master_Transmit+0x1f4>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fa92 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003152:	2302      	movs	r3, #2
 8003154:	e0d3      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_I2C_Master_Transmit+0x50>
 8003160:	2302      	movs	r3, #2
 8003162:	e0cc      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d007      	beq.n	800318a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003198:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2221      	movs	r2, #33	; 0x21
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2210      	movs	r2, #16
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	893a      	ldrh	r2, [r7, #8]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a50      	ldr	r2, [pc, #320]	; (800330c <HAL_I2C_Master_Transmit+0x1f8>)
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031cc:	8979      	ldrh	r1, [r7, #10]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f9ca 	bl	800356c <I2C_MasterRequestWrite>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e08d      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031f8:	e066      	b.n	80032c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	6a39      	ldr	r1, [r7, #32]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fb0c 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b04      	cmp	r3, #4
 8003210:	d107      	bne.n	8003222 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003220:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06b      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b04      	cmp	r3, #4
 8003262:	d11b      	bne.n	800329c <HAL_I2C_Master_Transmit+0x188>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d017      	beq.n	800329c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6a39      	ldr	r1, [r7, #32]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fafc 	bl	800389e <I2C_WaitOnBTFFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d107      	bne.n	80032c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e01a      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d194      	bne.n	80031fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	00100002 	.word	0x00100002
 800330c:	ffff0000 	.word	0xffff0000

08003310 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	460b      	mov	r3, r1
 800331e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff fa94 	bl	800284c <HAL_GetTick>
 8003324:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b20      	cmp	r3, #32
 8003334:	f040 8111 	bne.w	800355a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2319      	movs	r3, #25
 800333e:	2201      	movs	r2, #1
 8003340:	4988      	ldr	r1, [pc, #544]	; (8003564 <HAL_I2C_IsDeviceReady+0x254>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f994 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800334e:	2302      	movs	r3, #2
 8003350:	e104      	b.n	800355c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_I2C_IsDeviceReady+0x50>
 800335c:	2302      	movs	r3, #2
 800335e:	e0fd      	b.n	800355c <HAL_I2C_IsDeviceReady+0x24c>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d007      	beq.n	8003386 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003394:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2224      	movs	r2, #36	; 0x24
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a70      	ldr	r2, [pc, #448]	; (8003568 <HAL_I2C_IsDeviceReady+0x258>)
 80033a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f952 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e0:	d103      	bne.n	80033ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0b6      	b.n	800355c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80033fe:	f7ff fa25 	bl	800284c <HAL_GetTick>
 8003402:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	bf0c      	ite	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	2300      	movne	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003432:	e025      	b.n	8003480 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003434:	f7ff fa0a 	bl	800284c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d302      	bcc.n	800344a <HAL_I2C_IsDeviceReady+0x13a>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	22a0      	movs	r2, #160	; 0xa0
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2ba0      	cmp	r3, #160	; 0xa0
 800348a:	d005      	beq.n	8003498 <HAL_I2C_IsDeviceReady+0x188>
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <HAL_I2C_IsDeviceReady+0x188>
 8003492:	7dbb      	ldrb	r3, [r7, #22]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0cd      	beq.n	8003434 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d129      	bne.n	8003502 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2319      	movs	r3, #25
 80034da:	2201      	movs	r2, #1
 80034dc:	4921      	ldr	r1, [pc, #132]	; (8003564 <HAL_I2C_IsDeviceReady+0x254>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8c6 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e036      	b.n	800355c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e02c      	b.n	800355c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003510:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800351a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2319      	movs	r3, #25
 8003522:	2201      	movs	r2, #1
 8003524:	490f      	ldr	r1, [pc, #60]	; (8003564 <HAL_I2C_IsDeviceReady+0x254>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f8a2 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e012      	b.n	800355c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	3301      	adds	r3, #1
 800353a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	f4ff af32 	bcc.w	80033aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	00100002 	.word	0x00100002
 8003568:	ffff0000 	.word	0xffff0000

0800356c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	460b      	mov	r3, r1
 800357a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d006      	beq.n	8003596 <I2C_MasterRequestWrite+0x2a>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d003      	beq.n	8003596 <I2C_MasterRequestWrite+0x2a>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003594:	d108      	bne.n	80035a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e00b      	b.n	80035c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	2b12      	cmp	r3, #18
 80035ae:	d107      	bne.n	80035c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f84f 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00d      	beq.n	80035f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e6:	d103      	bne.n	80035f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e035      	b.n	8003660 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fc:	d108      	bne.n	8003610 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035fe:	897b      	ldrh	r3, [r7, #10]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800360c:	611a      	str	r2, [r3, #16]
 800360e:	e01b      	b.n	8003648 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003610:	897b      	ldrh	r3, [r7, #10]
 8003612:	11db      	asrs	r3, r3, #7
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0306 	and.w	r3, r3, #6
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f063 030f 	orn	r3, r3, #15
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	490e      	ldr	r1, [pc, #56]	; (8003668 <I2C_MasterRequestWrite+0xfc>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f875 	bl	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e010      	b.n	8003660 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800363e:	897b      	ldrh	r3, [r7, #10]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <I2C_MasterRequestWrite+0x100>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f865 	bl	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	00010008 	.word	0x00010008
 800366c:	00010002 	.word	0x00010002

08003670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003680:	e025      	b.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003688:	d021      	beq.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7ff f8df 	bl	800284c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d116      	bne.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e023      	b.n	8003716 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10d      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	e00c      	b.n	800370e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	429a      	cmp	r2, r3
 8003712:	d0b6      	beq.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800372c:	e051      	b.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373c:	d123      	bne.n	8003786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003756:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e046      	b.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800378c:	d021      	beq.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7ff f85d 	bl	800284c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d116      	bne.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e020      	b.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10c      	bne.n	80037f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bf14      	ite	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	2300      	moveq	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e00b      	b.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	43da      	mvns	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d18d      	bne.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003828:	e02d      	b.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f878 	bl	8003920 <I2C_IsAcknowledgeFailed>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e02d      	b.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003840:	d021      	beq.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7ff f803 	bl	800284c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d116      	bne.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d1ca      	bne.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038aa:	e02d      	b.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f837 	bl	8003920 <I2C_IsAcknowledgeFailed>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e02d      	b.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c2:	d021      	beq.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c4:	f7fe ffc2 	bl	800284c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d302      	bcc.n	80038da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d116      	bne.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e007      	b.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b04      	cmp	r3, #4
 8003914:	d1ca      	bne.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003936:	d11b      	bne.n	8003970 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003940:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f043 0204 	orr.w	r2, r3, #4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e267      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d075      	beq.n	8003a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399e:	4b88      	ldr	r3, [pc, #544]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d00c      	beq.n	80039c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b85      	ldr	r3, [pc, #532]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d112      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b6:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c2:	d10b      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	4b7e      	ldr	r3, [pc, #504]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05b      	beq.n	8003a88 <HAL_RCC_OscConfig+0x108>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d157      	bne.n	8003a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e242      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x74>
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e01d      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x98>
 80039fe:	4b70      	ldr	r3, [pc, #448]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6f      	ldr	r2, [pc, #444]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b6d      	ldr	r3, [pc, #436]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6c      	ldr	r2, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 8003a18:	4b69      	ldr	r3, [pc, #420]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a68      	ldr	r2, [pc, #416]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b66      	ldr	r3, [pc, #408]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a65      	ldr	r2, [pc, #404]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe ff08 	bl	800284c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe ff04 	bl	800284c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e207      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b5b      	ldr	r3, [pc, #364]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xc0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fef4 	bl	800284c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe fef0 	bl	800284c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1f3      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	4b51      	ldr	r3, [pc, #324]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0xe8>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d063      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a96:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d11c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aae:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d116      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x152>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e1c7      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4937      	ldr	r1, [pc, #220]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae6:	e03a      	b.n	8003b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af0:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <HAL_RCC_OscConfig+0x244>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe fea9 	bl	800284c <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afe:	f7fe fea5 	bl	800284c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1a8      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4925      	ldr	r1, [pc, #148]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]
 8003b30:	e015      	b.n	8003b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_RCC_OscConfig+0x244>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe fe88 	bl	800284c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fe fe84 	bl	800284c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e187      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d036      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <HAL_RCC_OscConfig+0x248>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fe fe68 	bl	800284c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b80:	f7fe fe64 	bl	800284c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e167      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x200>
 8003b9e:	e01b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_OscConfig+0x248>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fe51 	bl	800284c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	e00e      	b.n	8003bcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fe fe4d 	bl	800284c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d907      	bls.n	8003bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e150      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	42470000 	.word	0x42470000
 8003bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	4b88      	ldr	r3, [pc, #544]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ea      	bne.n	8003bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8097 	beq.w	8003d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b81      	ldr	r3, [pc, #516]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	4b7d      	ldr	r3, [pc, #500]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a7c      	ldr	r2, [pc, #496]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b7a      	ldr	r3, [pc, #488]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b77      	ldr	r3, [pc, #476]	; (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b74      	ldr	r3, [pc, #464]	; (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a73      	ldr	r2, [pc, #460]	; (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe fe0d 	bl	800284c <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fe fe09 	bl	800284c <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e10c      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x2ea>
 8003c5c:	4b64      	ldr	r3, [pc, #400]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a63      	ldr	r2, [pc, #396]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	e01c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x324>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x30c>
 8003c72:	4b5f      	ldr	r3, [pc, #380]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a5e      	ldr	r2, [pc, #376]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a5b      	ldr	r2, [pc, #364]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x324>
 8003c8c:	4b58      	ldr	r3, [pc, #352]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a57      	ldr	r2, [pc, #348]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	4b55      	ldr	r3, [pc, #340]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a54      	ldr	r2, [pc, #336]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f023 0304 	bic.w	r3, r3, #4
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe fdce 	bl	800284c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fdca 	bl	800284c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0cb      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ee      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x334>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd8:	f7fe fdb8 	bl	800284c <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fe fdb4 	bl	800284c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e0b5      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf6:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ee      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	4a38      	ldr	r2, [pc, #224]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a1 	beq.w	8003e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1e:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d05c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d141      	bne.n	8003db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe fd88 	bl	800284c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fe fd84 	bl	800284c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e087      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	491b      	ldr	r1, [pc, #108]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fe fd5d 	bl	800284c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d96:	f7fe fd59 	bl	800284c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e05c      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x416>
 8003db4:	e054      	b.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fd46 	bl	800284c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe fd42 	bl	800284c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e045      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x444>
 8003de2:	e03d      	b.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e038      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000
 8003df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x4ec>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d028      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d121      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d11a      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d111      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	3b01      	subs	r3, #1
 8003e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800

08003e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0cc      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e84:	4b68      	ldr	r3, [pc, #416]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d90c      	bls.n	8003eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b65      	ldr	r3, [pc, #404]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ece:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d044      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d119      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2e:	4b3f      	ldr	r3, [pc, #252]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e067      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f4e:	4b37      	ldr	r3, [pc, #220]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 0203 	bic.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4934      	ldr	r1, [pc, #208]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f60:	f7fe fc74 	bl	800284c <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fe fc70 	bl	800284c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e04f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 020c 	and.w	r2, r3, #12
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d1eb      	bne.n	8003f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f90:	4b25      	ldr	r3, [pc, #148]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d20c      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fbd4 	bl	80027c4 <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023c00 	.word	0x40023c00
 800402c:	40023800 	.word	0x40023800
 8004030:	080069d4 	.word	0x080069d4
 8004034:	20000000 	.word	0x20000000
 8004038:	20000018 	.word	0x20000018

0800403c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b094      	sub	sp, #80	; 0x50
 8004042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	647b      	str	r3, [r7, #68]	; 0x44
 8004048:	2300      	movs	r3, #0
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404c:	2300      	movs	r3, #0
 800404e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004054:	4b79      	ldr	r3, [pc, #484]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d00d      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x40>
 8004060:	2b08      	cmp	r3, #8
 8004062:	f200 80e1 	bhi.w	8004228 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x34>
 800406a:	2b04      	cmp	r3, #4
 800406c:	d003      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x3a>
 800406e:	e0db      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b73      	ldr	r3, [pc, #460]	; (8004240 <HAL_RCC_GetSysClockFreq+0x204>)
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004074:	e0db      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004076:	4b73      	ldr	r3, [pc, #460]	; (8004244 <HAL_RCC_GetSysClockFreq+0x208>)
 8004078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800407a:	e0d8      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004086:	4b6d      	ldr	r3, [pc, #436]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d063      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b6a      	ldr	r3, [pc, #424]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	2200      	movs	r2, #0
 800409a:	63bb      	str	r3, [r7, #56]	; 0x38
 800409c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
 80040a6:	2300      	movs	r3, #0
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
 80040aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	0159      	lsls	r1, r3, #5
 80040bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c0:	0150      	lsls	r0, r2, #5
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4621      	mov	r1, r4
 80040c8:	1a51      	subs	r1, r2, r1
 80040ca:	6139      	str	r1, [r7, #16]
 80040cc:	4629      	mov	r1, r5
 80040ce:	eb63 0301 	sbc.w	r3, r3, r1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e0:	4659      	mov	r1, fp
 80040e2:	018b      	lsls	r3, r1, #6
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ea:	4651      	mov	r1, sl
 80040ec:	018a      	lsls	r2, r1, #6
 80040ee:	4651      	mov	r1, sl
 80040f0:	ebb2 0801 	subs.w	r8, r2, r1
 80040f4:	4659      	mov	r1, fp
 80040f6:	eb63 0901 	sbc.w	r9, r3, r1
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410e:	4690      	mov	r8, r2
 8004110:	4699      	mov	r9, r3
 8004112:	4623      	mov	r3, r4
 8004114:	eb18 0303 	adds.w	r3, r8, r3
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	462b      	mov	r3, r5
 800411c:	eb49 0303 	adc.w	r3, r9, r3
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800412e:	4629      	mov	r1, r5
 8004130:	024b      	lsls	r3, r1, #9
 8004132:	4621      	mov	r1, r4
 8004134:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004138:	4621      	mov	r1, r4
 800413a:	024a      	lsls	r2, r1, #9
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004142:	2200      	movs	r2, #0
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800414c:	f7fc fd46 	bl	8000bdc <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4613      	mov	r3, r2
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	e058      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415a:	4b38      	ldr	r3, [pc, #224]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	2200      	movs	r2, #0
 8004162:	4618      	mov	r0, r3
 8004164:	4611      	mov	r1, r2
 8004166:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	0159      	lsls	r1, r3, #5
 8004182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004186:	0150      	lsls	r0, r2, #5
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4641      	mov	r1, r8
 800418e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004192:	4649      	mov	r1, r9
 8004194:	eb63 0b01 	sbc.w	fp, r3, r1
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041ac:	ebb2 040a 	subs.w	r4, r2, sl
 80041b0:	eb63 050b 	sbc.w	r5, r3, fp
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	00eb      	lsls	r3, r5, #3
 80041be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041c2:	00e2      	lsls	r2, r4, #3
 80041c4:	4614      	mov	r4, r2
 80041c6:	461d      	mov	r5, r3
 80041c8:	4643      	mov	r3, r8
 80041ca:	18e3      	adds	r3, r4, r3
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	464b      	mov	r3, r9
 80041d0:	eb45 0303 	adc.w	r3, r5, r3
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041e2:	4629      	mov	r1, r5
 80041e4:	028b      	lsls	r3, r1, #10
 80041e6:	4621      	mov	r1, r4
 80041e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041ec:	4621      	mov	r1, r4
 80041ee:	028a      	lsls	r2, r1, #10
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f6:	2200      	movs	r2, #0
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	61fa      	str	r2, [r7, #28]
 80041fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004200:	f7fc fcec 	bl	8000bdc <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4613      	mov	r3, r2
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	3301      	adds	r3, #1
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800421c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800421e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004226:	e002      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCC_GetSysClockFreq+0x204>)
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800422c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004230:	4618      	mov	r0, r3
 8004232:	3750      	adds	r7, #80	; 0x50
 8004234:	46bd      	mov	sp, r7
 8004236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	00f42400 	.word	0x00f42400
 8004244:	007a1200 	.word	0x007a1200

08004248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_RCC_GetHCLKFreq+0x14>)
 800424e:	681b      	ldr	r3, [r3, #0]
}
 8004250:	4618      	mov	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000000 	.word	0x20000000

08004260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004264:	f7ff fff0 	bl	8004248 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0a9b      	lsrs	r3, r3, #10
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	; (8004284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	080069e4 	.word	0x080069e4

08004288 <__errno>:
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <__errno+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000020 	.word	0x20000020

08004294 <__libc_init_array>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4d0d      	ldr	r5, [pc, #52]	; (80042cc <__libc_init_array+0x38>)
 8004298:	4c0d      	ldr	r4, [pc, #52]	; (80042d0 <__libc_init_array+0x3c>)
 800429a:	1b64      	subs	r4, r4, r5
 800429c:	10a4      	asrs	r4, r4, #2
 800429e:	2600      	movs	r6, #0
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	d109      	bne.n	80042b8 <__libc_init_array+0x24>
 80042a4:	4d0b      	ldr	r5, [pc, #44]	; (80042d4 <__libc_init_array+0x40>)
 80042a6:	4c0c      	ldr	r4, [pc, #48]	; (80042d8 <__libc_init_array+0x44>)
 80042a8:	f002 fb34 	bl	8006914 <_init>
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	2600      	movs	r6, #0
 80042b2:	42a6      	cmp	r6, r4
 80042b4:	d105      	bne.n	80042c2 <__libc_init_array+0x2e>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042bc:	4798      	blx	r3
 80042be:	3601      	adds	r6, #1
 80042c0:	e7ee      	b.n	80042a0 <__libc_init_array+0xc>
 80042c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c6:	4798      	blx	r3
 80042c8:	3601      	adds	r6, #1
 80042ca:	e7f2      	b.n	80042b2 <__libc_init_array+0x1e>
 80042cc:	08008240 	.word	0x08008240
 80042d0:	08008240 	.word	0x08008240
 80042d4:	08008240 	.word	0x08008240
 80042d8:	08008244 	.word	0x08008244

080042dc <__itoa>:
 80042dc:	1e93      	subs	r3, r2, #2
 80042de:	2b22      	cmp	r3, #34	; 0x22
 80042e0:	b510      	push	{r4, lr}
 80042e2:	460c      	mov	r4, r1
 80042e4:	d904      	bls.n	80042f0 <__itoa+0x14>
 80042e6:	2300      	movs	r3, #0
 80042e8:	700b      	strb	r3, [r1, #0]
 80042ea:	461c      	mov	r4, r3
 80042ec:	4620      	mov	r0, r4
 80042ee:	bd10      	pop	{r4, pc}
 80042f0:	2a0a      	cmp	r2, #10
 80042f2:	d109      	bne.n	8004308 <__itoa+0x2c>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	da07      	bge.n	8004308 <__itoa+0x2c>
 80042f8:	232d      	movs	r3, #45	; 0x2d
 80042fa:	700b      	strb	r3, [r1, #0]
 80042fc:	4240      	negs	r0, r0
 80042fe:	2101      	movs	r1, #1
 8004300:	4421      	add	r1, r4
 8004302:	f000 f889 	bl	8004418 <__utoa>
 8004306:	e7f1      	b.n	80042ec <__itoa+0x10>
 8004308:	2100      	movs	r1, #0
 800430a:	e7f9      	b.n	8004300 <__itoa+0x24>

0800430c <itoa>:
 800430c:	f7ff bfe6 	b.w	80042dc <__itoa>

08004310 <memset>:
 8004310:	4402      	add	r2, r0
 8004312:	4603      	mov	r3, r0
 8004314:	4293      	cmp	r3, r2
 8004316:	d100      	bne.n	800431a <memset+0xa>
 8004318:	4770      	bx	lr
 800431a:	f803 1b01 	strb.w	r1, [r3], #1
 800431e:	e7f9      	b.n	8004314 <memset+0x4>

08004320 <srand>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <srand+0x44>)
 8004324:	681d      	ldr	r5, [r3, #0]
 8004326:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004328:	4604      	mov	r4, r0
 800432a:	b9b3      	cbnz	r3, 800435a <srand+0x3a>
 800432c:	2018      	movs	r0, #24
 800432e:	f000 f8e5 	bl	80044fc <malloc>
 8004332:	4602      	mov	r2, r0
 8004334:	63a8      	str	r0, [r5, #56]	; 0x38
 8004336:	b920      	cbnz	r0, 8004342 <srand+0x22>
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <srand+0x48>)
 800433a:	480c      	ldr	r0, [pc, #48]	; (800436c <srand+0x4c>)
 800433c:	2142      	movs	r1, #66	; 0x42
 800433e:	f000 f8ad 	bl	800449c <__assert_func>
 8004342:	490b      	ldr	r1, [pc, #44]	; (8004370 <srand+0x50>)
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <srand+0x54>)
 8004346:	e9c0 1300 	strd	r1, r3, [r0]
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <srand+0x58>)
 800434c:	6083      	str	r3, [r0, #8]
 800434e:	230b      	movs	r3, #11
 8004350:	8183      	strh	r3, [r0, #12]
 8004352:	2100      	movs	r1, #0
 8004354:	2001      	movs	r0, #1
 8004356:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800435a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800435c:	2200      	movs	r2, #0
 800435e:	611c      	str	r4, [r3, #16]
 8004360:	615a      	str	r2, [r3, #20]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	20000020 	.word	0x20000020
 8004368:	08007eb8 	.word	0x08007eb8
 800436c:	08007ecf 	.word	0x08007ecf
 8004370:	abcd330e 	.word	0xabcd330e
 8004374:	e66d1234 	.word	0xe66d1234
 8004378:	0005deec 	.word	0x0005deec

0800437c <rand>:
 800437c:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <rand+0x5c>)
 800437e:	b510      	push	{r4, lr}
 8004380:	681c      	ldr	r4, [r3, #0]
 8004382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004384:	b9b3      	cbnz	r3, 80043b4 <rand+0x38>
 8004386:	2018      	movs	r0, #24
 8004388:	f000 f8b8 	bl	80044fc <malloc>
 800438c:	63a0      	str	r0, [r4, #56]	; 0x38
 800438e:	b928      	cbnz	r0, 800439c <rand+0x20>
 8004390:	4602      	mov	r2, r0
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <rand+0x60>)
 8004394:	4812      	ldr	r0, [pc, #72]	; (80043e0 <rand+0x64>)
 8004396:	214e      	movs	r1, #78	; 0x4e
 8004398:	f000 f880 	bl	800449c <__assert_func>
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <rand+0x68>)
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <rand+0x6c>)
 80043a0:	e9c0 2300 	strd	r2, r3, [r0]
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <rand+0x70>)
 80043a6:	6083      	str	r3, [r0, #8]
 80043a8:	230b      	movs	r3, #11
 80043aa:	8183      	strh	r3, [r0, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	2300      	movs	r3, #0
 80043b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80043b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80043b6:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <rand+0x74>)
 80043b8:	6920      	ldr	r0, [r4, #16]
 80043ba:	6963      	ldr	r3, [r4, #20]
 80043bc:	490d      	ldr	r1, [pc, #52]	; (80043f4 <rand+0x78>)
 80043be:	4342      	muls	r2, r0
 80043c0:	fb01 2203 	mla	r2, r1, r3, r2
 80043c4:	fba0 0101 	umull	r0, r1, r0, r1
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	eb42 0001 	adc.w	r0, r2, r1
 80043ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80043d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80043d6:	bd10      	pop	{r4, pc}
 80043d8:	20000020 	.word	0x20000020
 80043dc:	08007eb8 	.word	0x08007eb8
 80043e0:	08007ecf 	.word	0x08007ecf
 80043e4:	abcd330e 	.word	0xabcd330e
 80043e8:	e66d1234 	.word	0xe66d1234
 80043ec:	0005deec 	.word	0x0005deec
 80043f0:	5851f42d 	.word	0x5851f42d
 80043f4:	4c957f2d 	.word	0x4c957f2d

080043f8 <strcat>:
 80043f8:	b510      	push	{r4, lr}
 80043fa:	4602      	mov	r2, r0
 80043fc:	7814      	ldrb	r4, [r2, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	3201      	adds	r2, #1
 8004402:	2c00      	cmp	r4, #0
 8004404:	d1fa      	bne.n	80043fc <strcat+0x4>
 8004406:	3b01      	subs	r3, #1
 8004408:	f811 2b01 	ldrb.w	r2, [r1], #1
 800440c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004410:	2a00      	cmp	r2, #0
 8004412:	d1f9      	bne.n	8004408 <strcat+0x10>
 8004414:	bd10      	pop	{r4, pc}
	...

08004418 <__utoa>:
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	4c1f      	ldr	r4, [pc, #124]	; (8004498 <__utoa+0x80>)
 800441c:	b08b      	sub	sp, #44	; 0x2c
 800441e:	4605      	mov	r5, r0
 8004420:	460b      	mov	r3, r1
 8004422:	466e      	mov	r6, sp
 8004424:	f104 0c20 	add.w	ip, r4, #32
 8004428:	6820      	ldr	r0, [r4, #0]
 800442a:	6861      	ldr	r1, [r4, #4]
 800442c:	4637      	mov	r7, r6
 800442e:	c703      	stmia	r7!, {r0, r1}
 8004430:	3408      	adds	r4, #8
 8004432:	4564      	cmp	r4, ip
 8004434:	463e      	mov	r6, r7
 8004436:	d1f7      	bne.n	8004428 <__utoa+0x10>
 8004438:	7921      	ldrb	r1, [r4, #4]
 800443a:	7139      	strb	r1, [r7, #4]
 800443c:	1e91      	subs	r1, r2, #2
 800443e:	6820      	ldr	r0, [r4, #0]
 8004440:	6038      	str	r0, [r7, #0]
 8004442:	2922      	cmp	r1, #34	; 0x22
 8004444:	f04f 0100 	mov.w	r1, #0
 8004448:	d904      	bls.n	8004454 <__utoa+0x3c>
 800444a:	7019      	strb	r1, [r3, #0]
 800444c:	460b      	mov	r3, r1
 800444e:	4618      	mov	r0, r3
 8004450:	b00b      	add	sp, #44	; 0x2c
 8004452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004454:	1e58      	subs	r0, r3, #1
 8004456:	4684      	mov	ip, r0
 8004458:	fbb5 f7f2 	udiv	r7, r5, r2
 800445c:	fb02 5617 	mls	r6, r2, r7, r5
 8004460:	3628      	adds	r6, #40	; 0x28
 8004462:	446e      	add	r6, sp
 8004464:	460c      	mov	r4, r1
 8004466:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800446a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800446e:	462e      	mov	r6, r5
 8004470:	42b2      	cmp	r2, r6
 8004472:	f101 0101 	add.w	r1, r1, #1
 8004476:	463d      	mov	r5, r7
 8004478:	d9ee      	bls.n	8004458 <__utoa+0x40>
 800447a:	2200      	movs	r2, #0
 800447c:	545a      	strb	r2, [r3, r1]
 800447e:	1919      	adds	r1, r3, r4
 8004480:	1aa5      	subs	r5, r4, r2
 8004482:	42aa      	cmp	r2, r5
 8004484:	dae3      	bge.n	800444e <__utoa+0x36>
 8004486:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800448a:	780e      	ldrb	r6, [r1, #0]
 800448c:	7006      	strb	r6, [r0, #0]
 800448e:	3201      	adds	r2, #1
 8004490:	f801 5901 	strb.w	r5, [r1], #-1
 8004494:	e7f4      	b.n	8004480 <__utoa+0x68>
 8004496:	bf00      	nop
 8004498:	08007f2a 	.word	0x08007f2a

0800449c <__assert_func>:
 800449c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800449e:	4614      	mov	r4, r2
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <__assert_func+0x2c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4605      	mov	r5, r0
 80044a8:	68d8      	ldr	r0, [r3, #12]
 80044aa:	b14c      	cbz	r4, 80044c0 <__assert_func+0x24>
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <__assert_func+0x30>)
 80044ae:	9100      	str	r1, [sp, #0]
 80044b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044b4:	4906      	ldr	r1, [pc, #24]	; (80044d0 <__assert_func+0x34>)
 80044b6:	462b      	mov	r3, r5
 80044b8:	f000 f80e 	bl	80044d8 <fiprintf>
 80044bc:	f000 fcc4 	bl	8004e48 <abort>
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <__assert_func+0x38>)
 80044c2:	461c      	mov	r4, r3
 80044c4:	e7f3      	b.n	80044ae <__assert_func+0x12>
 80044c6:	bf00      	nop
 80044c8:	20000020 	.word	0x20000020
 80044cc:	08007f4f 	.word	0x08007f4f
 80044d0:	08007f5c 	.word	0x08007f5c
 80044d4:	08007f8a 	.word	0x08007f8a

080044d8 <fiprintf>:
 80044d8:	b40e      	push	{r1, r2, r3}
 80044da:	b503      	push	{r0, r1, lr}
 80044dc:	4601      	mov	r1, r0
 80044de:	ab03      	add	r3, sp, #12
 80044e0:	4805      	ldr	r0, [pc, #20]	; (80044f8 <fiprintf+0x20>)
 80044e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80044e6:	6800      	ldr	r0, [r0, #0]
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	f000 f919 	bl	8004720 <_vfiprintf_r>
 80044ee:	b002      	add	sp, #8
 80044f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044f4:	b003      	add	sp, #12
 80044f6:	4770      	bx	lr
 80044f8:	20000020 	.word	0x20000020

080044fc <malloc>:
 80044fc:	4b02      	ldr	r3, [pc, #8]	; (8004508 <malloc+0xc>)
 80044fe:	4601      	mov	r1, r0
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	f000 b86f 	b.w	80045e4 <_malloc_r>
 8004506:	bf00      	nop
 8004508:	20000020 	.word	0x20000020

0800450c <_free_r>:
 800450c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800450e:	2900      	cmp	r1, #0
 8004510:	d044      	beq.n	800459c <_free_r+0x90>
 8004512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004516:	9001      	str	r0, [sp, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f1a1 0404 	sub.w	r4, r1, #4
 800451e:	bfb8      	it	lt
 8004520:	18e4      	addlt	r4, r4, r3
 8004522:	f000 feb9 	bl	8005298 <__malloc_lock>
 8004526:	4a1e      	ldr	r2, [pc, #120]	; (80045a0 <_free_r+0x94>)
 8004528:	9801      	ldr	r0, [sp, #4]
 800452a:	6813      	ldr	r3, [r2, #0]
 800452c:	b933      	cbnz	r3, 800453c <_free_r+0x30>
 800452e:	6063      	str	r3, [r4, #4]
 8004530:	6014      	str	r4, [r2, #0]
 8004532:	b003      	add	sp, #12
 8004534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004538:	f000 beb4 	b.w	80052a4 <__malloc_unlock>
 800453c:	42a3      	cmp	r3, r4
 800453e:	d908      	bls.n	8004552 <_free_r+0x46>
 8004540:	6825      	ldr	r5, [r4, #0]
 8004542:	1961      	adds	r1, r4, r5
 8004544:	428b      	cmp	r3, r1
 8004546:	bf01      	itttt	eq
 8004548:	6819      	ldreq	r1, [r3, #0]
 800454a:	685b      	ldreq	r3, [r3, #4]
 800454c:	1949      	addeq	r1, r1, r5
 800454e:	6021      	streq	r1, [r4, #0]
 8004550:	e7ed      	b.n	800452e <_free_r+0x22>
 8004552:	461a      	mov	r2, r3
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b10b      	cbz	r3, 800455c <_free_r+0x50>
 8004558:	42a3      	cmp	r3, r4
 800455a:	d9fa      	bls.n	8004552 <_free_r+0x46>
 800455c:	6811      	ldr	r1, [r2, #0]
 800455e:	1855      	adds	r5, r2, r1
 8004560:	42a5      	cmp	r5, r4
 8004562:	d10b      	bne.n	800457c <_free_r+0x70>
 8004564:	6824      	ldr	r4, [r4, #0]
 8004566:	4421      	add	r1, r4
 8004568:	1854      	adds	r4, r2, r1
 800456a:	42a3      	cmp	r3, r4
 800456c:	6011      	str	r1, [r2, #0]
 800456e:	d1e0      	bne.n	8004532 <_free_r+0x26>
 8004570:	681c      	ldr	r4, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	6053      	str	r3, [r2, #4]
 8004576:	4421      	add	r1, r4
 8004578:	6011      	str	r1, [r2, #0]
 800457a:	e7da      	b.n	8004532 <_free_r+0x26>
 800457c:	d902      	bls.n	8004584 <_free_r+0x78>
 800457e:	230c      	movs	r3, #12
 8004580:	6003      	str	r3, [r0, #0]
 8004582:	e7d6      	b.n	8004532 <_free_r+0x26>
 8004584:	6825      	ldr	r5, [r4, #0]
 8004586:	1961      	adds	r1, r4, r5
 8004588:	428b      	cmp	r3, r1
 800458a:	bf04      	itt	eq
 800458c:	6819      	ldreq	r1, [r3, #0]
 800458e:	685b      	ldreq	r3, [r3, #4]
 8004590:	6063      	str	r3, [r4, #4]
 8004592:	bf04      	itt	eq
 8004594:	1949      	addeq	r1, r1, r5
 8004596:	6021      	streq	r1, [r4, #0]
 8004598:	6054      	str	r4, [r2, #4]
 800459a:	e7ca      	b.n	8004532 <_free_r+0x26>
 800459c:	b003      	add	sp, #12
 800459e:	bd30      	pop	{r4, r5, pc}
 80045a0:	20000544 	.word	0x20000544

080045a4 <sbrk_aligned>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4e0e      	ldr	r6, [pc, #56]	; (80045e0 <sbrk_aligned+0x3c>)
 80045a8:	460c      	mov	r4, r1
 80045aa:	6831      	ldr	r1, [r6, #0]
 80045ac:	4605      	mov	r5, r0
 80045ae:	b911      	cbnz	r1, 80045b6 <sbrk_aligned+0x12>
 80045b0:	f000 fb7a 	bl	8004ca8 <_sbrk_r>
 80045b4:	6030      	str	r0, [r6, #0]
 80045b6:	4621      	mov	r1, r4
 80045b8:	4628      	mov	r0, r5
 80045ba:	f000 fb75 	bl	8004ca8 <_sbrk_r>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	d00a      	beq.n	80045d8 <sbrk_aligned+0x34>
 80045c2:	1cc4      	adds	r4, r0, #3
 80045c4:	f024 0403 	bic.w	r4, r4, #3
 80045c8:	42a0      	cmp	r0, r4
 80045ca:	d007      	beq.n	80045dc <sbrk_aligned+0x38>
 80045cc:	1a21      	subs	r1, r4, r0
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 fb6a 	bl	8004ca8 <_sbrk_r>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d101      	bne.n	80045dc <sbrk_aligned+0x38>
 80045d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045dc:	4620      	mov	r0, r4
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	20000548 	.word	0x20000548

080045e4 <_malloc_r>:
 80045e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e8:	1ccd      	adds	r5, r1, #3
 80045ea:	f025 0503 	bic.w	r5, r5, #3
 80045ee:	3508      	adds	r5, #8
 80045f0:	2d0c      	cmp	r5, #12
 80045f2:	bf38      	it	cc
 80045f4:	250c      	movcc	r5, #12
 80045f6:	2d00      	cmp	r5, #0
 80045f8:	4607      	mov	r7, r0
 80045fa:	db01      	blt.n	8004600 <_malloc_r+0x1c>
 80045fc:	42a9      	cmp	r1, r5
 80045fe:	d905      	bls.n	800460c <_malloc_r+0x28>
 8004600:	230c      	movs	r3, #12
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	2600      	movs	r6, #0
 8004606:	4630      	mov	r0, r6
 8004608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800460c:	4e2e      	ldr	r6, [pc, #184]	; (80046c8 <_malloc_r+0xe4>)
 800460e:	f000 fe43 	bl	8005298 <__malloc_lock>
 8004612:	6833      	ldr	r3, [r6, #0]
 8004614:	461c      	mov	r4, r3
 8004616:	bb34      	cbnz	r4, 8004666 <_malloc_r+0x82>
 8004618:	4629      	mov	r1, r5
 800461a:	4638      	mov	r0, r7
 800461c:	f7ff ffc2 	bl	80045a4 <sbrk_aligned>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	4604      	mov	r4, r0
 8004624:	d14d      	bne.n	80046c2 <_malloc_r+0xde>
 8004626:	6834      	ldr	r4, [r6, #0]
 8004628:	4626      	mov	r6, r4
 800462a:	2e00      	cmp	r6, #0
 800462c:	d140      	bne.n	80046b0 <_malloc_r+0xcc>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	4631      	mov	r1, r6
 8004632:	4638      	mov	r0, r7
 8004634:	eb04 0803 	add.w	r8, r4, r3
 8004638:	f000 fb36 	bl	8004ca8 <_sbrk_r>
 800463c:	4580      	cmp	r8, r0
 800463e:	d13a      	bne.n	80046b6 <_malloc_r+0xd2>
 8004640:	6821      	ldr	r1, [r4, #0]
 8004642:	3503      	adds	r5, #3
 8004644:	1a6d      	subs	r5, r5, r1
 8004646:	f025 0503 	bic.w	r5, r5, #3
 800464a:	3508      	adds	r5, #8
 800464c:	2d0c      	cmp	r5, #12
 800464e:	bf38      	it	cc
 8004650:	250c      	movcc	r5, #12
 8004652:	4629      	mov	r1, r5
 8004654:	4638      	mov	r0, r7
 8004656:	f7ff ffa5 	bl	80045a4 <sbrk_aligned>
 800465a:	3001      	adds	r0, #1
 800465c:	d02b      	beq.n	80046b6 <_malloc_r+0xd2>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	442b      	add	r3, r5
 8004662:	6023      	str	r3, [r4, #0]
 8004664:	e00e      	b.n	8004684 <_malloc_r+0xa0>
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	1b52      	subs	r2, r2, r5
 800466a:	d41e      	bmi.n	80046aa <_malloc_r+0xc6>
 800466c:	2a0b      	cmp	r2, #11
 800466e:	d916      	bls.n	800469e <_malloc_r+0xba>
 8004670:	1961      	adds	r1, r4, r5
 8004672:	42a3      	cmp	r3, r4
 8004674:	6025      	str	r5, [r4, #0]
 8004676:	bf18      	it	ne
 8004678:	6059      	strne	r1, [r3, #4]
 800467a:	6863      	ldr	r3, [r4, #4]
 800467c:	bf08      	it	eq
 800467e:	6031      	streq	r1, [r6, #0]
 8004680:	5162      	str	r2, [r4, r5]
 8004682:	604b      	str	r3, [r1, #4]
 8004684:	4638      	mov	r0, r7
 8004686:	f104 060b 	add.w	r6, r4, #11
 800468a:	f000 fe0b 	bl	80052a4 <__malloc_unlock>
 800468e:	f026 0607 	bic.w	r6, r6, #7
 8004692:	1d23      	adds	r3, r4, #4
 8004694:	1af2      	subs	r2, r6, r3
 8004696:	d0b6      	beq.n	8004606 <_malloc_r+0x22>
 8004698:	1b9b      	subs	r3, r3, r6
 800469a:	50a3      	str	r3, [r4, r2]
 800469c:	e7b3      	b.n	8004606 <_malloc_r+0x22>
 800469e:	6862      	ldr	r2, [r4, #4]
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	bf0c      	ite	eq
 80046a4:	6032      	streq	r2, [r6, #0]
 80046a6:	605a      	strne	r2, [r3, #4]
 80046a8:	e7ec      	b.n	8004684 <_malloc_r+0xa0>
 80046aa:	4623      	mov	r3, r4
 80046ac:	6864      	ldr	r4, [r4, #4]
 80046ae:	e7b2      	b.n	8004616 <_malloc_r+0x32>
 80046b0:	4634      	mov	r4, r6
 80046b2:	6876      	ldr	r6, [r6, #4]
 80046b4:	e7b9      	b.n	800462a <_malloc_r+0x46>
 80046b6:	230c      	movs	r3, #12
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4638      	mov	r0, r7
 80046bc:	f000 fdf2 	bl	80052a4 <__malloc_unlock>
 80046c0:	e7a1      	b.n	8004606 <_malloc_r+0x22>
 80046c2:	6025      	str	r5, [r4, #0]
 80046c4:	e7de      	b.n	8004684 <_malloc_r+0xa0>
 80046c6:	bf00      	nop
 80046c8:	20000544 	.word	0x20000544

080046cc <__sfputc_r>:
 80046cc:	6893      	ldr	r3, [r2, #8]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	b410      	push	{r4}
 80046d4:	6093      	str	r3, [r2, #8]
 80046d6:	da08      	bge.n	80046ea <__sfputc_r+0x1e>
 80046d8:	6994      	ldr	r4, [r2, #24]
 80046da:	42a3      	cmp	r3, r4
 80046dc:	db01      	blt.n	80046e2 <__sfputc_r+0x16>
 80046de:	290a      	cmp	r1, #10
 80046e0:	d103      	bne.n	80046ea <__sfputc_r+0x1e>
 80046e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046e6:	f000 baef 	b.w	8004cc8 <__swbuf_r>
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	1c58      	adds	r0, r3, #1
 80046ee:	6010      	str	r0, [r2, #0]
 80046f0:	7019      	strb	r1, [r3, #0]
 80046f2:	4608      	mov	r0, r1
 80046f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <__sfputs_r>:
 80046fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fc:	4606      	mov	r6, r0
 80046fe:	460f      	mov	r7, r1
 8004700:	4614      	mov	r4, r2
 8004702:	18d5      	adds	r5, r2, r3
 8004704:	42ac      	cmp	r4, r5
 8004706:	d101      	bne.n	800470c <__sfputs_r+0x12>
 8004708:	2000      	movs	r0, #0
 800470a:	e007      	b.n	800471c <__sfputs_r+0x22>
 800470c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004710:	463a      	mov	r2, r7
 8004712:	4630      	mov	r0, r6
 8004714:	f7ff ffda 	bl	80046cc <__sfputc_r>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d1f3      	bne.n	8004704 <__sfputs_r+0xa>
 800471c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004720 <_vfiprintf_r>:
 8004720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004724:	460d      	mov	r5, r1
 8004726:	b09d      	sub	sp, #116	; 0x74
 8004728:	4614      	mov	r4, r2
 800472a:	4698      	mov	r8, r3
 800472c:	4606      	mov	r6, r0
 800472e:	b118      	cbz	r0, 8004738 <_vfiprintf_r+0x18>
 8004730:	6983      	ldr	r3, [r0, #24]
 8004732:	b90b      	cbnz	r3, 8004738 <_vfiprintf_r+0x18>
 8004734:	f000 fcaa 	bl	800508c <__sinit>
 8004738:	4b89      	ldr	r3, [pc, #548]	; (8004960 <_vfiprintf_r+0x240>)
 800473a:	429d      	cmp	r5, r3
 800473c:	d11b      	bne.n	8004776 <_vfiprintf_r+0x56>
 800473e:	6875      	ldr	r5, [r6, #4]
 8004740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004742:	07d9      	lsls	r1, r3, #31
 8004744:	d405      	bmi.n	8004752 <_vfiprintf_r+0x32>
 8004746:	89ab      	ldrh	r3, [r5, #12]
 8004748:	059a      	lsls	r2, r3, #22
 800474a:	d402      	bmi.n	8004752 <_vfiprintf_r+0x32>
 800474c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800474e:	f000 fd3b 	bl	80051c8 <__retarget_lock_acquire_recursive>
 8004752:	89ab      	ldrh	r3, [r5, #12]
 8004754:	071b      	lsls	r3, r3, #28
 8004756:	d501      	bpl.n	800475c <_vfiprintf_r+0x3c>
 8004758:	692b      	ldr	r3, [r5, #16]
 800475a:	b9eb      	cbnz	r3, 8004798 <_vfiprintf_r+0x78>
 800475c:	4629      	mov	r1, r5
 800475e:	4630      	mov	r0, r6
 8004760:	f000 fb04 	bl	8004d6c <__swsetup_r>
 8004764:	b1c0      	cbz	r0, 8004798 <_vfiprintf_r+0x78>
 8004766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004768:	07dc      	lsls	r4, r3, #31
 800476a:	d50e      	bpl.n	800478a <_vfiprintf_r+0x6a>
 800476c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004770:	b01d      	add	sp, #116	; 0x74
 8004772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004776:	4b7b      	ldr	r3, [pc, #492]	; (8004964 <_vfiprintf_r+0x244>)
 8004778:	429d      	cmp	r5, r3
 800477a:	d101      	bne.n	8004780 <_vfiprintf_r+0x60>
 800477c:	68b5      	ldr	r5, [r6, #8]
 800477e:	e7df      	b.n	8004740 <_vfiprintf_r+0x20>
 8004780:	4b79      	ldr	r3, [pc, #484]	; (8004968 <_vfiprintf_r+0x248>)
 8004782:	429d      	cmp	r5, r3
 8004784:	bf08      	it	eq
 8004786:	68f5      	ldreq	r5, [r6, #12]
 8004788:	e7da      	b.n	8004740 <_vfiprintf_r+0x20>
 800478a:	89ab      	ldrh	r3, [r5, #12]
 800478c:	0598      	lsls	r0, r3, #22
 800478e:	d4ed      	bmi.n	800476c <_vfiprintf_r+0x4c>
 8004790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004792:	f000 fd1a 	bl	80051ca <__retarget_lock_release_recursive>
 8004796:	e7e9      	b.n	800476c <_vfiprintf_r+0x4c>
 8004798:	2300      	movs	r3, #0
 800479a:	9309      	str	r3, [sp, #36]	; 0x24
 800479c:	2320      	movs	r3, #32
 800479e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047a6:	2330      	movs	r3, #48	; 0x30
 80047a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800496c <_vfiprintf_r+0x24c>
 80047ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b0:	f04f 0901 	mov.w	r9, #1
 80047b4:	4623      	mov	r3, r4
 80047b6:	469a      	mov	sl, r3
 80047b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047bc:	b10a      	cbz	r2, 80047c2 <_vfiprintf_r+0xa2>
 80047be:	2a25      	cmp	r2, #37	; 0x25
 80047c0:	d1f9      	bne.n	80047b6 <_vfiprintf_r+0x96>
 80047c2:	ebba 0b04 	subs.w	fp, sl, r4
 80047c6:	d00b      	beq.n	80047e0 <_vfiprintf_r+0xc0>
 80047c8:	465b      	mov	r3, fp
 80047ca:	4622      	mov	r2, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	4630      	mov	r0, r6
 80047d0:	f7ff ff93 	bl	80046fa <__sfputs_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	f000 80aa 	beq.w	800492e <_vfiprintf_r+0x20e>
 80047da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047dc:	445a      	add	r2, fp
 80047de:	9209      	str	r2, [sp, #36]	; 0x24
 80047e0:	f89a 3000 	ldrb.w	r3, [sl]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80a2 	beq.w	800492e <_vfiprintf_r+0x20e>
 80047ea:	2300      	movs	r3, #0
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047f4:	f10a 0a01 	add.w	sl, sl, #1
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	9307      	str	r3, [sp, #28]
 80047fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004800:	931a      	str	r3, [sp, #104]	; 0x68
 8004802:	4654      	mov	r4, sl
 8004804:	2205      	movs	r2, #5
 8004806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480a:	4858      	ldr	r0, [pc, #352]	; (800496c <_vfiprintf_r+0x24c>)
 800480c:	f7fb fcf8 	bl	8000200 <memchr>
 8004810:	9a04      	ldr	r2, [sp, #16]
 8004812:	b9d8      	cbnz	r0, 800484c <_vfiprintf_r+0x12c>
 8004814:	06d1      	lsls	r1, r2, #27
 8004816:	bf44      	itt	mi
 8004818:	2320      	movmi	r3, #32
 800481a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800481e:	0713      	lsls	r3, r2, #28
 8004820:	bf44      	itt	mi
 8004822:	232b      	movmi	r3, #43	; 0x2b
 8004824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004828:	f89a 3000 	ldrb.w	r3, [sl]
 800482c:	2b2a      	cmp	r3, #42	; 0x2a
 800482e:	d015      	beq.n	800485c <_vfiprintf_r+0x13c>
 8004830:	9a07      	ldr	r2, [sp, #28]
 8004832:	4654      	mov	r4, sl
 8004834:	2000      	movs	r0, #0
 8004836:	f04f 0c0a 	mov.w	ip, #10
 800483a:	4621      	mov	r1, r4
 800483c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004840:	3b30      	subs	r3, #48	; 0x30
 8004842:	2b09      	cmp	r3, #9
 8004844:	d94e      	bls.n	80048e4 <_vfiprintf_r+0x1c4>
 8004846:	b1b0      	cbz	r0, 8004876 <_vfiprintf_r+0x156>
 8004848:	9207      	str	r2, [sp, #28]
 800484a:	e014      	b.n	8004876 <_vfiprintf_r+0x156>
 800484c:	eba0 0308 	sub.w	r3, r0, r8
 8004850:	fa09 f303 	lsl.w	r3, r9, r3
 8004854:	4313      	orrs	r3, r2
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	46a2      	mov	sl, r4
 800485a:	e7d2      	b.n	8004802 <_vfiprintf_r+0xe2>
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	1d19      	adds	r1, r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	9103      	str	r1, [sp, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	bfbb      	ittet	lt
 8004868:	425b      	neglt	r3, r3
 800486a:	f042 0202 	orrlt.w	r2, r2, #2
 800486e:	9307      	strge	r3, [sp, #28]
 8004870:	9307      	strlt	r3, [sp, #28]
 8004872:	bfb8      	it	lt
 8004874:	9204      	strlt	r2, [sp, #16]
 8004876:	7823      	ldrb	r3, [r4, #0]
 8004878:	2b2e      	cmp	r3, #46	; 0x2e
 800487a:	d10c      	bne.n	8004896 <_vfiprintf_r+0x176>
 800487c:	7863      	ldrb	r3, [r4, #1]
 800487e:	2b2a      	cmp	r3, #42	; 0x2a
 8004880:	d135      	bne.n	80048ee <_vfiprintf_r+0x1ce>
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	1d1a      	adds	r2, r3, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	9203      	str	r2, [sp, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfb8      	it	lt
 800488e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004892:	3402      	adds	r4, #2
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800497c <_vfiprintf_r+0x25c>
 800489a:	7821      	ldrb	r1, [r4, #0]
 800489c:	2203      	movs	r2, #3
 800489e:	4650      	mov	r0, sl
 80048a0:	f7fb fcae 	bl	8000200 <memchr>
 80048a4:	b140      	cbz	r0, 80048b8 <_vfiprintf_r+0x198>
 80048a6:	2340      	movs	r3, #64	; 0x40
 80048a8:	eba0 000a 	sub.w	r0, r0, sl
 80048ac:	fa03 f000 	lsl.w	r0, r3, r0
 80048b0:	9b04      	ldr	r3, [sp, #16]
 80048b2:	4303      	orrs	r3, r0
 80048b4:	3401      	adds	r4, #1
 80048b6:	9304      	str	r3, [sp, #16]
 80048b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048bc:	482c      	ldr	r0, [pc, #176]	; (8004970 <_vfiprintf_r+0x250>)
 80048be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048c2:	2206      	movs	r2, #6
 80048c4:	f7fb fc9c 	bl	8000200 <memchr>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d03f      	beq.n	800494c <_vfiprintf_r+0x22c>
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <_vfiprintf_r+0x254>)
 80048ce:	bb1b      	cbnz	r3, 8004918 <_vfiprintf_r+0x1f8>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	3307      	adds	r3, #7
 80048d4:	f023 0307 	bic.w	r3, r3, #7
 80048d8:	3308      	adds	r3, #8
 80048da:	9303      	str	r3, [sp, #12]
 80048dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048de:	443b      	add	r3, r7
 80048e0:	9309      	str	r3, [sp, #36]	; 0x24
 80048e2:	e767      	b.n	80047b4 <_vfiprintf_r+0x94>
 80048e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048e8:	460c      	mov	r4, r1
 80048ea:	2001      	movs	r0, #1
 80048ec:	e7a5      	b.n	800483a <_vfiprintf_r+0x11a>
 80048ee:	2300      	movs	r3, #0
 80048f0:	3401      	adds	r4, #1
 80048f2:	9305      	str	r3, [sp, #20]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f04f 0c0a 	mov.w	ip, #10
 80048fa:	4620      	mov	r0, r4
 80048fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004900:	3a30      	subs	r2, #48	; 0x30
 8004902:	2a09      	cmp	r2, #9
 8004904:	d903      	bls.n	800490e <_vfiprintf_r+0x1ee>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0c5      	beq.n	8004896 <_vfiprintf_r+0x176>
 800490a:	9105      	str	r1, [sp, #20]
 800490c:	e7c3      	b.n	8004896 <_vfiprintf_r+0x176>
 800490e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004912:	4604      	mov	r4, r0
 8004914:	2301      	movs	r3, #1
 8004916:	e7f0      	b.n	80048fa <_vfiprintf_r+0x1da>
 8004918:	ab03      	add	r3, sp, #12
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	462a      	mov	r2, r5
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <_vfiprintf_r+0x258>)
 8004920:	a904      	add	r1, sp, #16
 8004922:	4630      	mov	r0, r6
 8004924:	f3af 8000 	nop.w
 8004928:	4607      	mov	r7, r0
 800492a:	1c78      	adds	r0, r7, #1
 800492c:	d1d6      	bne.n	80048dc <_vfiprintf_r+0x1bc>
 800492e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004930:	07d9      	lsls	r1, r3, #31
 8004932:	d405      	bmi.n	8004940 <_vfiprintf_r+0x220>
 8004934:	89ab      	ldrh	r3, [r5, #12]
 8004936:	059a      	lsls	r2, r3, #22
 8004938:	d402      	bmi.n	8004940 <_vfiprintf_r+0x220>
 800493a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800493c:	f000 fc45 	bl	80051ca <__retarget_lock_release_recursive>
 8004940:	89ab      	ldrh	r3, [r5, #12]
 8004942:	065b      	lsls	r3, r3, #25
 8004944:	f53f af12 	bmi.w	800476c <_vfiprintf_r+0x4c>
 8004948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800494a:	e711      	b.n	8004770 <_vfiprintf_r+0x50>
 800494c:	ab03      	add	r3, sp, #12
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	462a      	mov	r2, r5
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <_vfiprintf_r+0x258>)
 8004954:	a904      	add	r1, sp, #16
 8004956:	4630      	mov	r0, r6
 8004958:	f000 f880 	bl	8004a5c <_printf_i>
 800495c:	e7e4      	b.n	8004928 <_vfiprintf_r+0x208>
 800495e:	bf00      	nop
 8004960:	08007fe0 	.word	0x08007fe0
 8004964:	08008000 	.word	0x08008000
 8004968:	08007fc0 	.word	0x08007fc0
 800496c:	08007f8b 	.word	0x08007f8b
 8004970:	08007f95 	.word	0x08007f95
 8004974:	00000000 	.word	0x00000000
 8004978:	080046fb 	.word	0x080046fb
 800497c:	08007f91 	.word	0x08007f91

08004980 <_printf_common>:
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	4616      	mov	r6, r2
 8004986:	4699      	mov	r9, r3
 8004988:	688a      	ldr	r2, [r1, #8]
 800498a:	690b      	ldr	r3, [r1, #16]
 800498c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004990:	4293      	cmp	r3, r2
 8004992:	bfb8      	it	lt
 8004994:	4613      	movlt	r3, r2
 8004996:	6033      	str	r3, [r6, #0]
 8004998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800499c:	4607      	mov	r7, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	b10a      	cbz	r2, 80049a6 <_printf_common+0x26>
 80049a2:	3301      	adds	r3, #1
 80049a4:	6033      	str	r3, [r6, #0]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	0699      	lsls	r1, r3, #26
 80049aa:	bf42      	ittt	mi
 80049ac:	6833      	ldrmi	r3, [r6, #0]
 80049ae:	3302      	addmi	r3, #2
 80049b0:	6033      	strmi	r3, [r6, #0]
 80049b2:	6825      	ldr	r5, [r4, #0]
 80049b4:	f015 0506 	ands.w	r5, r5, #6
 80049b8:	d106      	bne.n	80049c8 <_printf_common+0x48>
 80049ba:	f104 0a19 	add.w	sl, r4, #25
 80049be:	68e3      	ldr	r3, [r4, #12]
 80049c0:	6832      	ldr	r2, [r6, #0]
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	42ab      	cmp	r3, r5
 80049c6:	dc26      	bgt.n	8004a16 <_printf_common+0x96>
 80049c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049cc:	1e13      	subs	r3, r2, #0
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	bf18      	it	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	0692      	lsls	r2, r2, #26
 80049d6:	d42b      	bmi.n	8004a30 <_printf_common+0xb0>
 80049d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049dc:	4649      	mov	r1, r9
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	3001      	adds	r0, #1
 80049e4:	d01e      	beq.n	8004a24 <_printf_common+0xa4>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	68e5      	ldr	r5, [r4, #12]
 80049ea:	6832      	ldr	r2, [r6, #0]
 80049ec:	f003 0306 	and.w	r3, r3, #6
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	bf08      	it	eq
 80049f4:	1aad      	subeq	r5, r5, r2
 80049f6:	68a3      	ldr	r3, [r4, #8]
 80049f8:	6922      	ldr	r2, [r4, #16]
 80049fa:	bf0c      	ite	eq
 80049fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a00:	2500      	movne	r5, #0
 8004a02:	4293      	cmp	r3, r2
 8004a04:	bfc4      	itt	gt
 8004a06:	1a9b      	subgt	r3, r3, r2
 8004a08:	18ed      	addgt	r5, r5, r3
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	341a      	adds	r4, #26
 8004a0e:	42b5      	cmp	r5, r6
 8004a10:	d11a      	bne.n	8004a48 <_printf_common+0xc8>
 8004a12:	2000      	movs	r0, #0
 8004a14:	e008      	b.n	8004a28 <_printf_common+0xa8>
 8004a16:	2301      	movs	r3, #1
 8004a18:	4652      	mov	r2, sl
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	47c0      	blx	r8
 8004a20:	3001      	adds	r0, #1
 8004a22:	d103      	bne.n	8004a2c <_printf_common+0xac>
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2c:	3501      	adds	r5, #1
 8004a2e:	e7c6      	b.n	80049be <_printf_common+0x3e>
 8004a30:	18e1      	adds	r1, r4, r3
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	2030      	movs	r0, #48	; 0x30
 8004a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a3a:	4422      	add	r2, r4
 8004a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a44:	3302      	adds	r3, #2
 8004a46:	e7c7      	b.n	80049d8 <_printf_common+0x58>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	4638      	mov	r0, r7
 8004a50:	47c0      	blx	r8
 8004a52:	3001      	adds	r0, #1
 8004a54:	d0e6      	beq.n	8004a24 <_printf_common+0xa4>
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7d9      	b.n	8004a0e <_printf_common+0x8e>
	...

08004a5c <_printf_i>:
 8004a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a60:	7e0f      	ldrb	r7, [r1, #24]
 8004a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a64:	2f78      	cmp	r7, #120	; 0x78
 8004a66:	4691      	mov	r9, r2
 8004a68:	4680      	mov	r8, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	469a      	mov	sl, r3
 8004a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a72:	d807      	bhi.n	8004a84 <_printf_i+0x28>
 8004a74:	2f62      	cmp	r7, #98	; 0x62
 8004a76:	d80a      	bhi.n	8004a8e <_printf_i+0x32>
 8004a78:	2f00      	cmp	r7, #0
 8004a7a:	f000 80d8 	beq.w	8004c2e <_printf_i+0x1d2>
 8004a7e:	2f58      	cmp	r7, #88	; 0x58
 8004a80:	f000 80a3 	beq.w	8004bca <_printf_i+0x16e>
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a8c:	e03a      	b.n	8004b04 <_printf_i+0xa8>
 8004a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a92:	2b15      	cmp	r3, #21
 8004a94:	d8f6      	bhi.n	8004a84 <_printf_i+0x28>
 8004a96:	a101      	add	r1, pc, #4	; (adr r1, 8004a9c <_printf_i+0x40>)
 8004a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a9c:	08004af5 	.word	0x08004af5
 8004aa0:	08004b09 	.word	0x08004b09
 8004aa4:	08004a85 	.word	0x08004a85
 8004aa8:	08004a85 	.word	0x08004a85
 8004aac:	08004a85 	.word	0x08004a85
 8004ab0:	08004a85 	.word	0x08004a85
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004a85 	.word	0x08004a85
 8004abc:	08004a85 	.word	0x08004a85
 8004ac0:	08004a85 	.word	0x08004a85
 8004ac4:	08004a85 	.word	0x08004a85
 8004ac8:	08004c15 	.word	0x08004c15
 8004acc:	08004b39 	.word	0x08004b39
 8004ad0:	08004bf7 	.word	0x08004bf7
 8004ad4:	08004a85 	.word	0x08004a85
 8004ad8:	08004a85 	.word	0x08004a85
 8004adc:	08004c37 	.word	0x08004c37
 8004ae0:	08004a85 	.word	0x08004a85
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004a85 	.word	0x08004a85
 8004aec:	08004a85 	.word	0x08004a85
 8004af0:	08004bff 	.word	0x08004bff
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	1d1a      	adds	r2, r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	602a      	str	r2, [r5, #0]
 8004afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0a3      	b.n	8004c50 <_printf_i+0x1f4>
 8004b08:	6820      	ldr	r0, [r4, #0]
 8004b0a:	6829      	ldr	r1, [r5, #0]
 8004b0c:	0606      	lsls	r6, r0, #24
 8004b0e:	f101 0304 	add.w	r3, r1, #4
 8004b12:	d50a      	bpl.n	8004b2a <_printf_i+0xce>
 8004b14:	680e      	ldr	r6, [r1, #0]
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	da03      	bge.n	8004b24 <_printf_i+0xc8>
 8004b1c:	232d      	movs	r3, #45	; 0x2d
 8004b1e:	4276      	negs	r6, r6
 8004b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b24:	485e      	ldr	r0, [pc, #376]	; (8004ca0 <_printf_i+0x244>)
 8004b26:	230a      	movs	r3, #10
 8004b28:	e019      	b.n	8004b5e <_printf_i+0x102>
 8004b2a:	680e      	ldr	r6, [r1, #0]
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b32:	bf18      	it	ne
 8004b34:	b236      	sxthne	r6, r6
 8004b36:	e7ef      	b.n	8004b18 <_printf_i+0xbc>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	1d19      	adds	r1, r3, #4
 8004b3e:	6029      	str	r1, [r5, #0]
 8004b40:	0601      	lsls	r1, r0, #24
 8004b42:	d501      	bpl.n	8004b48 <_printf_i+0xec>
 8004b44:	681e      	ldr	r6, [r3, #0]
 8004b46:	e002      	b.n	8004b4e <_printf_i+0xf2>
 8004b48:	0646      	lsls	r6, r0, #25
 8004b4a:	d5fb      	bpl.n	8004b44 <_printf_i+0xe8>
 8004b4c:	881e      	ldrh	r6, [r3, #0]
 8004b4e:	4854      	ldr	r0, [pc, #336]	; (8004ca0 <_printf_i+0x244>)
 8004b50:	2f6f      	cmp	r7, #111	; 0x6f
 8004b52:	bf0c      	ite	eq
 8004b54:	2308      	moveq	r3, #8
 8004b56:	230a      	movne	r3, #10
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b5e:	6865      	ldr	r5, [r4, #4]
 8004b60:	60a5      	str	r5, [r4, #8]
 8004b62:	2d00      	cmp	r5, #0
 8004b64:	bfa2      	ittt	ge
 8004b66:	6821      	ldrge	r1, [r4, #0]
 8004b68:	f021 0104 	bicge.w	r1, r1, #4
 8004b6c:	6021      	strge	r1, [r4, #0]
 8004b6e:	b90e      	cbnz	r6, 8004b74 <_printf_i+0x118>
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	d04d      	beq.n	8004c10 <_printf_i+0x1b4>
 8004b74:	4615      	mov	r5, r2
 8004b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b7e:	5dc7      	ldrb	r7, [r0, r7]
 8004b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b84:	4637      	mov	r7, r6
 8004b86:	42bb      	cmp	r3, r7
 8004b88:	460e      	mov	r6, r1
 8004b8a:	d9f4      	bls.n	8004b76 <_printf_i+0x11a>
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d10b      	bne.n	8004ba8 <_printf_i+0x14c>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	07de      	lsls	r6, r3, #31
 8004b94:	d508      	bpl.n	8004ba8 <_printf_i+0x14c>
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	6861      	ldr	r1, [r4, #4]
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	bfde      	ittt	le
 8004b9e:	2330      	movle	r3, #48	; 0x30
 8004ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ba4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ba8:	1b52      	subs	r2, r2, r5
 8004baa:	6122      	str	r2, [r4, #16]
 8004bac:	f8cd a000 	str.w	sl, [sp]
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	aa03      	add	r2, sp, #12
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f7ff fee2 	bl	8004980 <_printf_common>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d14c      	bne.n	8004c5a <_printf_i+0x1fe>
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc4:	b004      	add	sp, #16
 8004bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bca:	4835      	ldr	r0, [pc, #212]	; (8004ca0 <_printf_i+0x244>)
 8004bcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bd0:	6829      	ldr	r1, [r5, #0]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bd8:	6029      	str	r1, [r5, #0]
 8004bda:	061d      	lsls	r5, r3, #24
 8004bdc:	d514      	bpl.n	8004c08 <_printf_i+0x1ac>
 8004bde:	07df      	lsls	r7, r3, #31
 8004be0:	bf44      	itt	mi
 8004be2:	f043 0320 	orrmi.w	r3, r3, #32
 8004be6:	6023      	strmi	r3, [r4, #0]
 8004be8:	b91e      	cbnz	r6, 8004bf2 <_printf_i+0x196>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	f023 0320 	bic.w	r3, r3, #32
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	2310      	movs	r3, #16
 8004bf4:	e7b0      	b.n	8004b58 <_printf_i+0xfc>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	f043 0320 	orr.w	r3, r3, #32
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	2378      	movs	r3, #120	; 0x78
 8004c00:	4828      	ldr	r0, [pc, #160]	; (8004ca4 <_printf_i+0x248>)
 8004c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c06:	e7e3      	b.n	8004bd0 <_printf_i+0x174>
 8004c08:	0659      	lsls	r1, r3, #25
 8004c0a:	bf48      	it	mi
 8004c0c:	b2b6      	uxthmi	r6, r6
 8004c0e:	e7e6      	b.n	8004bde <_printf_i+0x182>
 8004c10:	4615      	mov	r5, r2
 8004c12:	e7bb      	b.n	8004b8c <_printf_i+0x130>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	6826      	ldr	r6, [r4, #0]
 8004c18:	6961      	ldr	r1, [r4, #20]
 8004c1a:	1d18      	adds	r0, r3, #4
 8004c1c:	6028      	str	r0, [r5, #0]
 8004c1e:	0635      	lsls	r5, r6, #24
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0x1cc>
 8004c24:	6019      	str	r1, [r3, #0]
 8004c26:	e002      	b.n	8004c2e <_printf_i+0x1d2>
 8004c28:	0670      	lsls	r0, r6, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0x1c8>
 8004c2c:	8019      	strh	r1, [r3, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	4615      	mov	r5, r2
 8004c34:	e7ba      	b.n	8004bac <_printf_i+0x150>
 8004c36:	682b      	ldr	r3, [r5, #0]
 8004c38:	1d1a      	adds	r2, r3, #4
 8004c3a:	602a      	str	r2, [r5, #0]
 8004c3c:	681d      	ldr	r5, [r3, #0]
 8004c3e:	6862      	ldr	r2, [r4, #4]
 8004c40:	2100      	movs	r1, #0
 8004c42:	4628      	mov	r0, r5
 8004c44:	f7fb fadc 	bl	8000200 <memchr>
 8004c48:	b108      	cbz	r0, 8004c4e <_printf_i+0x1f2>
 8004c4a:	1b40      	subs	r0, r0, r5
 8004c4c:	6060      	str	r0, [r4, #4]
 8004c4e:	6863      	ldr	r3, [r4, #4]
 8004c50:	6123      	str	r3, [r4, #16]
 8004c52:	2300      	movs	r3, #0
 8004c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c58:	e7a8      	b.n	8004bac <_printf_i+0x150>
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	462a      	mov	r2, r5
 8004c5e:	4649      	mov	r1, r9
 8004c60:	4640      	mov	r0, r8
 8004c62:	47d0      	blx	sl
 8004c64:	3001      	adds	r0, #1
 8004c66:	d0ab      	beq.n	8004bc0 <_printf_i+0x164>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	079b      	lsls	r3, r3, #30
 8004c6c:	d413      	bmi.n	8004c96 <_printf_i+0x23a>
 8004c6e:	68e0      	ldr	r0, [r4, #12]
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	4298      	cmp	r0, r3
 8004c74:	bfb8      	it	lt
 8004c76:	4618      	movlt	r0, r3
 8004c78:	e7a4      	b.n	8004bc4 <_printf_i+0x168>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4640      	mov	r0, r8
 8004c82:	47d0      	blx	sl
 8004c84:	3001      	adds	r0, #1
 8004c86:	d09b      	beq.n	8004bc0 <_printf_i+0x164>
 8004c88:	3501      	adds	r5, #1
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	9903      	ldr	r1, [sp, #12]
 8004c8e:	1a5b      	subs	r3, r3, r1
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dcf2      	bgt.n	8004c7a <_printf_i+0x21e>
 8004c94:	e7eb      	b.n	8004c6e <_printf_i+0x212>
 8004c96:	2500      	movs	r5, #0
 8004c98:	f104 0619 	add.w	r6, r4, #25
 8004c9c:	e7f5      	b.n	8004c8a <_printf_i+0x22e>
 8004c9e:	bf00      	nop
 8004ca0:	08007f9c 	.word	0x08007f9c
 8004ca4:	08007fad 	.word	0x08007fad

08004ca8 <_sbrk_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d06      	ldr	r5, [pc, #24]	; (8004cc4 <_sbrk_r+0x1c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fc fbdc 	bl	8001470 <_sbrk>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_sbrk_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_sbrk_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000550 	.word	0x20000550

08004cc8 <__swbuf_r>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	460e      	mov	r6, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	4605      	mov	r5, r0
 8004cd0:	b118      	cbz	r0, 8004cda <__swbuf_r+0x12>
 8004cd2:	6983      	ldr	r3, [r0, #24]
 8004cd4:	b90b      	cbnz	r3, 8004cda <__swbuf_r+0x12>
 8004cd6:	f000 f9d9 	bl	800508c <__sinit>
 8004cda:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <__swbuf_r+0x98>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	d12b      	bne.n	8004d38 <__swbuf_r+0x70>
 8004ce0:	686c      	ldr	r4, [r5, #4]
 8004ce2:	69a3      	ldr	r3, [r4, #24]
 8004ce4:	60a3      	str	r3, [r4, #8]
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	071a      	lsls	r2, r3, #28
 8004cea:	d52f      	bpl.n	8004d4c <__swbuf_r+0x84>
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	b36b      	cbz	r3, 8004d4c <__swbuf_r+0x84>
 8004cf0:	6923      	ldr	r3, [r4, #16]
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1ac0      	subs	r0, r0, r3
 8004cf6:	6963      	ldr	r3, [r4, #20]
 8004cf8:	b2f6      	uxtb	r6, r6
 8004cfa:	4283      	cmp	r3, r0
 8004cfc:	4637      	mov	r7, r6
 8004cfe:	dc04      	bgt.n	8004d0a <__swbuf_r+0x42>
 8004d00:	4621      	mov	r1, r4
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 f92e 	bl	8004f64 <_fflush_r>
 8004d08:	bb30      	cbnz	r0, 8004d58 <__swbuf_r+0x90>
 8004d0a:	68a3      	ldr	r3, [r4, #8]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	60a3      	str	r3, [r4, #8]
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	6022      	str	r2, [r4, #0]
 8004d16:	701e      	strb	r6, [r3, #0]
 8004d18:	6963      	ldr	r3, [r4, #20]
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	4283      	cmp	r3, r0
 8004d1e:	d004      	beq.n	8004d2a <__swbuf_r+0x62>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	07db      	lsls	r3, r3, #31
 8004d24:	d506      	bpl.n	8004d34 <__swbuf_r+0x6c>
 8004d26:	2e0a      	cmp	r6, #10
 8004d28:	d104      	bne.n	8004d34 <__swbuf_r+0x6c>
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f000 f919 	bl	8004f64 <_fflush_r>
 8004d32:	b988      	cbnz	r0, 8004d58 <__swbuf_r+0x90>
 8004d34:	4638      	mov	r0, r7
 8004d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <__swbuf_r+0x9c>)
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	d101      	bne.n	8004d42 <__swbuf_r+0x7a>
 8004d3e:	68ac      	ldr	r4, [r5, #8]
 8004d40:	e7cf      	b.n	8004ce2 <__swbuf_r+0x1a>
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <__swbuf_r+0xa0>)
 8004d44:	429c      	cmp	r4, r3
 8004d46:	bf08      	it	eq
 8004d48:	68ec      	ldreq	r4, [r5, #12]
 8004d4a:	e7ca      	b.n	8004ce2 <__swbuf_r+0x1a>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 f80c 	bl	8004d6c <__swsetup_r>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d0cb      	beq.n	8004cf0 <__swbuf_r+0x28>
 8004d58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d5c:	e7ea      	b.n	8004d34 <__swbuf_r+0x6c>
 8004d5e:	bf00      	nop
 8004d60:	08007fe0 	.word	0x08007fe0
 8004d64:	08008000 	.word	0x08008000
 8004d68:	08007fc0 	.word	0x08007fc0

08004d6c <__swsetup_r>:
 8004d6c:	4b32      	ldr	r3, [pc, #200]	; (8004e38 <__swsetup_r+0xcc>)
 8004d6e:	b570      	push	{r4, r5, r6, lr}
 8004d70:	681d      	ldr	r5, [r3, #0]
 8004d72:	4606      	mov	r6, r0
 8004d74:	460c      	mov	r4, r1
 8004d76:	b125      	cbz	r5, 8004d82 <__swsetup_r+0x16>
 8004d78:	69ab      	ldr	r3, [r5, #24]
 8004d7a:	b913      	cbnz	r3, 8004d82 <__swsetup_r+0x16>
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 f985 	bl	800508c <__sinit>
 8004d82:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <__swsetup_r+0xd0>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	d10f      	bne.n	8004da8 <__swsetup_r+0x3c>
 8004d88:	686c      	ldr	r4, [r5, #4]
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d90:	0719      	lsls	r1, r3, #28
 8004d92:	d42c      	bmi.n	8004dee <__swsetup_r+0x82>
 8004d94:	06dd      	lsls	r5, r3, #27
 8004d96:	d411      	bmi.n	8004dbc <__swsetup_r+0x50>
 8004d98:	2309      	movs	r3, #9
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004da6:	e03e      	b.n	8004e26 <__swsetup_r+0xba>
 8004da8:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <__swsetup_r+0xd4>)
 8004daa:	429c      	cmp	r4, r3
 8004dac:	d101      	bne.n	8004db2 <__swsetup_r+0x46>
 8004dae:	68ac      	ldr	r4, [r5, #8]
 8004db0:	e7eb      	b.n	8004d8a <__swsetup_r+0x1e>
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <__swsetup_r+0xd8>)
 8004db4:	429c      	cmp	r4, r3
 8004db6:	bf08      	it	eq
 8004db8:	68ec      	ldreq	r4, [r5, #12]
 8004dba:	e7e6      	b.n	8004d8a <__swsetup_r+0x1e>
 8004dbc:	0758      	lsls	r0, r3, #29
 8004dbe:	d512      	bpl.n	8004de6 <__swsetup_r+0x7a>
 8004dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dc2:	b141      	cbz	r1, 8004dd6 <__swsetup_r+0x6a>
 8004dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	d002      	beq.n	8004dd2 <__swsetup_r+0x66>
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7ff fb9d 	bl	800450c <_free_r>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ddc:	81a3      	strh	r3, [r4, #12]
 8004dde:	2300      	movs	r3, #0
 8004de0:	6063      	str	r3, [r4, #4]
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f043 0308 	orr.w	r3, r3, #8
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	b94b      	cbnz	r3, 8004e06 <__swsetup_r+0x9a>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfc:	d003      	beq.n	8004e06 <__swsetup_r+0x9a>
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4630      	mov	r0, r6
 8004e02:	f000 fa09 	bl	8005218 <__smakebuf_r>
 8004e06:	89a0      	ldrh	r0, [r4, #12]
 8004e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e0c:	f010 0301 	ands.w	r3, r0, #1
 8004e10:	d00a      	beq.n	8004e28 <__swsetup_r+0xbc>
 8004e12:	2300      	movs	r3, #0
 8004e14:	60a3      	str	r3, [r4, #8]
 8004e16:	6963      	ldr	r3, [r4, #20]
 8004e18:	425b      	negs	r3, r3
 8004e1a:	61a3      	str	r3, [r4, #24]
 8004e1c:	6923      	ldr	r3, [r4, #16]
 8004e1e:	b943      	cbnz	r3, 8004e32 <__swsetup_r+0xc6>
 8004e20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e24:	d1ba      	bne.n	8004d9c <__swsetup_r+0x30>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	0781      	lsls	r1, r0, #30
 8004e2a:	bf58      	it	pl
 8004e2c:	6963      	ldrpl	r3, [r4, #20]
 8004e2e:	60a3      	str	r3, [r4, #8]
 8004e30:	e7f4      	b.n	8004e1c <__swsetup_r+0xb0>
 8004e32:	2000      	movs	r0, #0
 8004e34:	e7f7      	b.n	8004e26 <__swsetup_r+0xba>
 8004e36:	bf00      	nop
 8004e38:	20000020 	.word	0x20000020
 8004e3c:	08007fe0 	.word	0x08007fe0
 8004e40:	08008000 	.word	0x08008000
 8004e44:	08007fc0 	.word	0x08007fc0

08004e48 <abort>:
 8004e48:	b508      	push	{r3, lr}
 8004e4a:	2006      	movs	r0, #6
 8004e4c:	f000 fa58 	bl	8005300 <raise>
 8004e50:	2001      	movs	r0, #1
 8004e52:	f7fc fa95 	bl	8001380 <_exit>
	...

08004e58 <__sflush_r>:
 8004e58:	898a      	ldrh	r2, [r1, #12]
 8004e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5e:	4605      	mov	r5, r0
 8004e60:	0710      	lsls	r0, r2, #28
 8004e62:	460c      	mov	r4, r1
 8004e64:	d458      	bmi.n	8004f18 <__sflush_r+0xc0>
 8004e66:	684b      	ldr	r3, [r1, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dc05      	bgt.n	8004e78 <__sflush_r+0x20>
 8004e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dc02      	bgt.n	8004e78 <__sflush_r+0x20>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e7a:	2e00      	cmp	r6, #0
 8004e7c:	d0f9      	beq.n	8004e72 <__sflush_r+0x1a>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e84:	682f      	ldr	r7, [r5, #0]
 8004e86:	602b      	str	r3, [r5, #0]
 8004e88:	d032      	beq.n	8004ef0 <__sflush_r+0x98>
 8004e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	075a      	lsls	r2, r3, #29
 8004e90:	d505      	bpl.n	8004e9e <__sflush_r+0x46>
 8004e92:	6863      	ldr	r3, [r4, #4]
 8004e94:	1ac0      	subs	r0, r0, r3
 8004e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e98:	b10b      	cbz	r3, 8004e9e <__sflush_r+0x46>
 8004e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e9c:	1ac0      	subs	r0, r0, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ea4:	6a21      	ldr	r1, [r4, #32]
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b0      	blx	r6
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	d106      	bne.n	8004ebe <__sflush_r+0x66>
 8004eb0:	6829      	ldr	r1, [r5, #0]
 8004eb2:	291d      	cmp	r1, #29
 8004eb4:	d82c      	bhi.n	8004f10 <__sflush_r+0xb8>
 8004eb6:	4a2a      	ldr	r2, [pc, #168]	; (8004f60 <__sflush_r+0x108>)
 8004eb8:	40ca      	lsrs	r2, r1
 8004eba:	07d6      	lsls	r6, r2, #31
 8004ebc:	d528      	bpl.n	8004f10 <__sflush_r+0xb8>
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	6062      	str	r2, [r4, #4]
 8004ec2:	04d9      	lsls	r1, r3, #19
 8004ec4:	6922      	ldr	r2, [r4, #16]
 8004ec6:	6022      	str	r2, [r4, #0]
 8004ec8:	d504      	bpl.n	8004ed4 <__sflush_r+0x7c>
 8004eca:	1c42      	adds	r2, r0, #1
 8004ecc:	d101      	bne.n	8004ed2 <__sflush_r+0x7a>
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	b903      	cbnz	r3, 8004ed4 <__sflush_r+0x7c>
 8004ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ed6:	602f      	str	r7, [r5, #0]
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	d0ca      	beq.n	8004e72 <__sflush_r+0x1a>
 8004edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d002      	beq.n	8004eea <__sflush_r+0x92>
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f7ff fb11 	bl	800450c <_free_r>
 8004eea:	2000      	movs	r0, #0
 8004eec:	6360      	str	r0, [r4, #52]	; 0x34
 8004eee:	e7c1      	b.n	8004e74 <__sflush_r+0x1c>
 8004ef0:	6a21      	ldr	r1, [r4, #32]
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b0      	blx	r6
 8004ef8:	1c41      	adds	r1, r0, #1
 8004efa:	d1c7      	bne.n	8004e8c <__sflush_r+0x34>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0c4      	beq.n	8004e8c <__sflush_r+0x34>
 8004f02:	2b1d      	cmp	r3, #29
 8004f04:	d001      	beq.n	8004f0a <__sflush_r+0xb2>
 8004f06:	2b16      	cmp	r3, #22
 8004f08:	d101      	bne.n	8004f0e <__sflush_r+0xb6>
 8004f0a:	602f      	str	r7, [r5, #0]
 8004f0c:	e7b1      	b.n	8004e72 <__sflush_r+0x1a>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	e7ad      	b.n	8004e74 <__sflush_r+0x1c>
 8004f18:	690f      	ldr	r7, [r1, #16]
 8004f1a:	2f00      	cmp	r7, #0
 8004f1c:	d0a9      	beq.n	8004e72 <__sflush_r+0x1a>
 8004f1e:	0793      	lsls	r3, r2, #30
 8004f20:	680e      	ldr	r6, [r1, #0]
 8004f22:	bf08      	it	eq
 8004f24:	694b      	ldreq	r3, [r1, #20]
 8004f26:	600f      	str	r7, [r1, #0]
 8004f28:	bf18      	it	ne
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	eba6 0807 	sub.w	r8, r6, r7
 8004f30:	608b      	str	r3, [r1, #8]
 8004f32:	f1b8 0f00 	cmp.w	r8, #0
 8004f36:	dd9c      	ble.n	8004e72 <__sflush_r+0x1a>
 8004f38:	6a21      	ldr	r1, [r4, #32]
 8004f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	463a      	mov	r2, r7
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b0      	blx	r6
 8004f44:	2800      	cmp	r0, #0
 8004f46:	dc06      	bgt.n	8004f56 <__sflush_r+0xfe>
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f54:	e78e      	b.n	8004e74 <__sflush_r+0x1c>
 8004f56:	4407      	add	r7, r0
 8004f58:	eba8 0800 	sub.w	r8, r8, r0
 8004f5c:	e7e9      	b.n	8004f32 <__sflush_r+0xda>
 8004f5e:	bf00      	nop
 8004f60:	20400001 	.word	0x20400001

08004f64 <_fflush_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	b913      	cbnz	r3, 8004f74 <_fflush_r+0x10>
 8004f6e:	2500      	movs	r5, #0
 8004f70:	4628      	mov	r0, r5
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	b118      	cbz	r0, 8004f7e <_fflush_r+0x1a>
 8004f76:	6983      	ldr	r3, [r0, #24]
 8004f78:	b90b      	cbnz	r3, 8004f7e <_fflush_r+0x1a>
 8004f7a:	f000 f887 	bl	800508c <__sinit>
 8004f7e:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <_fflush_r+0x6c>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	d11b      	bne.n	8004fbc <_fflush_r+0x58>
 8004f84:	686c      	ldr	r4, [r5, #4]
 8004f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ef      	beq.n	8004f6e <_fflush_r+0xa>
 8004f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f90:	07d0      	lsls	r0, r2, #31
 8004f92:	d404      	bmi.n	8004f9e <_fflush_r+0x3a>
 8004f94:	0599      	lsls	r1, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_fflush_r+0x3a>
 8004f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f9a:	f000 f915 	bl	80051c8 <__retarget_lock_acquire_recursive>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	f7ff ff59 	bl	8004e58 <__sflush_r>
 8004fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa8:	07da      	lsls	r2, r3, #31
 8004faa:	4605      	mov	r5, r0
 8004fac:	d4e0      	bmi.n	8004f70 <_fflush_r+0xc>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	059b      	lsls	r3, r3, #22
 8004fb2:	d4dd      	bmi.n	8004f70 <_fflush_r+0xc>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb6:	f000 f908 	bl	80051ca <__retarget_lock_release_recursive>
 8004fba:	e7d9      	b.n	8004f70 <_fflush_r+0xc>
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <_fflush_r+0x70>)
 8004fbe:	429c      	cmp	r4, r3
 8004fc0:	d101      	bne.n	8004fc6 <_fflush_r+0x62>
 8004fc2:	68ac      	ldr	r4, [r5, #8]
 8004fc4:	e7df      	b.n	8004f86 <_fflush_r+0x22>
 8004fc6:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <_fflush_r+0x74>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	bf08      	it	eq
 8004fcc:	68ec      	ldreq	r4, [r5, #12]
 8004fce:	e7da      	b.n	8004f86 <_fflush_r+0x22>
 8004fd0:	08007fe0 	.word	0x08007fe0
 8004fd4:	08008000 	.word	0x08008000
 8004fd8:	08007fc0 	.word	0x08007fc0

08004fdc <std>:
 8004fdc:	2300      	movs	r3, #0
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fea:	6083      	str	r3, [r0, #8]
 8004fec:	8181      	strh	r1, [r0, #12]
 8004fee:	6643      	str	r3, [r0, #100]	; 0x64
 8004ff0:	81c2      	strh	r2, [r0, #14]
 8004ff2:	6183      	str	r3, [r0, #24]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	305c      	adds	r0, #92	; 0x5c
 8004ffa:	f7ff f989 	bl	8004310 <memset>
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <std+0x38>)
 8005000:	6263      	str	r3, [r4, #36]	; 0x24
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <std+0x3c>)
 8005004:	62a3      	str	r3, [r4, #40]	; 0x28
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <std+0x40>)
 8005008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <std+0x44>)
 800500c:	6224      	str	r4, [r4, #32]
 800500e:	6323      	str	r3, [r4, #48]	; 0x30
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	08005339 	.word	0x08005339
 8005018:	0800535b 	.word	0x0800535b
 800501c:	08005393 	.word	0x08005393
 8005020:	080053b7 	.word	0x080053b7

08005024 <_cleanup_r>:
 8005024:	4901      	ldr	r1, [pc, #4]	; (800502c <_cleanup_r+0x8>)
 8005026:	f000 b8af 	b.w	8005188 <_fwalk_reent>
 800502a:	bf00      	nop
 800502c:	08004f65 	.word	0x08004f65

08005030 <__sfmoreglue>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	2268      	movs	r2, #104	; 0x68
 8005034:	1e4d      	subs	r5, r1, #1
 8005036:	4355      	muls	r5, r2
 8005038:	460e      	mov	r6, r1
 800503a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800503e:	f7ff fad1 	bl	80045e4 <_malloc_r>
 8005042:	4604      	mov	r4, r0
 8005044:	b140      	cbz	r0, 8005058 <__sfmoreglue+0x28>
 8005046:	2100      	movs	r1, #0
 8005048:	e9c0 1600 	strd	r1, r6, [r0]
 800504c:	300c      	adds	r0, #12
 800504e:	60a0      	str	r0, [r4, #8]
 8005050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005054:	f7ff f95c 	bl	8004310 <memset>
 8005058:	4620      	mov	r0, r4
 800505a:	bd70      	pop	{r4, r5, r6, pc}

0800505c <__sfp_lock_acquire>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__sfp_lock_acquire+0x8>)
 800505e:	f000 b8b3 	b.w	80051c8 <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	2000054d 	.word	0x2000054d

08005068 <__sfp_lock_release>:
 8005068:	4801      	ldr	r0, [pc, #4]	; (8005070 <__sfp_lock_release+0x8>)
 800506a:	f000 b8ae 	b.w	80051ca <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	2000054d 	.word	0x2000054d

08005074 <__sinit_lock_acquire>:
 8005074:	4801      	ldr	r0, [pc, #4]	; (800507c <__sinit_lock_acquire+0x8>)
 8005076:	f000 b8a7 	b.w	80051c8 <__retarget_lock_acquire_recursive>
 800507a:	bf00      	nop
 800507c:	2000054e 	.word	0x2000054e

08005080 <__sinit_lock_release>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__sinit_lock_release+0x8>)
 8005082:	f000 b8a2 	b.w	80051ca <__retarget_lock_release_recursive>
 8005086:	bf00      	nop
 8005088:	2000054e 	.word	0x2000054e

0800508c <__sinit>:
 800508c:	b510      	push	{r4, lr}
 800508e:	4604      	mov	r4, r0
 8005090:	f7ff fff0 	bl	8005074 <__sinit_lock_acquire>
 8005094:	69a3      	ldr	r3, [r4, #24]
 8005096:	b11b      	cbz	r3, 80050a0 <__sinit+0x14>
 8005098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509c:	f7ff bff0 	b.w	8005080 <__sinit_lock_release>
 80050a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050a4:	6523      	str	r3, [r4, #80]	; 0x50
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <__sinit+0x68>)
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <__sinit+0x6c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	bf04      	itt	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	61a3      	streq	r3, [r4, #24]
 80050b6:	4620      	mov	r0, r4
 80050b8:	f000 f820 	bl	80050fc <__sfp>
 80050bc:	6060      	str	r0, [r4, #4]
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 f81c 	bl	80050fc <__sfp>
 80050c4:	60a0      	str	r0, [r4, #8]
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 f818 	bl	80050fc <__sfp>
 80050cc:	2200      	movs	r2, #0
 80050ce:	60e0      	str	r0, [r4, #12]
 80050d0:	2104      	movs	r1, #4
 80050d2:	6860      	ldr	r0, [r4, #4]
 80050d4:	f7ff ff82 	bl	8004fdc <std>
 80050d8:	68a0      	ldr	r0, [r4, #8]
 80050da:	2201      	movs	r2, #1
 80050dc:	2109      	movs	r1, #9
 80050de:	f7ff ff7d 	bl	8004fdc <std>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	2202      	movs	r2, #2
 80050e6:	2112      	movs	r1, #18
 80050e8:	f7ff ff78 	bl	8004fdc <std>
 80050ec:	2301      	movs	r3, #1
 80050ee:	61a3      	str	r3, [r4, #24]
 80050f0:	e7d2      	b.n	8005098 <__sinit+0xc>
 80050f2:	bf00      	nop
 80050f4:	08007eb4 	.word	0x08007eb4
 80050f8:	08005025 	.word	0x08005025

080050fc <__sfp>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	4607      	mov	r7, r0
 8005100:	f7ff ffac 	bl	800505c <__sfp_lock_acquire>
 8005104:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <__sfp+0x84>)
 8005106:	681e      	ldr	r6, [r3, #0]
 8005108:	69b3      	ldr	r3, [r6, #24]
 800510a:	b913      	cbnz	r3, 8005112 <__sfp+0x16>
 800510c:	4630      	mov	r0, r6
 800510e:	f7ff ffbd 	bl	800508c <__sinit>
 8005112:	3648      	adds	r6, #72	; 0x48
 8005114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005118:	3b01      	subs	r3, #1
 800511a:	d503      	bpl.n	8005124 <__sfp+0x28>
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	b30b      	cbz	r3, 8005164 <__sfp+0x68>
 8005120:	6836      	ldr	r6, [r6, #0]
 8005122:	e7f7      	b.n	8005114 <__sfp+0x18>
 8005124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005128:	b9d5      	cbnz	r5, 8005160 <__sfp+0x64>
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <__sfp+0x88>)
 800512c:	60e3      	str	r3, [r4, #12]
 800512e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005132:	6665      	str	r5, [r4, #100]	; 0x64
 8005134:	f000 f847 	bl	80051c6 <__retarget_lock_init_recursive>
 8005138:	f7ff ff96 	bl	8005068 <__sfp_lock_release>
 800513c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005144:	6025      	str	r5, [r4, #0]
 8005146:	61a5      	str	r5, [r4, #24]
 8005148:	2208      	movs	r2, #8
 800514a:	4629      	mov	r1, r5
 800514c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005150:	f7ff f8de 	bl	8004310 <memset>
 8005154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800515c:	4620      	mov	r0, r4
 800515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005160:	3468      	adds	r4, #104	; 0x68
 8005162:	e7d9      	b.n	8005118 <__sfp+0x1c>
 8005164:	2104      	movs	r1, #4
 8005166:	4638      	mov	r0, r7
 8005168:	f7ff ff62 	bl	8005030 <__sfmoreglue>
 800516c:	4604      	mov	r4, r0
 800516e:	6030      	str	r0, [r6, #0]
 8005170:	2800      	cmp	r0, #0
 8005172:	d1d5      	bne.n	8005120 <__sfp+0x24>
 8005174:	f7ff ff78 	bl	8005068 <__sfp_lock_release>
 8005178:	230c      	movs	r3, #12
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	e7ee      	b.n	800515c <__sfp+0x60>
 800517e:	bf00      	nop
 8005180:	08007eb4 	.word	0x08007eb4
 8005184:	ffff0001 	.word	0xffff0001

08005188 <_fwalk_reent>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	4606      	mov	r6, r0
 800518e:	4688      	mov	r8, r1
 8005190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005194:	2700      	movs	r7, #0
 8005196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800519a:	f1b9 0901 	subs.w	r9, r9, #1
 800519e:	d505      	bpl.n	80051ac <_fwalk_reent+0x24>
 80051a0:	6824      	ldr	r4, [r4, #0]
 80051a2:	2c00      	cmp	r4, #0
 80051a4:	d1f7      	bne.n	8005196 <_fwalk_reent+0xe>
 80051a6:	4638      	mov	r0, r7
 80051a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ac:	89ab      	ldrh	r3, [r5, #12]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d907      	bls.n	80051c2 <_fwalk_reent+0x3a>
 80051b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b6:	3301      	adds	r3, #1
 80051b8:	d003      	beq.n	80051c2 <_fwalk_reent+0x3a>
 80051ba:	4629      	mov	r1, r5
 80051bc:	4630      	mov	r0, r6
 80051be:	47c0      	blx	r8
 80051c0:	4307      	orrs	r7, r0
 80051c2:	3568      	adds	r5, #104	; 0x68
 80051c4:	e7e9      	b.n	800519a <_fwalk_reent+0x12>

080051c6 <__retarget_lock_init_recursive>:
 80051c6:	4770      	bx	lr

080051c8 <__retarget_lock_acquire_recursive>:
 80051c8:	4770      	bx	lr

080051ca <__retarget_lock_release_recursive>:
 80051ca:	4770      	bx	lr

080051cc <__swhatbuf_r>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	460e      	mov	r6, r1
 80051d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d4:	2900      	cmp	r1, #0
 80051d6:	b096      	sub	sp, #88	; 0x58
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	da08      	bge.n	80051f0 <__swhatbuf_r+0x24>
 80051de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	602a      	str	r2, [r5, #0]
 80051e6:	061a      	lsls	r2, r3, #24
 80051e8:	d410      	bmi.n	800520c <__swhatbuf_r+0x40>
 80051ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ee:	e00e      	b.n	800520e <__swhatbuf_r+0x42>
 80051f0:	466a      	mov	r2, sp
 80051f2:	f000 f907 	bl	8005404 <_fstat_r>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	dbf1      	blt.n	80051de <__swhatbuf_r+0x12>
 80051fa:	9a01      	ldr	r2, [sp, #4]
 80051fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005204:	425a      	negs	r2, r3
 8005206:	415a      	adcs	r2, r3
 8005208:	602a      	str	r2, [r5, #0]
 800520a:	e7ee      	b.n	80051ea <__swhatbuf_r+0x1e>
 800520c:	2340      	movs	r3, #64	; 0x40
 800520e:	2000      	movs	r0, #0
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	b016      	add	sp, #88	; 0x58
 8005214:	bd70      	pop	{r4, r5, r6, pc}
	...

08005218 <__smakebuf_r>:
 8005218:	898b      	ldrh	r3, [r1, #12]
 800521a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800521c:	079d      	lsls	r5, r3, #30
 800521e:	4606      	mov	r6, r0
 8005220:	460c      	mov	r4, r1
 8005222:	d507      	bpl.n	8005234 <__smakebuf_r+0x1c>
 8005224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	2301      	movs	r3, #1
 800522e:	6163      	str	r3, [r4, #20]
 8005230:	b002      	add	sp, #8
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	ab01      	add	r3, sp, #4
 8005236:	466a      	mov	r2, sp
 8005238:	f7ff ffc8 	bl	80051cc <__swhatbuf_r>
 800523c:	9900      	ldr	r1, [sp, #0]
 800523e:	4605      	mov	r5, r0
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff f9cf 	bl	80045e4 <_malloc_r>
 8005246:	b948      	cbnz	r0, 800525c <__smakebuf_r+0x44>
 8005248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800524c:	059a      	lsls	r2, r3, #22
 800524e:	d4ef      	bmi.n	8005230 <__smakebuf_r+0x18>
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	f043 0302 	orr.w	r3, r3, #2
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	e7e3      	b.n	8005224 <__smakebuf_r+0xc>
 800525c:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <__smakebuf_r+0x7c>)
 800525e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	6020      	str	r0, [r4, #0]
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	9b00      	ldr	r3, [sp, #0]
 800526c:	6163      	str	r3, [r4, #20]
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	6120      	str	r0, [r4, #16]
 8005272:	b15b      	cbz	r3, 800528c <__smakebuf_r+0x74>
 8005274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005278:	4630      	mov	r0, r6
 800527a:	f000 f8d5 	bl	8005428 <_isatty_r>
 800527e:	b128      	cbz	r0, 800528c <__smakebuf_r+0x74>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	89a0      	ldrh	r0, [r4, #12]
 800528e:	4305      	orrs	r5, r0
 8005290:	81a5      	strh	r5, [r4, #12]
 8005292:	e7cd      	b.n	8005230 <__smakebuf_r+0x18>
 8005294:	08005025 	.word	0x08005025

08005298 <__malloc_lock>:
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <__malloc_lock+0x8>)
 800529a:	f7ff bf95 	b.w	80051c8 <__retarget_lock_acquire_recursive>
 800529e:	bf00      	nop
 80052a0:	2000054c 	.word	0x2000054c

080052a4 <__malloc_unlock>:
 80052a4:	4801      	ldr	r0, [pc, #4]	; (80052ac <__malloc_unlock+0x8>)
 80052a6:	f7ff bf90 	b.w	80051ca <__retarget_lock_release_recursive>
 80052aa:	bf00      	nop
 80052ac:	2000054c 	.word	0x2000054c

080052b0 <_raise_r>:
 80052b0:	291f      	cmp	r1, #31
 80052b2:	b538      	push	{r3, r4, r5, lr}
 80052b4:	4604      	mov	r4, r0
 80052b6:	460d      	mov	r5, r1
 80052b8:	d904      	bls.n	80052c4 <_raise_r+0x14>
 80052ba:	2316      	movs	r3, #22
 80052bc:	6003      	str	r3, [r0, #0]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052c6:	b112      	cbz	r2, 80052ce <_raise_r+0x1e>
 80052c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80052cc:	b94b      	cbnz	r3, 80052e2 <_raise_r+0x32>
 80052ce:	4620      	mov	r0, r4
 80052d0:	f000 f830 	bl	8005334 <_getpid_r>
 80052d4:	462a      	mov	r2, r5
 80052d6:	4601      	mov	r1, r0
 80052d8:	4620      	mov	r0, r4
 80052da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052de:	f000 b817 	b.w	8005310 <_kill_r>
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d00a      	beq.n	80052fc <_raise_r+0x4c>
 80052e6:	1c59      	adds	r1, r3, #1
 80052e8:	d103      	bne.n	80052f2 <_raise_r+0x42>
 80052ea:	2316      	movs	r3, #22
 80052ec:	6003      	str	r3, [r0, #0]
 80052ee:	2001      	movs	r0, #1
 80052f0:	e7e7      	b.n	80052c2 <_raise_r+0x12>
 80052f2:	2400      	movs	r4, #0
 80052f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052f8:	4628      	mov	r0, r5
 80052fa:	4798      	blx	r3
 80052fc:	2000      	movs	r0, #0
 80052fe:	e7e0      	b.n	80052c2 <_raise_r+0x12>

08005300 <raise>:
 8005300:	4b02      	ldr	r3, [pc, #8]	; (800530c <raise+0xc>)
 8005302:	4601      	mov	r1, r0
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	f7ff bfd3 	b.w	80052b0 <_raise_r>
 800530a:	bf00      	nop
 800530c:	20000020 	.word	0x20000020

08005310 <_kill_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d07      	ldr	r5, [pc, #28]	; (8005330 <_kill_r+0x20>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	f7fc f81f 	bl	8001360 <_kill>
 8005322:	1c43      	adds	r3, r0, #1
 8005324:	d102      	bne.n	800532c <_kill_r+0x1c>
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	b103      	cbz	r3, 800532c <_kill_r+0x1c>
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	bd38      	pop	{r3, r4, r5, pc}
 800532e:	bf00      	nop
 8005330:	20000550 	.word	0x20000550

08005334 <_getpid_r>:
 8005334:	f7fc b80c 	b.w	8001350 <_getpid>

08005338 <__sread>:
 8005338:	b510      	push	{r4, lr}
 800533a:	460c      	mov	r4, r1
 800533c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005340:	f000 f894 	bl	800546c <_read_r>
 8005344:	2800      	cmp	r0, #0
 8005346:	bfab      	itete	ge
 8005348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800534a:	89a3      	ldrhlt	r3, [r4, #12]
 800534c:	181b      	addge	r3, r3, r0
 800534e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005352:	bfac      	ite	ge
 8005354:	6563      	strge	r3, [r4, #84]	; 0x54
 8005356:	81a3      	strhlt	r3, [r4, #12]
 8005358:	bd10      	pop	{r4, pc}

0800535a <__swrite>:
 800535a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535e:	461f      	mov	r7, r3
 8005360:	898b      	ldrh	r3, [r1, #12]
 8005362:	05db      	lsls	r3, r3, #23
 8005364:	4605      	mov	r5, r0
 8005366:	460c      	mov	r4, r1
 8005368:	4616      	mov	r6, r2
 800536a:	d505      	bpl.n	8005378 <__swrite+0x1e>
 800536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005370:	2302      	movs	r3, #2
 8005372:	2200      	movs	r2, #0
 8005374:	f000 f868 	bl	8005448 <_lseek_r>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	4632      	mov	r2, r6
 8005386:	463b      	mov	r3, r7
 8005388:	4628      	mov	r0, r5
 800538a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800538e:	f000 b817 	b.w	80053c0 <_write_r>

08005392 <__sseek>:
 8005392:	b510      	push	{r4, lr}
 8005394:	460c      	mov	r4, r1
 8005396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539a:	f000 f855 	bl	8005448 <_lseek_r>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	bf15      	itete	ne
 80053a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80053a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053ae:	81a3      	strheq	r3, [r4, #12]
 80053b0:	bf18      	it	ne
 80053b2:	81a3      	strhne	r3, [r4, #12]
 80053b4:	bd10      	pop	{r4, pc}

080053b6 <__sclose>:
 80053b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ba:	f000 b813 	b.w	80053e4 <_close_r>
	...

080053c0 <_write_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <_write_r+0x20>)
 80053c4:	4604      	mov	r4, r0
 80053c6:	4608      	mov	r0, r1
 80053c8:	4611      	mov	r1, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fb fffd 	bl	80013ce <_write>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_write_r+0x1e>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_write_r+0x1e>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000550 	.word	0x20000550

080053e4 <_close_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d06      	ldr	r5, [pc, #24]	; (8005400 <_close_r+0x1c>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	602b      	str	r3, [r5, #0]
 80053f0:	f7fc f809 	bl	8001406 <_close>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_close_r+0x1a>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_close_r+0x1a>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20000550 	.word	0x20000550

08005404 <_fstat_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d07      	ldr	r5, [pc, #28]	; (8005424 <_fstat_r+0x20>)
 8005408:	2300      	movs	r3, #0
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	4611      	mov	r1, r2
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	f7fc f804 	bl	800141e <_fstat>
 8005416:	1c43      	adds	r3, r0, #1
 8005418:	d102      	bne.n	8005420 <_fstat_r+0x1c>
 800541a:	682b      	ldr	r3, [r5, #0]
 800541c:	b103      	cbz	r3, 8005420 <_fstat_r+0x1c>
 800541e:	6023      	str	r3, [r4, #0]
 8005420:	bd38      	pop	{r3, r4, r5, pc}
 8005422:	bf00      	nop
 8005424:	20000550 	.word	0x20000550

08005428 <_isatty_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d06      	ldr	r5, [pc, #24]	; (8005444 <_isatty_r+0x1c>)
 800542c:	2300      	movs	r3, #0
 800542e:	4604      	mov	r4, r0
 8005430:	4608      	mov	r0, r1
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	f7fc f803 	bl	800143e <_isatty>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_isatty_r+0x1a>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_isatty_r+0x1a>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20000550 	.word	0x20000550

08005448 <_lseek_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d07      	ldr	r5, [pc, #28]	; (8005468 <_lseek_r+0x20>)
 800544c:	4604      	mov	r4, r0
 800544e:	4608      	mov	r0, r1
 8005450:	4611      	mov	r1, r2
 8005452:	2200      	movs	r2, #0
 8005454:	602a      	str	r2, [r5, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f7fb fffc 	bl	8001454 <_lseek>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_lseek_r+0x1e>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_lseek_r+0x1e>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20000550 	.word	0x20000550

0800546c <_read_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d07      	ldr	r5, [pc, #28]	; (800548c <_read_r+0x20>)
 8005470:	4604      	mov	r4, r0
 8005472:	4608      	mov	r0, r1
 8005474:	4611      	mov	r1, r2
 8005476:	2200      	movs	r2, #0
 8005478:	602a      	str	r2, [r5, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	f7fb ff8a 	bl	8001394 <_read>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_read_r+0x1e>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_read_r+0x1e>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20000550 	.word	0x20000550

08005490 <atan>:
 8005490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005494:	ec55 4b10 	vmov	r4, r5, d0
 8005498:	4bc3      	ldr	r3, [pc, #780]	; (80057a8 <atan+0x318>)
 800549a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800549e:	429e      	cmp	r6, r3
 80054a0:	46ab      	mov	fp, r5
 80054a2:	dd18      	ble.n	80054d6 <atan+0x46>
 80054a4:	4bc1      	ldr	r3, [pc, #772]	; (80057ac <atan+0x31c>)
 80054a6:	429e      	cmp	r6, r3
 80054a8:	dc01      	bgt.n	80054ae <atan+0x1e>
 80054aa:	d109      	bne.n	80054c0 <atan+0x30>
 80054ac:	b144      	cbz	r4, 80054c0 <atan+0x30>
 80054ae:	4622      	mov	r2, r4
 80054b0:	462b      	mov	r3, r5
 80054b2:	4620      	mov	r0, r4
 80054b4:	4629      	mov	r1, r5
 80054b6:	f7fa fef9 	bl	80002ac <__adddf3>
 80054ba:	4604      	mov	r4, r0
 80054bc:	460d      	mov	r5, r1
 80054be:	e006      	b.n	80054ce <atan+0x3e>
 80054c0:	f1bb 0f00 	cmp.w	fp, #0
 80054c4:	f300 8131 	bgt.w	800572a <atan+0x29a>
 80054c8:	a59b      	add	r5, pc, #620	; (adr r5, 8005738 <atan+0x2a8>)
 80054ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80054ce:	ec45 4b10 	vmov	d0, r4, r5
 80054d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d6:	4bb6      	ldr	r3, [pc, #728]	; (80057b0 <atan+0x320>)
 80054d8:	429e      	cmp	r6, r3
 80054da:	dc14      	bgt.n	8005506 <atan+0x76>
 80054dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80054e0:	429e      	cmp	r6, r3
 80054e2:	dc0d      	bgt.n	8005500 <atan+0x70>
 80054e4:	a396      	add	r3, pc, #600	; (adr r3, 8005740 <atan+0x2b0>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	ee10 0a10 	vmov	r0, s0
 80054ee:	4629      	mov	r1, r5
 80054f0:	f7fa fedc 	bl	80002ac <__adddf3>
 80054f4:	4baf      	ldr	r3, [pc, #700]	; (80057b4 <atan+0x324>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	f7fb fb1e 	bl	8000b38 <__aeabi_dcmpgt>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d1e6      	bne.n	80054ce <atan+0x3e>
 8005500:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005504:	e02b      	b.n	800555e <atan+0xce>
 8005506:	f000 f9b7 	bl	8005878 <fabs>
 800550a:	4bab      	ldr	r3, [pc, #684]	; (80057b8 <atan+0x328>)
 800550c:	429e      	cmp	r6, r3
 800550e:	ec55 4b10 	vmov	r4, r5, d0
 8005512:	f300 80bf 	bgt.w	8005694 <atan+0x204>
 8005516:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800551a:	429e      	cmp	r6, r3
 800551c:	f300 80a0 	bgt.w	8005660 <atan+0x1d0>
 8005520:	ee10 2a10 	vmov	r2, s0
 8005524:	ee10 0a10 	vmov	r0, s0
 8005528:	462b      	mov	r3, r5
 800552a:	4629      	mov	r1, r5
 800552c:	f7fa febe 	bl	80002ac <__adddf3>
 8005530:	4ba0      	ldr	r3, [pc, #640]	; (80057b4 <atan+0x324>)
 8005532:	2200      	movs	r2, #0
 8005534:	f7fa feb8 	bl	80002a8 <__aeabi_dsub>
 8005538:	2200      	movs	r2, #0
 800553a:	4606      	mov	r6, r0
 800553c:	460f      	mov	r7, r1
 800553e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fa feb1 	bl	80002ac <__adddf3>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	f7fb f98b 	bl	800086c <__aeabi_ddiv>
 8005556:	f04f 0a00 	mov.w	sl, #0
 800555a:	4604      	mov	r4, r0
 800555c:	460d      	mov	r5, r1
 800555e:	4622      	mov	r2, r4
 8005560:	462b      	mov	r3, r5
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fb f857 	bl	8000618 <__aeabi_dmul>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4680      	mov	r8, r0
 8005570:	4689      	mov	r9, r1
 8005572:	f7fb f851 	bl	8000618 <__aeabi_dmul>
 8005576:	a374      	add	r3, pc, #464	; (adr r3, 8005748 <atan+0x2b8>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	4606      	mov	r6, r0
 800557e:	460f      	mov	r7, r1
 8005580:	f7fb f84a 	bl	8000618 <__aeabi_dmul>
 8005584:	a372      	add	r3, pc, #456	; (adr r3, 8005750 <atan+0x2c0>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f7fa fe8f 	bl	80002ac <__adddf3>
 800558e:	4632      	mov	r2, r6
 8005590:	463b      	mov	r3, r7
 8005592:	f7fb f841 	bl	8000618 <__aeabi_dmul>
 8005596:	a370      	add	r3, pc, #448	; (adr r3, 8005758 <atan+0x2c8>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f7fa fe86 	bl	80002ac <__adddf3>
 80055a0:	4632      	mov	r2, r6
 80055a2:	463b      	mov	r3, r7
 80055a4:	f7fb f838 	bl	8000618 <__aeabi_dmul>
 80055a8:	a36d      	add	r3, pc, #436	; (adr r3, 8005760 <atan+0x2d0>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fa fe7d 	bl	80002ac <__adddf3>
 80055b2:	4632      	mov	r2, r6
 80055b4:	463b      	mov	r3, r7
 80055b6:	f7fb f82f 	bl	8000618 <__aeabi_dmul>
 80055ba:	a36b      	add	r3, pc, #428	; (adr r3, 8005768 <atan+0x2d8>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fa fe74 	bl	80002ac <__adddf3>
 80055c4:	4632      	mov	r2, r6
 80055c6:	463b      	mov	r3, r7
 80055c8:	f7fb f826 	bl	8000618 <__aeabi_dmul>
 80055cc:	a368      	add	r3, pc, #416	; (adr r3, 8005770 <atan+0x2e0>)
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f7fa fe6b 	bl	80002ac <__adddf3>
 80055d6:	4642      	mov	r2, r8
 80055d8:	464b      	mov	r3, r9
 80055da:	f7fb f81d 	bl	8000618 <__aeabi_dmul>
 80055de:	a366      	add	r3, pc, #408	; (adr r3, 8005778 <atan+0x2e8>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	4680      	mov	r8, r0
 80055e6:	4689      	mov	r9, r1
 80055e8:	4630      	mov	r0, r6
 80055ea:	4639      	mov	r1, r7
 80055ec:	f7fb f814 	bl	8000618 <__aeabi_dmul>
 80055f0:	a363      	add	r3, pc, #396	; (adr r3, 8005780 <atan+0x2f0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fe57 	bl	80002a8 <__aeabi_dsub>
 80055fa:	4632      	mov	r2, r6
 80055fc:	463b      	mov	r3, r7
 80055fe:	f7fb f80b 	bl	8000618 <__aeabi_dmul>
 8005602:	a361      	add	r3, pc, #388	; (adr r3, 8005788 <atan+0x2f8>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fa fe4e 	bl	80002a8 <__aeabi_dsub>
 800560c:	4632      	mov	r2, r6
 800560e:	463b      	mov	r3, r7
 8005610:	f7fb f802 	bl	8000618 <__aeabi_dmul>
 8005614:	a35e      	add	r3, pc, #376	; (adr r3, 8005790 <atan+0x300>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa fe45 	bl	80002a8 <__aeabi_dsub>
 800561e:	4632      	mov	r2, r6
 8005620:	463b      	mov	r3, r7
 8005622:	f7fa fff9 	bl	8000618 <__aeabi_dmul>
 8005626:	a35c      	add	r3, pc, #368	; (adr r3, 8005798 <atan+0x308>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f7fa fe3c 	bl	80002a8 <__aeabi_dsub>
 8005630:	4632      	mov	r2, r6
 8005632:	463b      	mov	r3, r7
 8005634:	f7fa fff0 	bl	8000618 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4640      	mov	r0, r8
 800563e:	4649      	mov	r1, r9
 8005640:	f7fa fe34 	bl	80002ac <__adddf3>
 8005644:	4622      	mov	r2, r4
 8005646:	462b      	mov	r3, r5
 8005648:	f7fa ffe6 	bl	8000618 <__aeabi_dmul>
 800564c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	d14b      	bne.n	80056ee <atan+0x25e>
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fa fe25 	bl	80002a8 <__aeabi_dsub>
 800565e:	e72c      	b.n	80054ba <atan+0x2a>
 8005660:	ee10 0a10 	vmov	r0, s0
 8005664:	4b53      	ldr	r3, [pc, #332]	; (80057b4 <atan+0x324>)
 8005666:	2200      	movs	r2, #0
 8005668:	4629      	mov	r1, r5
 800566a:	f7fa fe1d 	bl	80002a8 <__aeabi_dsub>
 800566e:	4b51      	ldr	r3, [pc, #324]	; (80057b4 <atan+0x324>)
 8005670:	4606      	mov	r6, r0
 8005672:	460f      	mov	r7, r1
 8005674:	2200      	movs	r2, #0
 8005676:	4620      	mov	r0, r4
 8005678:	4629      	mov	r1, r5
 800567a:	f7fa fe17 	bl	80002ac <__adddf3>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4630      	mov	r0, r6
 8005684:	4639      	mov	r1, r7
 8005686:	f7fb f8f1 	bl	800086c <__aeabi_ddiv>
 800568a:	f04f 0a01 	mov.w	sl, #1
 800568e:	4604      	mov	r4, r0
 8005690:	460d      	mov	r5, r1
 8005692:	e764      	b.n	800555e <atan+0xce>
 8005694:	4b49      	ldr	r3, [pc, #292]	; (80057bc <atan+0x32c>)
 8005696:	429e      	cmp	r6, r3
 8005698:	da1d      	bge.n	80056d6 <atan+0x246>
 800569a:	ee10 0a10 	vmov	r0, s0
 800569e:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <atan+0x330>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fa fe00 	bl	80002a8 <__aeabi_dsub>
 80056a8:	4b45      	ldr	r3, [pc, #276]	; (80057c0 <atan+0x330>)
 80056aa:	4606      	mov	r6, r0
 80056ac:	460f      	mov	r7, r1
 80056ae:	2200      	movs	r2, #0
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fa ffb0 	bl	8000618 <__aeabi_dmul>
 80056b8:	4b3e      	ldr	r3, [pc, #248]	; (80057b4 <atan+0x324>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	f7fa fdf6 	bl	80002ac <__adddf3>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4630      	mov	r0, r6
 80056c6:	4639      	mov	r1, r7
 80056c8:	f7fb f8d0 	bl	800086c <__aeabi_ddiv>
 80056cc:	f04f 0a02 	mov.w	sl, #2
 80056d0:	4604      	mov	r4, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	e743      	b.n	800555e <atan+0xce>
 80056d6:	462b      	mov	r3, r5
 80056d8:	ee10 2a10 	vmov	r2, s0
 80056dc:	4939      	ldr	r1, [pc, #228]	; (80057c4 <atan+0x334>)
 80056de:	2000      	movs	r0, #0
 80056e0:	f7fb f8c4 	bl	800086c <__aeabi_ddiv>
 80056e4:	f04f 0a03 	mov.w	sl, #3
 80056e8:	4604      	mov	r4, r0
 80056ea:	460d      	mov	r5, r1
 80056ec:	e737      	b.n	800555e <atan+0xce>
 80056ee:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <atan+0x338>)
 80056f0:	4e36      	ldr	r6, [pc, #216]	; (80057cc <atan+0x33c>)
 80056f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80056f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80056fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80056fe:	f7fa fdd3 	bl	80002a8 <__aeabi_dsub>
 8005702:	4622      	mov	r2, r4
 8005704:	462b      	mov	r3, r5
 8005706:	f7fa fdcf 	bl	80002a8 <__aeabi_dsub>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005712:	f7fa fdc9 	bl	80002a8 <__aeabi_dsub>
 8005716:	f1bb 0f00 	cmp.w	fp, #0
 800571a:	4604      	mov	r4, r0
 800571c:	460d      	mov	r5, r1
 800571e:	f6bf aed6 	bge.w	80054ce <atan+0x3e>
 8005722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005726:	461d      	mov	r5, r3
 8005728:	e6d1      	b.n	80054ce <atan+0x3e>
 800572a:	a51d      	add	r5, pc, #116	; (adr r5, 80057a0 <atan+0x310>)
 800572c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005730:	e6cd      	b.n	80054ce <atan+0x3e>
 8005732:	bf00      	nop
 8005734:	f3af 8000 	nop.w
 8005738:	54442d18 	.word	0x54442d18
 800573c:	bff921fb 	.word	0xbff921fb
 8005740:	8800759c 	.word	0x8800759c
 8005744:	7e37e43c 	.word	0x7e37e43c
 8005748:	e322da11 	.word	0xe322da11
 800574c:	3f90ad3a 	.word	0x3f90ad3a
 8005750:	24760deb 	.word	0x24760deb
 8005754:	3fa97b4b 	.word	0x3fa97b4b
 8005758:	a0d03d51 	.word	0xa0d03d51
 800575c:	3fb10d66 	.word	0x3fb10d66
 8005760:	c54c206e 	.word	0xc54c206e
 8005764:	3fb745cd 	.word	0x3fb745cd
 8005768:	920083ff 	.word	0x920083ff
 800576c:	3fc24924 	.word	0x3fc24924
 8005770:	5555550d 	.word	0x5555550d
 8005774:	3fd55555 	.word	0x3fd55555
 8005778:	2c6a6c2f 	.word	0x2c6a6c2f
 800577c:	bfa2b444 	.word	0xbfa2b444
 8005780:	52defd9a 	.word	0x52defd9a
 8005784:	3fadde2d 	.word	0x3fadde2d
 8005788:	af749a6d 	.word	0xaf749a6d
 800578c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005790:	fe231671 	.word	0xfe231671
 8005794:	3fbc71c6 	.word	0x3fbc71c6
 8005798:	9998ebc4 	.word	0x9998ebc4
 800579c:	3fc99999 	.word	0x3fc99999
 80057a0:	54442d18 	.word	0x54442d18
 80057a4:	3ff921fb 	.word	0x3ff921fb
 80057a8:	440fffff 	.word	0x440fffff
 80057ac:	7ff00000 	.word	0x7ff00000
 80057b0:	3fdbffff 	.word	0x3fdbffff
 80057b4:	3ff00000 	.word	0x3ff00000
 80057b8:	3ff2ffff 	.word	0x3ff2ffff
 80057bc:	40038000 	.word	0x40038000
 80057c0:	3ff80000 	.word	0x3ff80000
 80057c4:	bff00000 	.word	0xbff00000
 80057c8:	08008040 	.word	0x08008040
 80057cc:	08008020 	.word	0x08008020

080057d0 <cos>:
 80057d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057d2:	ec53 2b10 	vmov	r2, r3, d0
 80057d6:	4826      	ldr	r0, [pc, #152]	; (8005870 <cos+0xa0>)
 80057d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057dc:	4281      	cmp	r1, r0
 80057de:	dc06      	bgt.n	80057ee <cos+0x1e>
 80057e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005868 <cos+0x98>
 80057e4:	b005      	add	sp, #20
 80057e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80057ea:	f000 bab5 	b.w	8005d58 <__kernel_cos>
 80057ee:	4821      	ldr	r0, [pc, #132]	; (8005874 <cos+0xa4>)
 80057f0:	4281      	cmp	r1, r0
 80057f2:	dd09      	ble.n	8005808 <cos+0x38>
 80057f4:	ee10 0a10 	vmov	r0, s0
 80057f8:	4619      	mov	r1, r3
 80057fa:	f7fa fd55 	bl	80002a8 <__aeabi_dsub>
 80057fe:	ec41 0b10 	vmov	d0, r0, r1
 8005802:	b005      	add	sp, #20
 8005804:	f85d fb04 	ldr.w	pc, [sp], #4
 8005808:	4668      	mov	r0, sp
 800580a:	f000 f899 	bl	8005940 <__ieee754_rem_pio2>
 800580e:	f000 0003 	and.w	r0, r0, #3
 8005812:	2801      	cmp	r0, #1
 8005814:	d00b      	beq.n	800582e <cos+0x5e>
 8005816:	2802      	cmp	r0, #2
 8005818:	d016      	beq.n	8005848 <cos+0x78>
 800581a:	b9e0      	cbnz	r0, 8005856 <cos+0x86>
 800581c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005820:	ed9d 0b00 	vldr	d0, [sp]
 8005824:	f000 fa98 	bl	8005d58 <__kernel_cos>
 8005828:	ec51 0b10 	vmov	r0, r1, d0
 800582c:	e7e7      	b.n	80057fe <cos+0x2e>
 800582e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005832:	ed9d 0b00 	vldr	d0, [sp]
 8005836:	f000 fea7 	bl	8006588 <__kernel_sin>
 800583a:	ec53 2b10 	vmov	r2, r3, d0
 800583e:	ee10 0a10 	vmov	r0, s0
 8005842:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005846:	e7da      	b.n	80057fe <cos+0x2e>
 8005848:	ed9d 1b02 	vldr	d1, [sp, #8]
 800584c:	ed9d 0b00 	vldr	d0, [sp]
 8005850:	f000 fa82 	bl	8005d58 <__kernel_cos>
 8005854:	e7f1      	b.n	800583a <cos+0x6a>
 8005856:	ed9d 1b02 	vldr	d1, [sp, #8]
 800585a:	ed9d 0b00 	vldr	d0, [sp]
 800585e:	2001      	movs	r0, #1
 8005860:	f000 fe92 	bl	8006588 <__kernel_sin>
 8005864:	e7e0      	b.n	8005828 <cos+0x58>
 8005866:	bf00      	nop
	...
 8005870:	3fe921fb 	.word	0x3fe921fb
 8005874:	7fefffff 	.word	0x7fefffff

08005878 <fabs>:
 8005878:	ec51 0b10 	vmov	r0, r1, d0
 800587c:	ee10 2a10 	vmov	r2, s0
 8005880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005884:	ec43 2b10 	vmov	d0, r2, r3
 8005888:	4770      	bx	lr
 800588a:	0000      	movs	r0, r0
 800588c:	0000      	movs	r0, r0
	...

08005890 <sin>:
 8005890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005892:	ec53 2b10 	vmov	r2, r3, d0
 8005896:	4828      	ldr	r0, [pc, #160]	; (8005938 <sin+0xa8>)
 8005898:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800589c:	4281      	cmp	r1, r0
 800589e:	dc07      	bgt.n	80058b0 <sin+0x20>
 80058a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005930 <sin+0xa0>
 80058a4:	2000      	movs	r0, #0
 80058a6:	b005      	add	sp, #20
 80058a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058ac:	f000 be6c 	b.w	8006588 <__kernel_sin>
 80058b0:	4822      	ldr	r0, [pc, #136]	; (800593c <sin+0xac>)
 80058b2:	4281      	cmp	r1, r0
 80058b4:	dd09      	ble.n	80058ca <sin+0x3a>
 80058b6:	ee10 0a10 	vmov	r0, s0
 80058ba:	4619      	mov	r1, r3
 80058bc:	f7fa fcf4 	bl	80002a8 <__aeabi_dsub>
 80058c0:	ec41 0b10 	vmov	d0, r0, r1
 80058c4:	b005      	add	sp, #20
 80058c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80058ca:	4668      	mov	r0, sp
 80058cc:	f000 f838 	bl	8005940 <__ieee754_rem_pio2>
 80058d0:	f000 0003 	and.w	r0, r0, #3
 80058d4:	2801      	cmp	r0, #1
 80058d6:	d00c      	beq.n	80058f2 <sin+0x62>
 80058d8:	2802      	cmp	r0, #2
 80058da:	d011      	beq.n	8005900 <sin+0x70>
 80058dc:	b9f0      	cbnz	r0, 800591c <sin+0x8c>
 80058de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058e2:	ed9d 0b00 	vldr	d0, [sp]
 80058e6:	2001      	movs	r0, #1
 80058e8:	f000 fe4e 	bl	8006588 <__kernel_sin>
 80058ec:	ec51 0b10 	vmov	r0, r1, d0
 80058f0:	e7e6      	b.n	80058c0 <sin+0x30>
 80058f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058f6:	ed9d 0b00 	vldr	d0, [sp]
 80058fa:	f000 fa2d 	bl	8005d58 <__kernel_cos>
 80058fe:	e7f5      	b.n	80058ec <sin+0x5c>
 8005900:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005904:	ed9d 0b00 	vldr	d0, [sp]
 8005908:	2001      	movs	r0, #1
 800590a:	f000 fe3d 	bl	8006588 <__kernel_sin>
 800590e:	ec53 2b10 	vmov	r2, r3, d0
 8005912:	ee10 0a10 	vmov	r0, s0
 8005916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800591a:	e7d1      	b.n	80058c0 <sin+0x30>
 800591c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005920:	ed9d 0b00 	vldr	d0, [sp]
 8005924:	f000 fa18 	bl	8005d58 <__kernel_cos>
 8005928:	e7f1      	b.n	800590e <sin+0x7e>
 800592a:	bf00      	nop
 800592c:	f3af 8000 	nop.w
	...
 8005938:	3fe921fb 	.word	0x3fe921fb
 800593c:	7fefffff 	.word	0x7fefffff

08005940 <__ieee754_rem_pio2>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	ed2d 8b02 	vpush	{d8}
 8005948:	ec55 4b10 	vmov	r4, r5, d0
 800594c:	4bca      	ldr	r3, [pc, #808]	; (8005c78 <__ieee754_rem_pio2+0x338>)
 800594e:	b08b      	sub	sp, #44	; 0x2c
 8005950:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005954:	4598      	cmp	r8, r3
 8005956:	4682      	mov	sl, r0
 8005958:	9502      	str	r5, [sp, #8]
 800595a:	dc08      	bgt.n	800596e <__ieee754_rem_pio2+0x2e>
 800595c:	2200      	movs	r2, #0
 800595e:	2300      	movs	r3, #0
 8005960:	ed80 0b00 	vstr	d0, [r0]
 8005964:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005968:	f04f 0b00 	mov.w	fp, #0
 800596c:	e028      	b.n	80059c0 <__ieee754_rem_pio2+0x80>
 800596e:	4bc3      	ldr	r3, [pc, #780]	; (8005c7c <__ieee754_rem_pio2+0x33c>)
 8005970:	4598      	cmp	r8, r3
 8005972:	dc78      	bgt.n	8005a66 <__ieee754_rem_pio2+0x126>
 8005974:	9b02      	ldr	r3, [sp, #8]
 8005976:	4ec2      	ldr	r6, [pc, #776]	; (8005c80 <__ieee754_rem_pio2+0x340>)
 8005978:	2b00      	cmp	r3, #0
 800597a:	ee10 0a10 	vmov	r0, s0
 800597e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x300>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	4629      	mov	r1, r5
 8005986:	dd39      	ble.n	80059fc <__ieee754_rem_pio2+0xbc>
 8005988:	f7fa fc8e 	bl	80002a8 <__aeabi_dsub>
 800598c:	45b0      	cmp	r8, r6
 800598e:	4604      	mov	r4, r0
 8005990:	460d      	mov	r5, r1
 8005992:	d01b      	beq.n	80059cc <__ieee754_rem_pio2+0x8c>
 8005994:	a3ac      	add	r3, pc, #688	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x308>)
 8005996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599a:	f7fa fc85 	bl	80002a8 <__aeabi_dsub>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	e9ca 2300 	strd	r2, r3, [sl]
 80059a6:	4620      	mov	r0, r4
 80059a8:	4629      	mov	r1, r5
 80059aa:	f7fa fc7d 	bl	80002a8 <__aeabi_dsub>
 80059ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x308>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f7fa fc78 	bl	80002a8 <__aeabi_dsub>
 80059b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80059bc:	f04f 0b01 	mov.w	fp, #1
 80059c0:	4658      	mov	r0, fp
 80059c2:	b00b      	add	sp, #44	; 0x2c
 80059c4:	ecbd 8b02 	vpop	{d8}
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005c50 <__ieee754_rem_pio2+0x310>)
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f7fa fc69 	bl	80002a8 <__aeabi_dsub>
 80059d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005c58 <__ieee754_rem_pio2+0x318>)
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	4604      	mov	r4, r0
 80059de:	460d      	mov	r5, r1
 80059e0:	f7fa fc62 	bl	80002a8 <__aeabi_dsub>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	e9ca 2300 	strd	r2, r3, [sl]
 80059ec:	4620      	mov	r0, r4
 80059ee:	4629      	mov	r1, r5
 80059f0:	f7fa fc5a 	bl	80002a8 <__aeabi_dsub>
 80059f4:	a398      	add	r3, pc, #608	; (adr r3, 8005c58 <__ieee754_rem_pio2+0x318>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	e7db      	b.n	80059b4 <__ieee754_rem_pio2+0x74>
 80059fc:	f7fa fc56 	bl	80002ac <__adddf3>
 8005a00:	45b0      	cmp	r8, r6
 8005a02:	4604      	mov	r4, r0
 8005a04:	460d      	mov	r5, r1
 8005a06:	d016      	beq.n	8005a36 <__ieee754_rem_pio2+0xf6>
 8005a08:	a38f      	add	r3, pc, #572	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x308>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fc4d 	bl	80002ac <__adddf3>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	e9ca 2300 	strd	r2, r3, [sl]
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	f7fa fc43 	bl	80002a8 <__aeabi_dsub>
 8005a22:	a389      	add	r3, pc, #548	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x308>)
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f7fa fc40 	bl	80002ac <__adddf3>
 8005a2c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005a30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a34:	e7c4      	b.n	80059c0 <__ieee754_rem_pio2+0x80>
 8005a36:	a386      	add	r3, pc, #536	; (adr r3, 8005c50 <__ieee754_rem_pio2+0x310>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f7fa fc36 	bl	80002ac <__adddf3>
 8005a40:	a385      	add	r3, pc, #532	; (adr r3, 8005c58 <__ieee754_rem_pio2+0x318>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	4604      	mov	r4, r0
 8005a48:	460d      	mov	r5, r1
 8005a4a:	f7fa fc2f 	bl	80002ac <__adddf3>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	e9ca 2300 	strd	r2, r3, [sl]
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f7fa fc25 	bl	80002a8 <__aeabi_dsub>
 8005a5e:	a37e      	add	r3, pc, #504	; (adr r3, 8005c58 <__ieee754_rem_pio2+0x318>)
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	e7e0      	b.n	8005a28 <__ieee754_rem_pio2+0xe8>
 8005a66:	4b87      	ldr	r3, [pc, #540]	; (8005c84 <__ieee754_rem_pio2+0x344>)
 8005a68:	4598      	cmp	r8, r3
 8005a6a:	f300 80d9 	bgt.w	8005c20 <__ieee754_rem_pio2+0x2e0>
 8005a6e:	f7ff ff03 	bl	8005878 <fabs>
 8005a72:	ec55 4b10 	vmov	r4, r5, d0
 8005a76:	ee10 0a10 	vmov	r0, s0
 8005a7a:	a379      	add	r3, pc, #484	; (adr r3, 8005c60 <__ieee754_rem_pio2+0x320>)
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	4629      	mov	r1, r5
 8005a82:	f7fa fdc9 	bl	8000618 <__aeabi_dmul>
 8005a86:	4b80      	ldr	r3, [pc, #512]	; (8005c88 <__ieee754_rem_pio2+0x348>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f7fa fc0f 	bl	80002ac <__adddf3>
 8005a8e:	f7fb f85d 	bl	8000b4c <__aeabi_d2iz>
 8005a92:	4683      	mov	fp, r0
 8005a94:	f7fa fd56 	bl	8000544 <__aeabi_i2d>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	ec43 2b18 	vmov	d8, r2, r3
 8005aa0:	a367      	add	r3, pc, #412	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x300>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f7fa fdb7 	bl	8000618 <__aeabi_dmul>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7fa fbf9 	bl	80002a8 <__aeabi_dsub>
 8005ab6:	a364      	add	r3, pc, #400	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x308>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	4606      	mov	r6, r0
 8005abe:	460f      	mov	r7, r1
 8005ac0:	ec51 0b18 	vmov	r0, r1, d8
 8005ac4:	f7fa fda8 	bl	8000618 <__aeabi_dmul>
 8005ac8:	f1bb 0f1f 	cmp.w	fp, #31
 8005acc:	4604      	mov	r4, r0
 8005ace:	460d      	mov	r5, r1
 8005ad0:	dc0d      	bgt.n	8005aee <__ieee754_rem_pio2+0x1ae>
 8005ad2:	4b6e      	ldr	r3, [pc, #440]	; (8005c8c <__ieee754_rem_pio2+0x34c>)
 8005ad4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005adc:	4543      	cmp	r3, r8
 8005ade:	d006      	beq.n	8005aee <__ieee754_rem_pio2+0x1ae>
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fbde 	bl	80002a8 <__aeabi_dsub>
 8005aec:	e00f      	b.n	8005b0e <__ieee754_rem_pio2+0x1ce>
 8005aee:	462b      	mov	r3, r5
 8005af0:	4622      	mov	r2, r4
 8005af2:	4630      	mov	r0, r6
 8005af4:	4639      	mov	r1, r7
 8005af6:	f7fa fbd7 	bl	80002a8 <__aeabi_dsub>
 8005afa:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005afe:	9303      	str	r3, [sp, #12]
 8005b00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b04:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005b08:	f1b8 0f10 	cmp.w	r8, #16
 8005b0c:	dc02      	bgt.n	8005b14 <__ieee754_rem_pio2+0x1d4>
 8005b0e:	e9ca 0100 	strd	r0, r1, [sl]
 8005b12:	e039      	b.n	8005b88 <__ieee754_rem_pio2+0x248>
 8005b14:	a34e      	add	r3, pc, #312	; (adr r3, 8005c50 <__ieee754_rem_pio2+0x310>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	ec51 0b18 	vmov	r0, r1, d8
 8005b1e:	f7fa fd7b 	bl	8000618 <__aeabi_dmul>
 8005b22:	4604      	mov	r4, r0
 8005b24:	460d      	mov	r5, r1
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa fbbb 	bl	80002a8 <__aeabi_dsub>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4680      	mov	r8, r0
 8005b38:	4689      	mov	r9, r1
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	f7fa fbb3 	bl	80002a8 <__aeabi_dsub>
 8005b42:	4622      	mov	r2, r4
 8005b44:	462b      	mov	r3, r5
 8005b46:	f7fa fbaf 	bl	80002a8 <__aeabi_dsub>
 8005b4a:	a343      	add	r3, pc, #268	; (adr r3, 8005c58 <__ieee754_rem_pio2+0x318>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	4604      	mov	r4, r0
 8005b52:	460d      	mov	r5, r1
 8005b54:	ec51 0b18 	vmov	r0, r1, d8
 8005b58:	f7fa fd5e 	bl	8000618 <__aeabi_dmul>
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	462b      	mov	r3, r5
 8005b60:	f7fa fba2 	bl	80002a8 <__aeabi_dsub>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4604      	mov	r4, r0
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	4649      	mov	r1, r9
 8005b70:	f7fa fb9a 	bl	80002a8 <__aeabi_dsub>
 8005b74:	9a03      	ldr	r2, [sp, #12]
 8005b76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b31      	cmp	r3, #49	; 0x31
 8005b7e:	dc24      	bgt.n	8005bca <__ieee754_rem_pio2+0x28a>
 8005b80:	e9ca 0100 	strd	r0, r1, [sl]
 8005b84:	4646      	mov	r6, r8
 8005b86:	464f      	mov	r7, r9
 8005b88:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	4642      	mov	r2, r8
 8005b90:	464b      	mov	r3, r9
 8005b92:	4639      	mov	r1, r7
 8005b94:	f7fa fb88 	bl	80002a8 <__aeabi_dsub>
 8005b98:	462b      	mov	r3, r5
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	f7fa fb84 	bl	80002a8 <__aeabi_dsub>
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005ba8:	f6bf af0a 	bge.w	80059c0 <__ieee754_rem_pio2+0x80>
 8005bac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005bb0:	f8ca 3004 	str.w	r3, [sl, #4]
 8005bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bb8:	f8ca 8000 	str.w	r8, [sl]
 8005bbc:	f8ca 0008 	str.w	r0, [sl, #8]
 8005bc0:	f8ca 300c 	str.w	r3, [sl, #12]
 8005bc4:	f1cb 0b00 	rsb	fp, fp, #0
 8005bc8:	e6fa      	b.n	80059c0 <__ieee754_rem_pio2+0x80>
 8005bca:	a327      	add	r3, pc, #156	; (adr r3, 8005c68 <__ieee754_rem_pio2+0x328>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	ec51 0b18 	vmov	r0, r1, d8
 8005bd4:	f7fa fd20 	bl	8000618 <__aeabi_dmul>
 8005bd8:	4604      	mov	r4, r0
 8005bda:	460d      	mov	r5, r1
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4640      	mov	r0, r8
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa fb60 	bl	80002a8 <__aeabi_dsub>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4606      	mov	r6, r0
 8005bee:	460f      	mov	r7, r1
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	f7fa fb58 	bl	80002a8 <__aeabi_dsub>
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	f7fa fb54 	bl	80002a8 <__aeabi_dsub>
 8005c00:	a31b      	add	r3, pc, #108	; (adr r3, 8005c70 <__ieee754_rem_pio2+0x330>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	4604      	mov	r4, r0
 8005c08:	460d      	mov	r5, r1
 8005c0a:	ec51 0b18 	vmov	r0, r1, d8
 8005c0e:	f7fa fd03 	bl	8000618 <__aeabi_dmul>
 8005c12:	4622      	mov	r2, r4
 8005c14:	462b      	mov	r3, r5
 8005c16:	f7fa fb47 	bl	80002a8 <__aeabi_dsub>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	460d      	mov	r5, r1
 8005c1e:	e75f      	b.n	8005ae0 <__ieee754_rem_pio2+0x1a0>
 8005c20:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <__ieee754_rem_pio2+0x350>)
 8005c22:	4598      	cmp	r8, r3
 8005c24:	dd36      	ble.n	8005c94 <__ieee754_rem_pio2+0x354>
 8005c26:	ee10 2a10 	vmov	r2, s0
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fb3a 	bl	80002a8 <__aeabi_dsub>
 8005c34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c38:	e9ca 0100 	strd	r0, r1, [sl]
 8005c3c:	e694      	b.n	8005968 <__ieee754_rem_pio2+0x28>
 8005c3e:	bf00      	nop
 8005c40:	54400000 	.word	0x54400000
 8005c44:	3ff921fb 	.word	0x3ff921fb
 8005c48:	1a626331 	.word	0x1a626331
 8005c4c:	3dd0b461 	.word	0x3dd0b461
 8005c50:	1a600000 	.word	0x1a600000
 8005c54:	3dd0b461 	.word	0x3dd0b461
 8005c58:	2e037073 	.word	0x2e037073
 8005c5c:	3ba3198a 	.word	0x3ba3198a
 8005c60:	6dc9c883 	.word	0x6dc9c883
 8005c64:	3fe45f30 	.word	0x3fe45f30
 8005c68:	2e000000 	.word	0x2e000000
 8005c6c:	3ba3198a 	.word	0x3ba3198a
 8005c70:	252049c1 	.word	0x252049c1
 8005c74:	397b839a 	.word	0x397b839a
 8005c78:	3fe921fb 	.word	0x3fe921fb
 8005c7c:	4002d97b 	.word	0x4002d97b
 8005c80:	3ff921fb 	.word	0x3ff921fb
 8005c84:	413921fb 	.word	0x413921fb
 8005c88:	3fe00000 	.word	0x3fe00000
 8005c8c:	08008060 	.word	0x08008060
 8005c90:	7fefffff 	.word	0x7fefffff
 8005c94:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005c98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005c9c:	ee10 0a10 	vmov	r0, s0
 8005ca0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005ca4:	ee10 6a10 	vmov	r6, s0
 8005ca8:	460f      	mov	r7, r1
 8005caa:	f7fa ff4f 	bl	8000b4c <__aeabi_d2iz>
 8005cae:	f7fa fc49 	bl	8000544 <__aeabi_i2d>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	4639      	mov	r1, r7
 8005cba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cbe:	f7fa faf3 	bl	80002a8 <__aeabi_dsub>
 8005cc2:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <__ieee754_rem_pio2+0x410>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f7fa fca7 	bl	8000618 <__aeabi_dmul>
 8005cca:	460f      	mov	r7, r1
 8005ccc:	4606      	mov	r6, r0
 8005cce:	f7fa ff3d 	bl	8000b4c <__aeabi_d2iz>
 8005cd2:	f7fa fc37 	bl	8000544 <__aeabi_i2d>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4630      	mov	r0, r6
 8005cdc:	4639      	mov	r1, r7
 8005cde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ce2:	f7fa fae1 	bl	80002a8 <__aeabi_dsub>
 8005ce6:	4b1a      	ldr	r3, [pc, #104]	; (8005d50 <__ieee754_rem_pio2+0x410>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f7fa fc95 	bl	8000618 <__aeabi_dmul>
 8005cee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005cf2:	ad04      	add	r5, sp, #16
 8005cf4:	f04f 0803 	mov.w	r8, #3
 8005cf8:	46a9      	mov	r9, r5
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	2700      	movs	r7, #0
 8005cfe:	4632      	mov	r2, r6
 8005d00:	463b      	mov	r3, r7
 8005d02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005d06:	46c3      	mov	fp, r8
 8005d08:	3d08      	subs	r5, #8
 8005d0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005d0e:	f7fa feeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d1f3      	bne.n	8005cfe <__ieee754_rem_pio2+0x3be>
 8005d16:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <__ieee754_rem_pio2+0x414>)
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4622      	mov	r2, r4
 8005d20:	465b      	mov	r3, fp
 8005d22:	4651      	mov	r1, sl
 8005d24:	4648      	mov	r0, r9
 8005d26:	f000 f8df 	bl	8005ee8 <__kernel_rem_pio2>
 8005d2a:	9b02      	ldr	r3, [sp, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	4683      	mov	fp, r0
 8005d30:	f6bf ae46 	bge.w	80059c0 <__ieee754_rem_pio2+0x80>
 8005d34:	e9da 2100 	ldrd	r2, r1, [sl]
 8005d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d3c:	e9ca 2300 	strd	r2, r3, [sl]
 8005d40:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005d44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d48:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005d4c:	e73a      	b.n	8005bc4 <__ieee754_rem_pio2+0x284>
 8005d4e:	bf00      	nop
 8005d50:	41700000 	.word	0x41700000
 8005d54:	080080e0 	.word	0x080080e0

08005d58 <__kernel_cos>:
 8005d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	ec57 6b10 	vmov	r6, r7, d0
 8005d60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005d64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005d68:	ed8d 1b00 	vstr	d1, [sp]
 8005d6c:	da07      	bge.n	8005d7e <__kernel_cos+0x26>
 8005d6e:	ee10 0a10 	vmov	r0, s0
 8005d72:	4639      	mov	r1, r7
 8005d74:	f7fa feea 	bl	8000b4c <__aeabi_d2iz>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f000 8088 	beq.w	8005e8e <__kernel_cos+0x136>
 8005d7e:	4632      	mov	r2, r6
 8005d80:	463b      	mov	r3, r7
 8005d82:	4630      	mov	r0, r6
 8005d84:	4639      	mov	r1, r7
 8005d86:	f7fa fc47 	bl	8000618 <__aeabi_dmul>
 8005d8a:	4b51      	ldr	r3, [pc, #324]	; (8005ed0 <__kernel_cos+0x178>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	460d      	mov	r5, r1
 8005d92:	f7fa fc41 	bl	8000618 <__aeabi_dmul>
 8005d96:	a340      	add	r3, pc, #256	; (adr r3, 8005e98 <__kernel_cos+0x140>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	4682      	mov	sl, r0
 8005d9e:	468b      	mov	fp, r1
 8005da0:	4620      	mov	r0, r4
 8005da2:	4629      	mov	r1, r5
 8005da4:	f7fa fc38 	bl	8000618 <__aeabi_dmul>
 8005da8:	a33d      	add	r3, pc, #244	; (adr r3, 8005ea0 <__kernel_cos+0x148>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa fa7d 	bl	80002ac <__adddf3>
 8005db2:	4622      	mov	r2, r4
 8005db4:	462b      	mov	r3, r5
 8005db6:	f7fa fc2f 	bl	8000618 <__aeabi_dmul>
 8005dba:	a33b      	add	r3, pc, #236	; (adr r3, 8005ea8 <__kernel_cos+0x150>)
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f7fa fa72 	bl	80002a8 <__aeabi_dsub>
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	f7fa fc26 	bl	8000618 <__aeabi_dmul>
 8005dcc:	a338      	add	r3, pc, #224	; (adr r3, 8005eb0 <__kernel_cos+0x158>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fa6b 	bl	80002ac <__adddf3>
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	f7fa fc1d 	bl	8000618 <__aeabi_dmul>
 8005dde:	a336      	add	r3, pc, #216	; (adr r3, 8005eb8 <__kernel_cos+0x160>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fa60 	bl	80002a8 <__aeabi_dsub>
 8005de8:	4622      	mov	r2, r4
 8005dea:	462b      	mov	r3, r5
 8005dec:	f7fa fc14 	bl	8000618 <__aeabi_dmul>
 8005df0:	a333      	add	r3, pc, #204	; (adr r3, 8005ec0 <__kernel_cos+0x168>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa fa59 	bl	80002ac <__adddf3>
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	f7fa fc0b 	bl	8000618 <__aeabi_dmul>
 8005e02:	4622      	mov	r2, r4
 8005e04:	462b      	mov	r3, r5
 8005e06:	f7fa fc07 	bl	8000618 <__aeabi_dmul>
 8005e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e0e:	4604      	mov	r4, r0
 8005e10:	460d      	mov	r5, r1
 8005e12:	4630      	mov	r0, r6
 8005e14:	4639      	mov	r1, r7
 8005e16:	f7fa fbff 	bl	8000618 <__aeabi_dmul>
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4620      	mov	r0, r4
 8005e22:	f7fa fa41 	bl	80002a8 <__aeabi_dsub>
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <__kernel_cos+0x17c>)
 8005e28:	4598      	cmp	r8, r3
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	dc10      	bgt.n	8005e52 <__kernel_cos+0xfa>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4650      	mov	r0, sl
 8005e36:	4659      	mov	r1, fp
 8005e38:	f7fa fa36 	bl	80002a8 <__aeabi_dsub>
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4926      	ldr	r1, [pc, #152]	; (8005ed8 <__kernel_cos+0x180>)
 8005e40:	4602      	mov	r2, r0
 8005e42:	2000      	movs	r0, #0
 8005e44:	f7fa fa30 	bl	80002a8 <__aeabi_dsub>
 8005e48:	ec41 0b10 	vmov	d0, r0, r1
 8005e4c:	b003      	add	sp, #12
 8005e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e52:	4b22      	ldr	r3, [pc, #136]	; (8005edc <__kernel_cos+0x184>)
 8005e54:	4920      	ldr	r1, [pc, #128]	; (8005ed8 <__kernel_cos+0x180>)
 8005e56:	4598      	cmp	r8, r3
 8005e58:	bfcc      	ite	gt
 8005e5a:	4d21      	ldrgt	r5, [pc, #132]	; (8005ee0 <__kernel_cos+0x188>)
 8005e5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005e60:	2400      	movs	r4, #0
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	2000      	movs	r0, #0
 8005e68:	f7fa fa1e 	bl	80002a8 <__aeabi_dsub>
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4680      	mov	r8, r0
 8005e70:	4689      	mov	r9, r1
 8005e72:	462b      	mov	r3, r5
 8005e74:	4650      	mov	r0, sl
 8005e76:	4659      	mov	r1, fp
 8005e78:	f7fa fa16 	bl	80002a8 <__aeabi_dsub>
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	463b      	mov	r3, r7
 8005e80:	f7fa fa12 	bl	80002a8 <__aeabi_dsub>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4640      	mov	r0, r8
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	e7da      	b.n	8005e44 <__kernel_cos+0xec>
 8005e8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005ec8 <__kernel_cos+0x170>
 8005e92:	e7db      	b.n	8005e4c <__kernel_cos+0xf4>
 8005e94:	f3af 8000 	nop.w
 8005e98:	be8838d4 	.word	0xbe8838d4
 8005e9c:	bda8fae9 	.word	0xbda8fae9
 8005ea0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005ea4:	3e21ee9e 	.word	0x3e21ee9e
 8005ea8:	809c52ad 	.word	0x809c52ad
 8005eac:	3e927e4f 	.word	0x3e927e4f
 8005eb0:	19cb1590 	.word	0x19cb1590
 8005eb4:	3efa01a0 	.word	0x3efa01a0
 8005eb8:	16c15177 	.word	0x16c15177
 8005ebc:	3f56c16c 	.word	0x3f56c16c
 8005ec0:	5555554c 	.word	0x5555554c
 8005ec4:	3fa55555 	.word	0x3fa55555
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	3ff00000 	.word	0x3ff00000
 8005ed0:	3fe00000 	.word	0x3fe00000
 8005ed4:	3fd33332 	.word	0x3fd33332
 8005ed8:	3ff00000 	.word	0x3ff00000
 8005edc:	3fe90000 	.word	0x3fe90000
 8005ee0:	3fd20000 	.word	0x3fd20000
 8005ee4:	00000000 	.word	0x00000000

08005ee8 <__kernel_rem_pio2>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	ed2d 8b02 	vpush	{d8}
 8005ef0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005ef4:	f112 0f14 	cmn.w	r2, #20
 8005ef8:	9308      	str	r3, [sp, #32]
 8005efa:	9101      	str	r1, [sp, #4]
 8005efc:	4bc4      	ldr	r3, [pc, #784]	; (8006210 <__kernel_rem_pio2+0x328>)
 8005efe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005f00:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f06:	9302      	str	r3, [sp, #8]
 8005f08:	9b08      	ldr	r3, [sp, #32]
 8005f0a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005f0e:	bfa8      	it	ge
 8005f10:	1ed4      	subge	r4, r2, #3
 8005f12:	9306      	str	r3, [sp, #24]
 8005f14:	bfb2      	itee	lt
 8005f16:	2400      	movlt	r4, #0
 8005f18:	2318      	movge	r3, #24
 8005f1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005f1e:	f06f 0317 	mvn.w	r3, #23
 8005f22:	fb04 3303 	mla	r3, r4, r3, r3
 8005f26:	eb03 0a02 	add.w	sl, r3, r2
 8005f2a:	9b02      	ldr	r3, [sp, #8]
 8005f2c:	9a06      	ldr	r2, [sp, #24]
 8005f2e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006200 <__kernel_rem_pio2+0x318>
 8005f32:	eb03 0802 	add.w	r8, r3, r2
 8005f36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005f38:	1aa7      	subs	r7, r4, r2
 8005f3a:	ae22      	add	r6, sp, #136	; 0x88
 8005f3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f40:	2500      	movs	r5, #0
 8005f42:	4545      	cmp	r5, r8
 8005f44:	dd13      	ble.n	8005f6e <__kernel_rem_pio2+0x86>
 8005f46:	9b08      	ldr	r3, [sp, #32]
 8005f48:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006200 <__kernel_rem_pio2+0x318>
 8005f4c:	aa22      	add	r2, sp, #136	; 0x88
 8005f4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005f52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005f56:	f04f 0800 	mov.w	r8, #0
 8005f5a:	9b02      	ldr	r3, [sp, #8]
 8005f5c:	4598      	cmp	r8, r3
 8005f5e:	dc2f      	bgt.n	8005fc0 <__kernel_rem_pio2+0xd8>
 8005f60:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005f64:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005f68:	462f      	mov	r7, r5
 8005f6a:	2600      	movs	r6, #0
 8005f6c:	e01b      	b.n	8005fa6 <__kernel_rem_pio2+0xbe>
 8005f6e:	42ef      	cmn	r7, r5
 8005f70:	d407      	bmi.n	8005f82 <__kernel_rem_pio2+0x9a>
 8005f72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005f76:	f7fa fae5 	bl	8000544 <__aeabi_i2d>
 8005f7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005f7e:	3501      	adds	r5, #1
 8005f80:	e7df      	b.n	8005f42 <__kernel_rem_pio2+0x5a>
 8005f82:	ec51 0b18 	vmov	r0, r1, d8
 8005f86:	e7f8      	b.n	8005f7a <__kernel_rem_pio2+0x92>
 8005f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005f90:	f7fa fb42 	bl	8000618 <__aeabi_dmul>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f9c:	f7fa f986 	bl	80002ac <__adddf3>
 8005fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	9b06      	ldr	r3, [sp, #24]
 8005fa8:	429e      	cmp	r6, r3
 8005faa:	f1a7 0708 	sub.w	r7, r7, #8
 8005fae:	ddeb      	ble.n	8005f88 <__kernel_rem_pio2+0xa0>
 8005fb0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005fb4:	f108 0801 	add.w	r8, r8, #1
 8005fb8:	ecab 7b02 	vstmia	fp!, {d7}
 8005fbc:	3508      	adds	r5, #8
 8005fbe:	e7cc      	b.n	8005f5a <__kernel_rem_pio2+0x72>
 8005fc0:	9b02      	ldr	r3, [sp, #8]
 8005fc2:	aa0e      	add	r2, sp, #56	; 0x38
 8005fc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005fc8:	930d      	str	r3, [sp, #52]	; 0x34
 8005fca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005fcc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005fd0:	9c02      	ldr	r4, [sp, #8]
 8005fd2:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd4:	00e3      	lsls	r3, r4, #3
 8005fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fd8:	ab9a      	add	r3, sp, #616	; 0x268
 8005fda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fde:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005fe2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005fe6:	ab72      	add	r3, sp, #456	; 0x1c8
 8005fe8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005fec:	46c3      	mov	fp, r8
 8005fee:	46a1      	mov	r9, r4
 8005ff0:	f1b9 0f00 	cmp.w	r9, #0
 8005ff4:	f1a5 0508 	sub.w	r5, r5, #8
 8005ff8:	dc77      	bgt.n	80060ea <__kernel_rem_pio2+0x202>
 8005ffa:	ec47 6b10 	vmov	d0, r6, r7
 8005ffe:	4650      	mov	r0, sl
 8006000:	f000 fc02 	bl	8006808 <scalbn>
 8006004:	ec57 6b10 	vmov	r6, r7, d0
 8006008:	2200      	movs	r2, #0
 800600a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800600e:	ee10 0a10 	vmov	r0, s0
 8006012:	4639      	mov	r1, r7
 8006014:	f7fa fb00 	bl	8000618 <__aeabi_dmul>
 8006018:	ec41 0b10 	vmov	d0, r0, r1
 800601c:	f000 fb74 	bl	8006708 <floor>
 8006020:	4b7c      	ldr	r3, [pc, #496]	; (8006214 <__kernel_rem_pio2+0x32c>)
 8006022:	ec51 0b10 	vmov	r0, r1, d0
 8006026:	2200      	movs	r2, #0
 8006028:	f7fa faf6 	bl	8000618 <__aeabi_dmul>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4630      	mov	r0, r6
 8006032:	4639      	mov	r1, r7
 8006034:	f7fa f938 	bl	80002a8 <__aeabi_dsub>
 8006038:	460f      	mov	r7, r1
 800603a:	4606      	mov	r6, r0
 800603c:	f7fa fd86 	bl	8000b4c <__aeabi_d2iz>
 8006040:	9004      	str	r0, [sp, #16]
 8006042:	f7fa fa7f 	bl	8000544 <__aeabi_i2d>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa f92b 	bl	80002a8 <__aeabi_dsub>
 8006052:	f1ba 0f00 	cmp.w	sl, #0
 8006056:	4606      	mov	r6, r0
 8006058:	460f      	mov	r7, r1
 800605a:	dd6d      	ble.n	8006138 <__kernel_rem_pio2+0x250>
 800605c:	1e62      	subs	r2, r4, #1
 800605e:	ab0e      	add	r3, sp, #56	; 0x38
 8006060:	9d04      	ldr	r5, [sp, #16]
 8006062:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006066:	f1ca 0118 	rsb	r1, sl, #24
 800606a:	fa40 f301 	asr.w	r3, r0, r1
 800606e:	441d      	add	r5, r3
 8006070:	408b      	lsls	r3, r1
 8006072:	1ac0      	subs	r0, r0, r3
 8006074:	ab0e      	add	r3, sp, #56	; 0x38
 8006076:	9504      	str	r5, [sp, #16]
 8006078:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800607c:	f1ca 0317 	rsb	r3, sl, #23
 8006080:	fa40 fb03 	asr.w	fp, r0, r3
 8006084:	f1bb 0f00 	cmp.w	fp, #0
 8006088:	dd65      	ble.n	8006156 <__kernel_rem_pio2+0x26e>
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	2200      	movs	r2, #0
 800608e:	3301      	adds	r3, #1
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	4615      	mov	r5, r2
 8006094:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006098:	4294      	cmp	r4, r2
 800609a:	f300 809c 	bgt.w	80061d6 <__kernel_rem_pio2+0x2ee>
 800609e:	f1ba 0f00 	cmp.w	sl, #0
 80060a2:	dd07      	ble.n	80060b4 <__kernel_rem_pio2+0x1cc>
 80060a4:	f1ba 0f01 	cmp.w	sl, #1
 80060a8:	f000 80c0 	beq.w	800622c <__kernel_rem_pio2+0x344>
 80060ac:	f1ba 0f02 	cmp.w	sl, #2
 80060b0:	f000 80c6 	beq.w	8006240 <__kernel_rem_pio2+0x358>
 80060b4:	f1bb 0f02 	cmp.w	fp, #2
 80060b8:	d14d      	bne.n	8006156 <__kernel_rem_pio2+0x26e>
 80060ba:	4632      	mov	r2, r6
 80060bc:	463b      	mov	r3, r7
 80060be:	4956      	ldr	r1, [pc, #344]	; (8006218 <__kernel_rem_pio2+0x330>)
 80060c0:	2000      	movs	r0, #0
 80060c2:	f7fa f8f1 	bl	80002a8 <__aeabi_dsub>
 80060c6:	4606      	mov	r6, r0
 80060c8:	460f      	mov	r7, r1
 80060ca:	2d00      	cmp	r5, #0
 80060cc:	d043      	beq.n	8006156 <__kernel_rem_pio2+0x26e>
 80060ce:	4650      	mov	r0, sl
 80060d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006208 <__kernel_rem_pio2+0x320>
 80060d4:	f000 fb98 	bl	8006808 <scalbn>
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	ec53 2b10 	vmov	r2, r3, d0
 80060e0:	f7fa f8e2 	bl	80002a8 <__aeabi_dsub>
 80060e4:	4606      	mov	r6, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	e035      	b.n	8006156 <__kernel_rem_pio2+0x26e>
 80060ea:	4b4c      	ldr	r3, [pc, #304]	; (800621c <__kernel_rem_pio2+0x334>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	4630      	mov	r0, r6
 80060f0:	4639      	mov	r1, r7
 80060f2:	f7fa fa91 	bl	8000618 <__aeabi_dmul>
 80060f6:	f7fa fd29 	bl	8000b4c <__aeabi_d2iz>
 80060fa:	f7fa fa23 	bl	8000544 <__aeabi_i2d>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	ec43 2b18 	vmov	d8, r2, r3
 8006106:	4b46      	ldr	r3, [pc, #280]	; (8006220 <__kernel_rem_pio2+0x338>)
 8006108:	2200      	movs	r2, #0
 800610a:	f7fa fa85 	bl	8000618 <__aeabi_dmul>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4630      	mov	r0, r6
 8006114:	4639      	mov	r1, r7
 8006116:	f7fa f8c7 	bl	80002a8 <__aeabi_dsub>
 800611a:	f7fa fd17 	bl	8000b4c <__aeabi_d2iz>
 800611e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006122:	f84b 0b04 	str.w	r0, [fp], #4
 8006126:	ec51 0b18 	vmov	r0, r1, d8
 800612a:	f7fa f8bf 	bl	80002ac <__adddf3>
 800612e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006132:	4606      	mov	r6, r0
 8006134:	460f      	mov	r7, r1
 8006136:	e75b      	b.n	8005ff0 <__kernel_rem_pio2+0x108>
 8006138:	d106      	bne.n	8006148 <__kernel_rem_pio2+0x260>
 800613a:	1e63      	subs	r3, r4, #1
 800613c:	aa0e      	add	r2, sp, #56	; 0x38
 800613e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006142:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006146:	e79d      	b.n	8006084 <__kernel_rem_pio2+0x19c>
 8006148:	4b36      	ldr	r3, [pc, #216]	; (8006224 <__kernel_rem_pio2+0x33c>)
 800614a:	2200      	movs	r2, #0
 800614c:	f7fa fcea 	bl	8000b24 <__aeabi_dcmpge>
 8006150:	2800      	cmp	r0, #0
 8006152:	d13d      	bne.n	80061d0 <__kernel_rem_pio2+0x2e8>
 8006154:	4683      	mov	fp, r0
 8006156:	2200      	movs	r2, #0
 8006158:	2300      	movs	r3, #0
 800615a:	4630      	mov	r0, r6
 800615c:	4639      	mov	r1, r7
 800615e:	f7fa fcc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006162:	2800      	cmp	r0, #0
 8006164:	f000 80c0 	beq.w	80062e8 <__kernel_rem_pio2+0x400>
 8006168:	1e65      	subs	r5, r4, #1
 800616a:	462b      	mov	r3, r5
 800616c:	2200      	movs	r2, #0
 800616e:	9902      	ldr	r1, [sp, #8]
 8006170:	428b      	cmp	r3, r1
 8006172:	da6c      	bge.n	800624e <__kernel_rem_pio2+0x366>
 8006174:	2a00      	cmp	r2, #0
 8006176:	f000 8089 	beq.w	800628c <__kernel_rem_pio2+0x3a4>
 800617a:	ab0e      	add	r3, sp, #56	; 0x38
 800617c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006180:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80ad 	beq.w	80062e4 <__kernel_rem_pio2+0x3fc>
 800618a:	4650      	mov	r0, sl
 800618c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006208 <__kernel_rem_pio2+0x320>
 8006190:	f000 fb3a 	bl	8006808 <scalbn>
 8006194:	ab9a      	add	r3, sp, #616	; 0x268
 8006196:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800619a:	ec57 6b10 	vmov	r6, r7, d0
 800619e:	00ec      	lsls	r4, r5, #3
 80061a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80061a4:	46aa      	mov	sl, r5
 80061a6:	f1ba 0f00 	cmp.w	sl, #0
 80061aa:	f280 80d6 	bge.w	800635a <__kernel_rem_pio2+0x472>
 80061ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006200 <__kernel_rem_pio2+0x318>
 80061b2:	462e      	mov	r6, r5
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	f2c0 8104 	blt.w	80063c2 <__kernel_rem_pio2+0x4da>
 80061ba:	ab72      	add	r3, sp, #456	; 0x1c8
 80061bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80061c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006228 <__kernel_rem_pio2+0x340>
 80061c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80061c8:	f04f 0800 	mov.w	r8, #0
 80061cc:	1baf      	subs	r7, r5, r6
 80061ce:	e0ea      	b.n	80063a6 <__kernel_rem_pio2+0x4be>
 80061d0:	f04f 0b02 	mov.w	fp, #2
 80061d4:	e759      	b.n	800608a <__kernel_rem_pio2+0x1a2>
 80061d6:	f8d8 3000 	ldr.w	r3, [r8]
 80061da:	b955      	cbnz	r5, 80061f2 <__kernel_rem_pio2+0x30a>
 80061dc:	b123      	cbz	r3, 80061e8 <__kernel_rem_pio2+0x300>
 80061de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80061e2:	f8c8 3000 	str.w	r3, [r8]
 80061e6:	2301      	movs	r3, #1
 80061e8:	3201      	adds	r2, #1
 80061ea:	f108 0804 	add.w	r8, r8, #4
 80061ee:	461d      	mov	r5, r3
 80061f0:	e752      	b.n	8006098 <__kernel_rem_pio2+0x1b0>
 80061f2:	1acb      	subs	r3, r1, r3
 80061f4:	f8c8 3000 	str.w	r3, [r8]
 80061f8:	462b      	mov	r3, r5
 80061fa:	e7f5      	b.n	80061e8 <__kernel_rem_pio2+0x300>
 80061fc:	f3af 8000 	nop.w
	...
 800620c:	3ff00000 	.word	0x3ff00000
 8006210:	08008228 	.word	0x08008228
 8006214:	40200000 	.word	0x40200000
 8006218:	3ff00000 	.word	0x3ff00000
 800621c:	3e700000 	.word	0x3e700000
 8006220:	41700000 	.word	0x41700000
 8006224:	3fe00000 	.word	0x3fe00000
 8006228:	080081e8 	.word	0x080081e8
 800622c:	1e62      	subs	r2, r4, #1
 800622e:	ab0e      	add	r3, sp, #56	; 0x38
 8006230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006234:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006238:	a90e      	add	r1, sp, #56	; 0x38
 800623a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800623e:	e739      	b.n	80060b4 <__kernel_rem_pio2+0x1cc>
 8006240:	1e62      	subs	r2, r4, #1
 8006242:	ab0e      	add	r3, sp, #56	; 0x38
 8006244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006248:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800624c:	e7f4      	b.n	8006238 <__kernel_rem_pio2+0x350>
 800624e:	a90e      	add	r1, sp, #56	; 0x38
 8006250:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006254:	3b01      	subs	r3, #1
 8006256:	430a      	orrs	r2, r1
 8006258:	e789      	b.n	800616e <__kernel_rem_pio2+0x286>
 800625a:	3301      	adds	r3, #1
 800625c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006260:	2900      	cmp	r1, #0
 8006262:	d0fa      	beq.n	800625a <__kernel_rem_pio2+0x372>
 8006264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006266:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800626a:	446a      	add	r2, sp
 800626c:	3a98      	subs	r2, #152	; 0x98
 800626e:	920a      	str	r2, [sp, #40]	; 0x28
 8006270:	9a08      	ldr	r2, [sp, #32]
 8006272:	18e3      	adds	r3, r4, r3
 8006274:	18a5      	adds	r5, r4, r2
 8006276:	aa22      	add	r2, sp, #136	; 0x88
 8006278:	f104 0801 	add.w	r8, r4, #1
 800627c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	4543      	cmp	r3, r8
 8006286:	da04      	bge.n	8006292 <__kernel_rem_pio2+0x3aa>
 8006288:	461c      	mov	r4, r3
 800628a:	e6a3      	b.n	8005fd4 <__kernel_rem_pio2+0xec>
 800628c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800628e:	2301      	movs	r3, #1
 8006290:	e7e4      	b.n	800625c <__kernel_rem_pio2+0x374>
 8006292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006294:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006298:	f7fa f954 	bl	8000544 <__aeabi_i2d>
 800629c:	e8e5 0102 	strd	r0, r1, [r5], #8
 80062a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a2:	46ab      	mov	fp, r5
 80062a4:	461c      	mov	r4, r3
 80062a6:	f04f 0900 	mov.w	r9, #0
 80062aa:	2600      	movs	r6, #0
 80062ac:	2700      	movs	r7, #0
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	4599      	cmp	r9, r3
 80062b2:	dd06      	ble.n	80062c2 <__kernel_rem_pio2+0x3da>
 80062b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80062ba:	f108 0801 	add.w	r8, r8, #1
 80062be:	930a      	str	r3, [sp, #40]	; 0x28
 80062c0:	e7df      	b.n	8006282 <__kernel_rem_pio2+0x39a>
 80062c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80062c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80062ca:	f7fa f9a5 	bl	8000618 <__aeabi_dmul>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4630      	mov	r0, r6
 80062d4:	4639      	mov	r1, r7
 80062d6:	f7f9 ffe9 	bl	80002ac <__adddf3>
 80062da:	f109 0901 	add.w	r9, r9, #1
 80062de:	4606      	mov	r6, r0
 80062e0:	460f      	mov	r7, r1
 80062e2:	e7e4      	b.n	80062ae <__kernel_rem_pio2+0x3c6>
 80062e4:	3d01      	subs	r5, #1
 80062e6:	e748      	b.n	800617a <__kernel_rem_pio2+0x292>
 80062e8:	ec47 6b10 	vmov	d0, r6, r7
 80062ec:	f1ca 0000 	rsb	r0, sl, #0
 80062f0:	f000 fa8a 	bl	8006808 <scalbn>
 80062f4:	ec57 6b10 	vmov	r6, r7, d0
 80062f8:	4ba0      	ldr	r3, [pc, #640]	; (800657c <__kernel_rem_pio2+0x694>)
 80062fa:	ee10 0a10 	vmov	r0, s0
 80062fe:	2200      	movs	r2, #0
 8006300:	4639      	mov	r1, r7
 8006302:	f7fa fc0f 	bl	8000b24 <__aeabi_dcmpge>
 8006306:	b1f8      	cbz	r0, 8006348 <__kernel_rem_pio2+0x460>
 8006308:	4b9d      	ldr	r3, [pc, #628]	; (8006580 <__kernel_rem_pio2+0x698>)
 800630a:	2200      	movs	r2, #0
 800630c:	4630      	mov	r0, r6
 800630e:	4639      	mov	r1, r7
 8006310:	f7fa f982 	bl	8000618 <__aeabi_dmul>
 8006314:	f7fa fc1a 	bl	8000b4c <__aeabi_d2iz>
 8006318:	4680      	mov	r8, r0
 800631a:	f7fa f913 	bl	8000544 <__aeabi_i2d>
 800631e:	4b97      	ldr	r3, [pc, #604]	; (800657c <__kernel_rem_pio2+0x694>)
 8006320:	2200      	movs	r2, #0
 8006322:	f7fa f979 	bl	8000618 <__aeabi_dmul>
 8006326:	460b      	mov	r3, r1
 8006328:	4602      	mov	r2, r0
 800632a:	4639      	mov	r1, r7
 800632c:	4630      	mov	r0, r6
 800632e:	f7f9 ffbb 	bl	80002a8 <__aeabi_dsub>
 8006332:	f7fa fc0b 	bl	8000b4c <__aeabi_d2iz>
 8006336:	1c65      	adds	r5, r4, #1
 8006338:	ab0e      	add	r3, sp, #56	; 0x38
 800633a:	f10a 0a18 	add.w	sl, sl, #24
 800633e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006342:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006346:	e720      	b.n	800618a <__kernel_rem_pio2+0x2a2>
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	f7fa fbfe 	bl	8000b4c <__aeabi_d2iz>
 8006350:	ab0e      	add	r3, sp, #56	; 0x38
 8006352:	4625      	mov	r5, r4
 8006354:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006358:	e717      	b.n	800618a <__kernel_rem_pio2+0x2a2>
 800635a:	ab0e      	add	r3, sp, #56	; 0x38
 800635c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006360:	f7fa f8f0 	bl	8000544 <__aeabi_i2d>
 8006364:	4632      	mov	r2, r6
 8006366:	463b      	mov	r3, r7
 8006368:	f7fa f956 	bl	8000618 <__aeabi_dmul>
 800636c:	4b84      	ldr	r3, [pc, #528]	; (8006580 <__kernel_rem_pio2+0x698>)
 800636e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006372:	2200      	movs	r2, #0
 8006374:	4630      	mov	r0, r6
 8006376:	4639      	mov	r1, r7
 8006378:	f7fa f94e 	bl	8000618 <__aeabi_dmul>
 800637c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006380:	4606      	mov	r6, r0
 8006382:	460f      	mov	r7, r1
 8006384:	e70f      	b.n	80061a6 <__kernel_rem_pio2+0x2be>
 8006386:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800638a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800638e:	f7fa f943 	bl	8000618 <__aeabi_dmul>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800639a:	f7f9 ff87 	bl	80002ac <__adddf3>
 800639e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	9b02      	ldr	r3, [sp, #8]
 80063a8:	4598      	cmp	r8, r3
 80063aa:	dc01      	bgt.n	80063b0 <__kernel_rem_pio2+0x4c8>
 80063ac:	45b8      	cmp	r8, r7
 80063ae:	ddea      	ble.n	8006386 <__kernel_rem_pio2+0x49e>
 80063b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80063b4:	ab4a      	add	r3, sp, #296	; 0x128
 80063b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80063ba:	ed87 7b00 	vstr	d7, [r7]
 80063be:	3e01      	subs	r6, #1
 80063c0:	e6f8      	b.n	80061b4 <__kernel_rem_pio2+0x2cc>
 80063c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	dc0b      	bgt.n	80063e0 <__kernel_rem_pio2+0x4f8>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dc35      	bgt.n	8006438 <__kernel_rem_pio2+0x550>
 80063cc:	d059      	beq.n	8006482 <__kernel_rem_pio2+0x59a>
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	f003 0007 	and.w	r0, r3, #7
 80063d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80063d8:	ecbd 8b02 	vpop	{d8}
 80063dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d1f3      	bne.n	80063ce <__kernel_rem_pio2+0x4e6>
 80063e6:	ab4a      	add	r3, sp, #296	; 0x128
 80063e8:	4423      	add	r3, r4
 80063ea:	9306      	str	r3, [sp, #24]
 80063ec:	461c      	mov	r4, r3
 80063ee:	469a      	mov	sl, r3
 80063f0:	9502      	str	r5, [sp, #8]
 80063f2:	9b02      	ldr	r3, [sp, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f1aa 0a08 	sub.w	sl, sl, #8
 80063fa:	dc6b      	bgt.n	80064d4 <__kernel_rem_pio2+0x5ec>
 80063fc:	46aa      	mov	sl, r5
 80063fe:	f1ba 0f01 	cmp.w	sl, #1
 8006402:	f1a4 0408 	sub.w	r4, r4, #8
 8006406:	f300 8085 	bgt.w	8006514 <__kernel_rem_pio2+0x62c>
 800640a:	9c06      	ldr	r4, [sp, #24]
 800640c:	2000      	movs	r0, #0
 800640e:	3408      	adds	r4, #8
 8006410:	2100      	movs	r1, #0
 8006412:	2d01      	cmp	r5, #1
 8006414:	f300 809d 	bgt.w	8006552 <__kernel_rem_pio2+0x66a>
 8006418:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800641c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006420:	f1bb 0f00 	cmp.w	fp, #0
 8006424:	f040 809b 	bne.w	800655e <__kernel_rem_pio2+0x676>
 8006428:	9b01      	ldr	r3, [sp, #4]
 800642a:	e9c3 5600 	strd	r5, r6, [r3]
 800642e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006432:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006436:	e7ca      	b.n	80063ce <__kernel_rem_pio2+0x4e6>
 8006438:	3408      	adds	r4, #8
 800643a:	ab4a      	add	r3, sp, #296	; 0x128
 800643c:	441c      	add	r4, r3
 800643e:	462e      	mov	r6, r5
 8006440:	2000      	movs	r0, #0
 8006442:	2100      	movs	r1, #0
 8006444:	2e00      	cmp	r6, #0
 8006446:	da36      	bge.n	80064b6 <__kernel_rem_pio2+0x5ce>
 8006448:	f1bb 0f00 	cmp.w	fp, #0
 800644c:	d039      	beq.n	80064c2 <__kernel_rem_pio2+0x5da>
 800644e:	4602      	mov	r2, r0
 8006450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006454:	9c01      	ldr	r4, [sp, #4]
 8006456:	e9c4 2300 	strd	r2, r3, [r4]
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006462:	f7f9 ff21 	bl	80002a8 <__aeabi_dsub>
 8006466:	ae4c      	add	r6, sp, #304	; 0x130
 8006468:	2401      	movs	r4, #1
 800646a:	42a5      	cmp	r5, r4
 800646c:	da2c      	bge.n	80064c8 <__kernel_rem_pio2+0x5e0>
 800646e:	f1bb 0f00 	cmp.w	fp, #0
 8006472:	d002      	beq.n	800647a <__kernel_rem_pio2+0x592>
 8006474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006478:	4619      	mov	r1, r3
 800647a:	9b01      	ldr	r3, [sp, #4]
 800647c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006480:	e7a5      	b.n	80063ce <__kernel_rem_pio2+0x4e6>
 8006482:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006486:	eb0d 0403 	add.w	r4, sp, r3
 800648a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800648e:	2000      	movs	r0, #0
 8006490:	2100      	movs	r1, #0
 8006492:	2d00      	cmp	r5, #0
 8006494:	da09      	bge.n	80064aa <__kernel_rem_pio2+0x5c2>
 8006496:	f1bb 0f00 	cmp.w	fp, #0
 800649a:	d002      	beq.n	80064a2 <__kernel_rem_pio2+0x5ba>
 800649c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064a0:	4619      	mov	r1, r3
 80064a2:	9b01      	ldr	r3, [sp, #4]
 80064a4:	e9c3 0100 	strd	r0, r1, [r3]
 80064a8:	e791      	b.n	80063ce <__kernel_rem_pio2+0x4e6>
 80064aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80064ae:	f7f9 fefd 	bl	80002ac <__adddf3>
 80064b2:	3d01      	subs	r5, #1
 80064b4:	e7ed      	b.n	8006492 <__kernel_rem_pio2+0x5aa>
 80064b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80064ba:	f7f9 fef7 	bl	80002ac <__adddf3>
 80064be:	3e01      	subs	r6, #1
 80064c0:	e7c0      	b.n	8006444 <__kernel_rem_pio2+0x55c>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	e7c5      	b.n	8006454 <__kernel_rem_pio2+0x56c>
 80064c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80064cc:	f7f9 feee 	bl	80002ac <__adddf3>
 80064d0:	3401      	adds	r4, #1
 80064d2:	e7ca      	b.n	800646a <__kernel_rem_pio2+0x582>
 80064d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80064d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80064dc:	9b02      	ldr	r3, [sp, #8]
 80064de:	3b01      	subs	r3, #1
 80064e0:	9302      	str	r3, [sp, #8]
 80064e2:	4632      	mov	r2, r6
 80064e4:	463b      	mov	r3, r7
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7f9 fedf 	bl	80002ac <__adddf3>
 80064ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f7f9 fed5 	bl	80002a8 <__aeabi_dsub>
 80064fe:	4632      	mov	r2, r6
 8006500:	463b      	mov	r3, r7
 8006502:	f7f9 fed3 	bl	80002ac <__adddf3>
 8006506:	ed9d 7b08 	vldr	d7, [sp, #32]
 800650a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800650e:	ed8a 7b00 	vstr	d7, [sl]
 8006512:	e76e      	b.n	80063f2 <__kernel_rem_pio2+0x50a>
 8006514:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006518:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800651c:	4640      	mov	r0, r8
 800651e:	4632      	mov	r2, r6
 8006520:	463b      	mov	r3, r7
 8006522:	4649      	mov	r1, r9
 8006524:	f7f9 fec2 	bl	80002ac <__adddf3>
 8006528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4640      	mov	r0, r8
 8006532:	4649      	mov	r1, r9
 8006534:	f7f9 feb8 	bl	80002a8 <__aeabi_dsub>
 8006538:	4632      	mov	r2, r6
 800653a:	463b      	mov	r3, r7
 800653c:	f7f9 feb6 	bl	80002ac <__adddf3>
 8006540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006544:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006548:	ed84 7b00 	vstr	d7, [r4]
 800654c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006550:	e755      	b.n	80063fe <__kernel_rem_pio2+0x516>
 8006552:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006556:	f7f9 fea9 	bl	80002ac <__adddf3>
 800655a:	3d01      	subs	r5, #1
 800655c:	e759      	b.n	8006412 <__kernel_rem_pio2+0x52a>
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	9a01      	ldr	r2, [sp, #4]
 8006562:	601d      	str	r5, [r3, #0]
 8006564:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006568:	605c      	str	r4, [r3, #4]
 800656a:	609f      	str	r7, [r3, #8]
 800656c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006570:	60d3      	str	r3, [r2, #12]
 8006572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006576:	6110      	str	r0, [r2, #16]
 8006578:	6153      	str	r3, [r2, #20]
 800657a:	e728      	b.n	80063ce <__kernel_rem_pio2+0x4e6>
 800657c:	41700000 	.word	0x41700000
 8006580:	3e700000 	.word	0x3e700000
 8006584:	00000000 	.word	0x00000000

08006588 <__kernel_sin>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	ed2d 8b04 	vpush	{d8-d9}
 8006590:	eeb0 8a41 	vmov.f32	s16, s2
 8006594:	eef0 8a61 	vmov.f32	s17, s3
 8006598:	ec55 4b10 	vmov	r4, r5, d0
 800659c:	b083      	sub	sp, #12
 800659e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80065a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80065a6:	9001      	str	r0, [sp, #4]
 80065a8:	da06      	bge.n	80065b8 <__kernel_sin+0x30>
 80065aa:	ee10 0a10 	vmov	r0, s0
 80065ae:	4629      	mov	r1, r5
 80065b0:	f7fa facc 	bl	8000b4c <__aeabi_d2iz>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d051      	beq.n	800665c <__kernel_sin+0xd4>
 80065b8:	4622      	mov	r2, r4
 80065ba:	462b      	mov	r3, r5
 80065bc:	4620      	mov	r0, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	f7fa f82a 	bl	8000618 <__aeabi_dmul>
 80065c4:	4682      	mov	sl, r0
 80065c6:	468b      	mov	fp, r1
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7fa f822 	bl	8000618 <__aeabi_dmul>
 80065d4:	a341      	add	r3, pc, #260	; (adr r3, 80066dc <__kernel_sin+0x154>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	4680      	mov	r8, r0
 80065dc:	4689      	mov	r9, r1
 80065de:	4650      	mov	r0, sl
 80065e0:	4659      	mov	r1, fp
 80065e2:	f7fa f819 	bl	8000618 <__aeabi_dmul>
 80065e6:	a33f      	add	r3, pc, #252	; (adr r3, 80066e4 <__kernel_sin+0x15c>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7f9 fe5c 	bl	80002a8 <__aeabi_dsub>
 80065f0:	4652      	mov	r2, sl
 80065f2:	465b      	mov	r3, fp
 80065f4:	f7fa f810 	bl	8000618 <__aeabi_dmul>
 80065f8:	a33c      	add	r3, pc, #240	; (adr r3, 80066ec <__kernel_sin+0x164>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7f9 fe55 	bl	80002ac <__adddf3>
 8006602:	4652      	mov	r2, sl
 8006604:	465b      	mov	r3, fp
 8006606:	f7fa f807 	bl	8000618 <__aeabi_dmul>
 800660a:	a33a      	add	r3, pc, #232	; (adr r3, 80066f4 <__kernel_sin+0x16c>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7f9 fe4a 	bl	80002a8 <__aeabi_dsub>
 8006614:	4652      	mov	r2, sl
 8006616:	465b      	mov	r3, fp
 8006618:	f7f9 fffe 	bl	8000618 <__aeabi_dmul>
 800661c:	a337      	add	r3, pc, #220	; (adr r3, 80066fc <__kernel_sin+0x174>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f7f9 fe43 	bl	80002ac <__adddf3>
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	4606      	mov	r6, r0
 800662a:	460f      	mov	r7, r1
 800662c:	b9eb      	cbnz	r3, 800666a <__kernel_sin+0xe2>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4650      	mov	r0, sl
 8006634:	4659      	mov	r1, fp
 8006636:	f7f9 ffef 	bl	8000618 <__aeabi_dmul>
 800663a:	a325      	add	r3, pc, #148	; (adr r3, 80066d0 <__kernel_sin+0x148>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f7f9 fe32 	bl	80002a8 <__aeabi_dsub>
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	f7f9 ffe6 	bl	8000618 <__aeabi_dmul>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	f7f9 fe2a 	bl	80002ac <__adddf3>
 8006658:	4604      	mov	r4, r0
 800665a:	460d      	mov	r5, r1
 800665c:	ec45 4b10 	vmov	d0, r4, r5
 8006660:	b003      	add	sp, #12
 8006662:	ecbd 8b04 	vpop	{d8-d9}
 8006666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666a:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <__kernel_sin+0x150>)
 800666c:	ec51 0b18 	vmov	r0, r1, d8
 8006670:	2200      	movs	r2, #0
 8006672:	f7f9 ffd1 	bl	8000618 <__aeabi_dmul>
 8006676:	4632      	mov	r2, r6
 8006678:	ec41 0b19 	vmov	d9, r0, r1
 800667c:	463b      	mov	r3, r7
 800667e:	4640      	mov	r0, r8
 8006680:	4649      	mov	r1, r9
 8006682:	f7f9 ffc9 	bl	8000618 <__aeabi_dmul>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	ec51 0b19 	vmov	r0, r1, d9
 800668e:	f7f9 fe0b 	bl	80002a8 <__aeabi_dsub>
 8006692:	4652      	mov	r2, sl
 8006694:	465b      	mov	r3, fp
 8006696:	f7f9 ffbf 	bl	8000618 <__aeabi_dmul>
 800669a:	ec53 2b18 	vmov	r2, r3, d8
 800669e:	f7f9 fe03 	bl	80002a8 <__aeabi_dsub>
 80066a2:	a30b      	add	r3, pc, #44	; (adr r3, 80066d0 <__kernel_sin+0x148>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	4606      	mov	r6, r0
 80066aa:	460f      	mov	r7, r1
 80066ac:	4640      	mov	r0, r8
 80066ae:	4649      	mov	r1, r9
 80066b0:	f7f9 ffb2 	bl	8000618 <__aeabi_dmul>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7f9 fdf6 	bl	80002ac <__adddf3>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7f9 fdee 	bl	80002a8 <__aeabi_dsub>
 80066cc:	e7c4      	b.n	8006658 <__kernel_sin+0xd0>
 80066ce:	bf00      	nop
 80066d0:	55555549 	.word	0x55555549
 80066d4:	3fc55555 	.word	0x3fc55555
 80066d8:	3fe00000 	.word	0x3fe00000
 80066dc:	5acfd57c 	.word	0x5acfd57c
 80066e0:	3de5d93a 	.word	0x3de5d93a
 80066e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80066e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80066ec:	57b1fe7d 	.word	0x57b1fe7d
 80066f0:	3ec71de3 	.word	0x3ec71de3
 80066f4:	19c161d5 	.word	0x19c161d5
 80066f8:	3f2a01a0 	.word	0x3f2a01a0
 80066fc:	1110f8a6 	.word	0x1110f8a6
 8006700:	3f811111 	.word	0x3f811111
 8006704:	00000000 	.word	0x00000000

08006708 <floor>:
 8006708:	ec51 0b10 	vmov	r0, r1, d0
 800670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006710:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006714:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006718:	2e13      	cmp	r6, #19
 800671a:	ee10 5a10 	vmov	r5, s0
 800671e:	ee10 8a10 	vmov	r8, s0
 8006722:	460c      	mov	r4, r1
 8006724:	dc32      	bgt.n	800678c <floor+0x84>
 8006726:	2e00      	cmp	r6, #0
 8006728:	da14      	bge.n	8006754 <floor+0x4c>
 800672a:	a333      	add	r3, pc, #204	; (adr r3, 80067f8 <floor+0xf0>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f7f9 fdbc 	bl	80002ac <__adddf3>
 8006734:	2200      	movs	r2, #0
 8006736:	2300      	movs	r3, #0
 8006738:	f7fa f9fe 	bl	8000b38 <__aeabi_dcmpgt>
 800673c:	b138      	cbz	r0, 800674e <floor+0x46>
 800673e:	2c00      	cmp	r4, #0
 8006740:	da57      	bge.n	80067f2 <floor+0xea>
 8006742:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006746:	431d      	orrs	r5, r3
 8006748:	d001      	beq.n	800674e <floor+0x46>
 800674a:	4c2d      	ldr	r4, [pc, #180]	; (8006800 <floor+0xf8>)
 800674c:	2500      	movs	r5, #0
 800674e:	4621      	mov	r1, r4
 8006750:	4628      	mov	r0, r5
 8006752:	e025      	b.n	80067a0 <floor+0x98>
 8006754:	4f2b      	ldr	r7, [pc, #172]	; (8006804 <floor+0xfc>)
 8006756:	4137      	asrs	r7, r6
 8006758:	ea01 0307 	and.w	r3, r1, r7
 800675c:	4303      	orrs	r3, r0
 800675e:	d01f      	beq.n	80067a0 <floor+0x98>
 8006760:	a325      	add	r3, pc, #148	; (adr r3, 80067f8 <floor+0xf0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fda1 	bl	80002ac <__adddf3>
 800676a:	2200      	movs	r2, #0
 800676c:	2300      	movs	r3, #0
 800676e:	f7fa f9e3 	bl	8000b38 <__aeabi_dcmpgt>
 8006772:	2800      	cmp	r0, #0
 8006774:	d0eb      	beq.n	800674e <floor+0x46>
 8006776:	2c00      	cmp	r4, #0
 8006778:	bfbe      	ittt	lt
 800677a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800677e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006782:	19a4      	addlt	r4, r4, r6
 8006784:	ea24 0407 	bic.w	r4, r4, r7
 8006788:	2500      	movs	r5, #0
 800678a:	e7e0      	b.n	800674e <floor+0x46>
 800678c:	2e33      	cmp	r6, #51	; 0x33
 800678e:	dd0b      	ble.n	80067a8 <floor+0xa0>
 8006790:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006794:	d104      	bne.n	80067a0 <floor+0x98>
 8006796:	ee10 2a10 	vmov	r2, s0
 800679a:	460b      	mov	r3, r1
 800679c:	f7f9 fd86 	bl	80002ac <__adddf3>
 80067a0:	ec41 0b10 	vmov	d0, r0, r1
 80067a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b0:	fa23 f707 	lsr.w	r7, r3, r7
 80067b4:	4207      	tst	r7, r0
 80067b6:	d0f3      	beq.n	80067a0 <floor+0x98>
 80067b8:	a30f      	add	r3, pc, #60	; (adr r3, 80067f8 <floor+0xf0>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7f9 fd75 	bl	80002ac <__adddf3>
 80067c2:	2200      	movs	r2, #0
 80067c4:	2300      	movs	r3, #0
 80067c6:	f7fa f9b7 	bl	8000b38 <__aeabi_dcmpgt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d0bf      	beq.n	800674e <floor+0x46>
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	da02      	bge.n	80067d8 <floor+0xd0>
 80067d2:	2e14      	cmp	r6, #20
 80067d4:	d103      	bne.n	80067de <floor+0xd6>
 80067d6:	3401      	adds	r4, #1
 80067d8:	ea25 0507 	bic.w	r5, r5, r7
 80067dc:	e7b7      	b.n	800674e <floor+0x46>
 80067de:	2301      	movs	r3, #1
 80067e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80067e4:	fa03 f606 	lsl.w	r6, r3, r6
 80067e8:	4435      	add	r5, r6
 80067ea:	4545      	cmp	r5, r8
 80067ec:	bf38      	it	cc
 80067ee:	18e4      	addcc	r4, r4, r3
 80067f0:	e7f2      	b.n	80067d8 <floor+0xd0>
 80067f2:	2500      	movs	r5, #0
 80067f4:	462c      	mov	r4, r5
 80067f6:	e7aa      	b.n	800674e <floor+0x46>
 80067f8:	8800759c 	.word	0x8800759c
 80067fc:	7e37e43c 	.word	0x7e37e43c
 8006800:	bff00000 	.word	0xbff00000
 8006804:	000fffff 	.word	0x000fffff

08006808 <scalbn>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	ec55 4b10 	vmov	r4, r5, d0
 800680e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006812:	4606      	mov	r6, r0
 8006814:	462b      	mov	r3, r5
 8006816:	b99a      	cbnz	r2, 8006840 <scalbn+0x38>
 8006818:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800681c:	4323      	orrs	r3, r4
 800681e:	d036      	beq.n	800688e <scalbn+0x86>
 8006820:	4b39      	ldr	r3, [pc, #228]	; (8006908 <scalbn+0x100>)
 8006822:	4629      	mov	r1, r5
 8006824:	ee10 0a10 	vmov	r0, s0
 8006828:	2200      	movs	r2, #0
 800682a:	f7f9 fef5 	bl	8000618 <__aeabi_dmul>
 800682e:	4b37      	ldr	r3, [pc, #220]	; (800690c <scalbn+0x104>)
 8006830:	429e      	cmp	r6, r3
 8006832:	4604      	mov	r4, r0
 8006834:	460d      	mov	r5, r1
 8006836:	da10      	bge.n	800685a <scalbn+0x52>
 8006838:	a32b      	add	r3, pc, #172	; (adr r3, 80068e8 <scalbn+0xe0>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	e03a      	b.n	80068b6 <scalbn+0xae>
 8006840:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006844:	428a      	cmp	r2, r1
 8006846:	d10c      	bne.n	8006862 <scalbn+0x5a>
 8006848:	ee10 2a10 	vmov	r2, s0
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fd2c 	bl	80002ac <__adddf3>
 8006854:	4604      	mov	r4, r0
 8006856:	460d      	mov	r5, r1
 8006858:	e019      	b.n	800688e <scalbn+0x86>
 800685a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800685e:	460b      	mov	r3, r1
 8006860:	3a36      	subs	r2, #54	; 0x36
 8006862:	4432      	add	r2, r6
 8006864:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006868:	428a      	cmp	r2, r1
 800686a:	dd08      	ble.n	800687e <scalbn+0x76>
 800686c:	2d00      	cmp	r5, #0
 800686e:	a120      	add	r1, pc, #128	; (adr r1, 80068f0 <scalbn+0xe8>)
 8006870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006874:	da1c      	bge.n	80068b0 <scalbn+0xa8>
 8006876:	a120      	add	r1, pc, #128	; (adr r1, 80068f8 <scalbn+0xf0>)
 8006878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800687c:	e018      	b.n	80068b0 <scalbn+0xa8>
 800687e:	2a00      	cmp	r2, #0
 8006880:	dd08      	ble.n	8006894 <scalbn+0x8c>
 8006882:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006886:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800688a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800688e:	ec45 4b10 	vmov	d0, r4, r5
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006898:	da19      	bge.n	80068ce <scalbn+0xc6>
 800689a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800689e:	429e      	cmp	r6, r3
 80068a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80068a4:	dd0a      	ble.n	80068bc <scalbn+0xb4>
 80068a6:	a112      	add	r1, pc, #72	; (adr r1, 80068f0 <scalbn+0xe8>)
 80068a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e2      	bne.n	8006876 <scalbn+0x6e>
 80068b0:	a30f      	add	r3, pc, #60	; (adr r3, 80068f0 <scalbn+0xe8>)
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f7f9 feaf 	bl	8000618 <__aeabi_dmul>
 80068ba:	e7cb      	b.n	8006854 <scalbn+0x4c>
 80068bc:	a10a      	add	r1, pc, #40	; (adr r1, 80068e8 <scalbn+0xe0>)
 80068be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0b8      	beq.n	8006838 <scalbn+0x30>
 80068c6:	a10e      	add	r1, pc, #56	; (adr r1, 8006900 <scalbn+0xf8>)
 80068c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068cc:	e7b4      	b.n	8006838 <scalbn+0x30>
 80068ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068d2:	3236      	adds	r2, #54	; 0x36
 80068d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80068dc:	4620      	mov	r0, r4
 80068de:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <scalbn+0x108>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	e7e8      	b.n	80068b6 <scalbn+0xae>
 80068e4:	f3af 8000 	nop.w
 80068e8:	c2f8f359 	.word	0xc2f8f359
 80068ec:	01a56e1f 	.word	0x01a56e1f
 80068f0:	8800759c 	.word	0x8800759c
 80068f4:	7e37e43c 	.word	0x7e37e43c
 80068f8:	8800759c 	.word	0x8800759c
 80068fc:	fe37e43c 	.word	0xfe37e43c
 8006900:	c2f8f359 	.word	0xc2f8f359
 8006904:	81a56e1f 	.word	0x81a56e1f
 8006908:	43500000 	.word	0x43500000
 800690c:	ffff3cb0 	.word	0xffff3cb0
 8006910:	3c900000 	.word	0x3c900000

08006914 <_init>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr

08006920 <_fini>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr
